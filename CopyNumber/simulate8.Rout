
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(patchwork)
> library(loo)
This is loo version 2.8.0
- Online documentation and vignettes at mc-stan.org/loo
- As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. 
> library(bayesplot)
This is bayesplot version 1.11.1
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
> library(cmdstanr)
This is cmdstanr version 0.8.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /u/cdslab/scocomello/.cmdstan/cmdstan-2.34.1
- CmdStan version: 2.34.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable cmdstanr_no_ver_check=TRUE.
> library(factoextra)
Loading required package: ggplot2
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr) #for plotting add in the right script
> library(fossil) #RI and ARI computation
Loading required package: sp
Loading required package: maps
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> 
> 
> 
> #setwd("C:/Users/sarac/CDS_git/Copy-Number-Timing/CopyNumber/")
> #orfeo
> setwd("/orfeo/cephfs/scratch/cdslab/scocomello/Copy_Number_Timing/CopyNumber")
> 
> original_dir <- getwd()
> 
> source("./CNTiming/R/simulate_functions.R")
> source("./CNTiming/R/fitting_functions.R")
> source("./CNTiming/R/plotting_functions.R")
> 
> 
> self_name = "8"
> new_dir = paste0("../",self_name) #relative path of the new created directory where to save the simulation results
> dir.create(new_dir)
Warning message:
In dir.create(new_dir) : '../8' already exists
> 
> number_events = 30
> number_clocks = 3
> 
> INIT = FALSE
> epsilon = 0.20
> n_simulations = 20
> purity = 0.99
> 
> vector_karyo <- c("2:0", "2:1", "2:2")
> weights_karyo <- c(0.33, 0.33, 0.33)
> 
> 
> # get simulation parametes
> coverage = 100 # average number of reads that align to a reference base
> mu = 1e-4 # mutation rate
> w = 1e-2 # cell division rate
> l = 1e7 # length of the segment
> time_interval = 20
> 
> 
> options(bitmapType='cairo')
> 
> 
> 
> 
> for(i in 1:n_simulations){
+   # Create a unique directory for each iteration
+   iter_dir <- paste0("/simulation_iteration_", i)
+   iter_dir <- paste0(new_dir,iter_dir)
+   dir.create(iter_dir)
+   setwd(iter_dir)
+   dir.create(paste0("./plots"), showWarnings = TRUE)
+   dir.create(paste0("./results"), showWarnings = FALSE)
+   
+   
+ 
+   vector_tau = rep(0, number_clocks)
+   
+   for (j in 1:number_clocks){
+     vector_tau[j] = runif(1, 0)
+     if (j != 1){
+       while (!all ( abs(vector_tau[1:j-1] - vector_tau[j]) > epsilon  )   ){
+         vector_tau[j] = runif(1, 0)
+       }
+     }
+   }
+   weights_tau <- rep(1/number_clocks, number_clocks)
+   
+   data <- get_taus_karyo(number_events, vector_tau, vector_karyo, weights_tau, weights_karyo)
+   simulation_data_all_segments = get_simulation(data$taus, data$karyo, purity, coverage = 100) # the other parameters have default value assigned if none is specified
+   simulation_data_all_segments <- simulation_data_all_segments[order(simulation_data_all_segments$segment_id), ]
+ 
+ 
+   saveRDS(simulation_data_all_segments, "./results/all_sim_input_prepare_input_data.rds")
+ 
+ 
+ 
+   
+   Subtitle <- vector("list", (length(unique(simulation_data_all_segments$segment_id))+1))
+   Subtitle[[1]]  <- paste0("Number of mutations per segment: ")
+   num_mutations_all_segments <- c()
+ 
+     for (i in seq_along(unique(simulation_data_all_segments$segment_id))) {
+     segment <- unique(simulation_data_all_segments$segment_id)[i]
+     num_mutations <- nrow(simulation_data_all_segments %>% filter(segment_id == segment))
+     num_mutations_all_segments <- c(num_mutations_all_segments, num_mutations)
+     Subtitle[[i+1]] <- paste0(segment, "=", num_mutations," ")
+   }
+   
+   Subtitle <- paste(Subtitle, collapse = "   ")
+   cat(Subtitle)
+ 
+   mean_mut <- mean(num_mutations_all_segments)
+   max_mut <- max(num_mutations_all_segments)
+   min_mut <- min(num_mutations_all_segments)
+ 
+   Subtitle_short <- paste0("Average number of mutations per segment: ", mean_mut, "  Minimum number of mutations per segment: ", min_mut, "  Maximum number of mutations per segment: ", max_mut )
+ 
+ 
+   #add statistics on number of mutations from the simulation
+   
+   simulation_params <- list(
+     vector_tau = vector_tau,
+     vector_karyo = vector_karyo,
+     weights_tau = weights_tau,
+     weights_karyo = weights_karyo,
+     taus = data$taus,
+     karyo = data$karyo,
+     purity = purity,
+     number_events = number_events, # = nrow(vector-tau) / nrow(vector_karyo)
+     number_clocks = number_clocks, # = unique(vector_tau)
+     epsilon = epsilon
+   )
+ 
+ 
+ 
+   simulation_data_plot = simulation_data_all_segments %>% mutate (tau = round(tau, 2))
+   plot_data <- simulation_data_plot %>% 
+     ggplot(mapping = aes(x = NV / DP, fill = segment_name)) +
+     geom_histogram(alpha = .5, position = "identity") +
+     labs(
+       title = "Distribution on the VAF for each segment in the simulated data",
+       subtitle = paste0(Subtitle_short)
+     )+
+     facet_wrap(vars(karyotype, tau, segment_name), scales = "free_x", strip.position = "bottom") +
+     theme_minimal() +
+     theme(
+     panel.background = element_rect(fill = "white", color = NA),  # White panel background
+     plot.background = element_rect(fill = "white", color = NA),   # White plot background
+     strip.background = element_rect(fill = "white", color = NA),  # White strip background
+     strip.placement = "outside",   # Place facet labels outside
+     axis.text.x = element_text(angle = 360, hjust = 1, color = "black", size = 8),  # Rotate and adjust x-axis text
+     axis.ticks.x = element_line(color = "black"),  # Black x-axis ticks
+     panel.spacing = unit(1, "lines"),  # Adjust space between facets
+     strip.text.x = element_text(size = 10, color = "black"),  # Adjust and color strip text
+     axis.line = element_line(color = "black"),  # Black axis lines
+     axis.title.x = element_text(color = "black"),  # Black x-axis title
+     axis.title.y = element_text(color = "black")   # Black y-axis title
+   )
+ 
+ 
+   #save plot of the simulated data in which we can see each single segment VAF distribution
+   ggsave("./plots/simulation_data.png", plot = plot_data, width = 12 + simulation_params$number_events, height = 10 + simulation_params$number_events + (simulation_params$number_events/1.3), limitsize = FALSE,   device = png) 
+   #simulation_params can be substituted in relation with simulation_data variables
+   
+   
+   #in "fit model selection best K" the plots for each K inference is directly saved 
+   results <- fit_model_selection_best_K(simulation_data_all_segments, data$karyo, purity, INIT = INIT, simulation_params = simulation_params)
+   saveRDS(results, paste0("./results/results_simulation",i,".rds"))
+   
+ 
+   
+   
+   
+   model_selection_plot = plotting_model_selection(results)
+   model_selection_plot
+   ggsave("./plots/model_selection_plot.png", plot = model_selection_plot, width = 12, height = 10,  device = png)
+   
+   model_selection <- results$model_selection_tibble
+   saveRDS(model_selection, "./results/model_selection.rds")
+   
+ 
+   
+   setwd(original_dir)
+   
+ }
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010965 seconds 
1000 transitions using 10 leapfrog steps per transition would take 109.65 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44508.155             1.000            1.000 
   200       -44510.319             0.500            1.000 
   300       -44503.012             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=406    segment 2=293    segment 3=511    segment 4=259    segment 5=524    segment 6=544    segment 7=384    segment 8=567    segment 9=470    segment 10=446    segment 11=213    segment 12=438    segment 13=385    segment 14=512    segment 15=460    segment 16=220    segment 17=762    segment 18=246    segment 19=590    segment 20=428    segment 21=398    segment 22=468    segment 23=288    segment 24=460    segment 25=350    segment 26=405    segment 27=445    segment 28=586    segment 29=456    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019778 seconds 
1000 transitions using 10 leapfrog steps per transition would take 197.78 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42506.604             1.000            1.000 
   200       -42506.475             0.500            1.000 
   300       -42503.719             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  53.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=406    segment 2=293    segment 3=511    segment 4=259    segment 5=524    segment 6=544    segment 7=384    segment 8=567    segment 9=470    segment 10=446    segment 11=213    segment 12=438    segment 13=385    segment 14=512    segment 15=460    segment 16=220    segment 17=762    segment 18=246    segment 19=590    segment 20=428    segment 21=398    segment 22=468    segment 23=288    segment 24=460    segment 25=350    segment 26=405    segment 27=445    segment 28=586    segment 29=456    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028915 seconds 
1000 transitions using 10 leapfrog steps per transition would take 289.15 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42536.784             1.000            1.000 
   200       -42514.168             0.500            1.000 
   300       -42511.936             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=406    segment 2=293    segment 3=511    segment 4=259    segment 5=524    segment 6=544    segment 7=384    segment 8=567    segment 9=470    segment 10=446    segment 11=213    segment 12=438    segment 13=385    segment 14=512    segment 15=460    segment 16=220    segment 17=762    segment 18=246    segment 19=590    segment 20=428    segment 21=398    segment 22=468    segment 23=288    segment 24=460    segment 25=350    segment 26=405    segment 27=445    segment 28=586    segment 29=456    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036801 seconds 
1000 transitions using 10 leapfrog steps per transition would take 368.01 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42588.215             1.000            1.000 
   200       -42570.733             0.500            1.000 
   300       -42558.763             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=406    segment 2=293    segment 3=511    segment 4=259    segment 5=524    segment 6=544    segment 7=384    segment 8=567    segment 9=470    segment 10=446    segment 11=213    segment 12=438    segment 13=385    segment 14=512    segment 15=460    segment 16=220    segment 17=762    segment 18=246    segment 19=590    segment 20=428    segment 21=398    segment 22=468    segment 23=288    segment 24=460    segment 25=350    segment 26=405    segment 27=445    segment 28=586    segment 29=456    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.049456 seconds 
1000 transitions using 10 leapfrog steps per transition would take 494.56 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42599.362             1.000            1.000 
   200       -42601.405             0.500            1.000 
   300       -42596.607             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  74.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=406    segment 2=293    segment 3=511    segment 4=259    segment 5=524    segment 6=544    segment 7=384    segment 8=567    segment 9=470    segment 10=446    segment 11=213    segment 12=438    segment 13=385    segment 14=512    segment 15=460    segment 16=220    segment 17=762    segment 18=246    segment 19=590    segment 20=428    segment 21=398    segment 22=468    segment 23=288    segment 24=460    segment 25=350    segment 26=405    segment 27=445    segment 28=586    segment 29=456    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019507 seconds 
1000 transitions using 10 leapfrog steps per transition would take 195.07 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42506.118             1.000            1.000 
   200       -42504.818             0.500            1.000 
   300       -42506.731             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  42.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=406    segment 2=293    segment 3=511    segment 4=259    segment 5=524    segment 6=544    segment 7=384    segment 8=567    segment 9=470    segment 10=446    segment 11=213    segment 12=438    segment 13=385    segment 14=512    segment 15=460    segment 16=220    segment 17=762    segment 18=246    segment 19=590    segment 20=428    segment 21=398    segment 22=468    segment 23=288    segment 24=460    segment 25=350    segment 26=405    segment 27=445    segment 28=586    segment 29=456    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=417    2=301    3=535    4=267    5=543    6=562    7=401    8=594    9=482    10=465    11=219    12=457    13=399    14=531    15=481    16=223    17=790    18=251    19=612    20=450    21=412    22=486    23=297    24=485    25=364    26=422    27=464    28=609    29=471    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010297 seconds 
1000 transitions using 10 leapfrog steps per transition would take 102.97 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43691.166             1.000            1.000 
   200       -43683.351             0.500            1.000 
   300       -43683.352             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  32.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=288    segment 2=264    segment 3=529    segment 4=426    segment 5=475    segment 6=654    segment 7=549    segment 8=427    segment 9=248    segment 10=524    segment 11=639    segment 12=228    segment 13=641    segment 14=542    segment 15=294    segment 16=441    segment 17=511    segment 18=323    segment 19=403    segment 20=306    segment 21=650    segment 22=299    segment 23=291    segment 24=213    segment 25=465    segment 26=458    segment 27=638    segment 28=478    segment 29=429    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019322 seconds 
1000 transitions using 10 leapfrog steps per transition would take 193.22 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42974.993             1.000            1.000 
   200       -42981.137             0.500            1.000 
   300       -42968.096             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  40.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=288    segment 2=264    segment 3=529    segment 4=426    segment 5=475    segment 6=654    segment 7=549    segment 8=427    segment 9=248    segment 10=524    segment 11=639    segment 12=228    segment 13=641    segment 14=542    segment 15=294    segment 16=441    segment 17=511    segment 18=323    segment 19=403    segment 20=306    segment 21=650    segment 22=299    segment 23=291    segment 24=213    segment 25=465    segment 26=458    segment 27=638    segment 28=478    segment 29=429    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028387 seconds 
1000 transitions using 10 leapfrog steps per transition would take 283.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43003.189             1.000            1.000 
   200       -42997.855             0.500            1.000 
   300       -42993.904             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  53.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=288    segment 2=264    segment 3=529    segment 4=426    segment 5=475    segment 6=654    segment 7=549    segment 8=427    segment 9=248    segment 10=524    segment 11=639    segment 12=228    segment 13=641    segment 14=542    segment 15=294    segment 16=441    segment 17=511    segment 18=323    segment 19=403    segment 20=306    segment 21=650    segment 22=299    segment 23=291    segment 24=213    segment 25=465    segment 26=458    segment 27=638    segment 28=478    segment 29=429    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03609 seconds 
1000 transitions using 10 leapfrog steps per transition would take 360.9 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43026.094             1.000            1.000 
   200       -43022.001             0.500            1.000 
   300       -43021.217             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  84.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=288    segment 2=264    segment 3=529    segment 4=426    segment 5=475    segment 6=654    segment 7=549    segment 8=427    segment 9=248    segment 10=524    segment 11=639    segment 12=228    segment 13=641    segment 14=542    segment 15=294    segment 16=441    segment 17=511    segment 18=323    segment 19=403    segment 20=306    segment 21=650    segment 22=299    segment 23=291    segment 24=213    segment 25=465    segment 26=458    segment 27=638    segment 28=478    segment 29=429    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048254 seconds 
1000 transitions using 10 leapfrog steps per transition would take 482.54 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43006.426             1.000            1.000 
   200       -43007.739             0.500            1.000 
   300       -42999.931             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  86.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=288    segment 2=264    segment 3=529    segment 4=426    segment 5=475    segment 6=654    segment 7=549    segment 8=427    segment 9=248    segment 10=524    segment 11=639    segment 12=228    segment 13=641    segment 14=542    segment 15=294    segment 16=441    segment 17=511    segment 18=323    segment 19=403    segment 20=306    segment 21=650    segment 22=299    segment 23=291    segment 24=213    segment 25=465    segment 26=458    segment 27=638    segment 28=478    segment 29=429    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:0" "2:2" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019072 seconds 
1000 transitions using 10 leapfrog steps per transition would take 190.72 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42972.809             1.000            1.000 
   200       -42969.098             0.500            1.000 
   300       -42971.306             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  43.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=288    segment 2=264    segment 3=529    segment 4=426    segment 5=475    segment 6=654    segment 7=549    segment 8=427    segment 9=248    segment 10=524    segment 11=639    segment 12=228    segment 13=641    segment 14=542    segment 15=294    segment 16=441    segment 17=511    segment 18=323    segment 19=403    segment 20=306    segment 21=650    segment 22=299    segment 23=291    segment 24=213    segment 25=465    segment 26=458    segment 27=638    segment 28=478    segment 29=429    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=298    2=270    3=543    4=438    5=483    6=673    7=569    8=446    9=255    10=546    11=654    12=232    13=676    14=561    15=304    16=461    17=532    18=336    19=420    20=310    21=671    22=308    23=299    24=220    25=482    26=474    27=664    28=494    29=452    30=417 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011574 seconds 
1000 transitions using 10 leapfrog steps per transition would take 115.74 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47381.622             1.000            1.000 
   200       -47388.274             0.500            1.000 
   300       -47388.334             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  36.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=516    segment 2=278    segment 3=706    segment 4=561    segment 5=261    segment 6=519    segment 7=518    segment 8=251    segment 9=262    segment 10=482    segment 11=485    segment 12=528    segment 13=498    segment 14=504    segment 15=459    segment 16=622    segment 17=445    segment 18=258    segment 19=469    segment 20=705    segment 21=750    segment 22=801    segment 23=509    segment 24=569    segment 25=566    segment 26=248    segment 27=650    segment 28=333    segment 29=288    segment 30=427 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.02088 seconds 
1000 transitions using 10 leapfrog steps per transition would take 208.8 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46179.777             1.000            1.000 
   200       -46175.436             0.500            1.000 
   300       -46177.102             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=516    segment 2=278    segment 3=706    segment 4=561    segment 5=261    segment 6=519    segment 7=518    segment 8=251    segment 9=262    segment 10=482    segment 11=485    segment 12=528    segment 13=498    segment 14=504    segment 15=459    segment 16=622    segment 17=445    segment 18=258    segment 19=469    segment 20=705    segment 21=750    segment 22=801    segment 23=509    segment 24=569    segment 25=566    segment 26=248    segment 27=650    segment 28=333    segment 29=288    segment 30=427 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.030523 seconds 
1000 transitions using 10 leapfrog steps per transition would take 305.23 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46219.440             1.000            1.000 
   200       -46213.141             0.500            1.000 
   300       -46214.235             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=516    segment 2=278    segment 3=706    segment 4=561    segment 5=261    segment 6=519    segment 7=518    segment 8=251    segment 9=262    segment 10=482    segment 11=485    segment 12=528    segment 13=498    segment 14=504    segment 15=459    segment 16=622    segment 17=445    segment 18=258    segment 19=469    segment 20=705    segment 21=750    segment 22=801    segment 23=509    segment 24=569    segment 25=566    segment 26=248    segment 27=650    segment 28=333    segment 29=288    segment 30=427 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.040839 seconds 
1000 transitions using 10 leapfrog steps per transition would take 408.39 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46228.489             1.000            1.000 
   200       -46216.743             0.500            1.000 
   300       -46199.286             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  69.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=516    segment 2=278    segment 3=706    segment 4=561    segment 5=261    segment 6=519    segment 7=518    segment 8=251    segment 9=262    segment 10=482    segment 11=485    segment 12=528    segment 13=498    segment 14=504    segment 15=459    segment 16=622    segment 17=445    segment 18=258    segment 19=469    segment 20=705    segment 21=750    segment 22=801    segment 23=509    segment 24=569    segment 25=566    segment 26=248    segment 27=650    segment 28=333    segment 29=288    segment 30=427 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052491 seconds 
1000 transitions using 10 leapfrog steps per transition would take 524.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46238.641             1.000            1.000 
   200       -46229.567             0.500            1.000 
   300       -46227.921             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  80.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=516    segment 2=278    segment 3=706    segment 4=561    segment 5=261    segment 6=519    segment 7=518    segment 8=251    segment 9=262    segment 10=482    segment 11=485    segment 12=528    segment 13=498    segment 14=504    segment 15=459    segment 16=622    segment 17=445    segment 18=258    segment 19=469    segment 20=705    segment 21=750    segment 22=801    segment 23=509    segment 24=569    segment 25=566    segment 26=248    segment 27=650    segment 28=333    segment 29=288    segment 30=427 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2" "2:2"
[13] "2:1" "2:1" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.040225 seconds 
1000 transitions using 10 leapfrog steps per transition would take 402.25 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46224.068             1.000            1.000 
   200       -46213.056             0.500            1.000 
   300       -46210.235             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  74.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=516    segment 2=278    segment 3=706    segment 4=561    segment 5=261    segment 6=519    segment 7=518    segment 8=251    segment 9=262    segment 10=482    segment 11=485    segment 12=528    segment 13=498    segment 14=504    segment 15=459    segment 16=622    segment 17=445    segment 18=258    segment 19=469    segment 20=705    segment 21=750    segment 22=801    segment 23=509    segment 24=569    segment 25=566    segment 26=248    segment 27=650    segment 28=333    segment 29=288    segment 30=427 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=536    2=285    3=735    4=588    5=265    6=539    7=533    8=255    9=268    10=502    11=503    12=544    13=514    14=517    15=479    16=648    17=474    18=264    19=484    20=737    21=785    22=833    23=535    24=590    25=587    26=253    27=680    28=342    29=301    30=442 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010402 seconds 
1000 transitions using 10 leapfrog steps per transition would take 104.02 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42701.336             1.000            1.000 
   200       -42701.451             0.500            1.000 
   300       -42699.389             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=477    segment 2=622    segment 3=510    segment 4=405    segment 5=571    segment 6=595    segment 7=240    segment 8=428    segment 9=229    segment 10=441    segment 11=332    segment 12=225    segment 13=640    segment 14=412    segment 15=223    segment 16=372    segment 17=420    segment 18=500    segment 19=385    segment 20=675    segment 21=391    segment 22=242    segment 23=613    segment 24=597    segment 25=532    segment 26=453    segment 27=220    segment 28=330    segment 29=419    segment 30=363 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018702 seconds 
1000 transitions using 10 leapfrog steps per transition would take 187.02 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40742.819             1.000            1.000 
   200       -40741.534             0.500            1.000 
   300       -40737.907             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  51.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=477    segment 2=622    segment 3=510    segment 4=405    segment 5=571    segment 6=595    segment 7=240    segment 8=428    segment 9=229    segment 10=441    segment 11=332    segment 12=225    segment 13=640    segment 14=412    segment 15=223    segment 16=372    segment 17=420    segment 18=500    segment 19=385    segment 20=675    segment 21=391    segment 22=242    segment 23=613    segment 24=597    segment 25=532    segment 26=453    segment 27=220    segment 28=330    segment 29=419    segment 30=363 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028369 seconds 
1000 transitions using 10 leapfrog steps per transition would take 283.69 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40758.848             1.000            1.000 
   200       -40754.938             0.500            1.000 
   300       -40752.235             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  54.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=477    segment 2=622    segment 3=510    segment 4=405    segment 5=571    segment 6=595    segment 7=240    segment 8=428    segment 9=229    segment 10=441    segment 11=332    segment 12=225    segment 13=640    segment 14=412    segment 15=223    segment 16=372    segment 17=420    segment 18=500    segment 19=385    segment 20=675    segment 21=391    segment 22=242    segment 23=613    segment 24=597    segment 25=532    segment 26=453    segment 27=220    segment 28=330    segment 29=419    segment 30=363 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.035839 seconds 
1000 transitions using 10 leapfrog steps per transition would take 358.39 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40821.963             1.000            1.000 
   200       -40814.336             0.500            1.000 
   300       -40807.336             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  63.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=477    segment 2=622    segment 3=510    segment 4=405    segment 5=571    segment 6=595    segment 7=240    segment 8=428    segment 9=229    segment 10=441    segment 11=332    segment 12=225    segment 13=640    segment 14=412    segment 15=223    segment 16=372    segment 17=420    segment 18=500    segment 19=385    segment 20=675    segment 21=391    segment 22=242    segment 23=613    segment 24=597    segment 25=532    segment 26=453    segment 27=220    segment 28=330    segment 29=419    segment 30=363 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048714 seconds 
1000 transitions using 10 leapfrog steps per transition would take 487.14 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40817.987             1.000            1.000 
   200       -40793.744             0.500            1.000 
   300       -40769.546             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=477    segment 2=622    segment 3=510    segment 4=405    segment 5=571    segment 6=595    segment 7=240    segment 8=428    segment 9=229    segment 10=441    segment 11=332    segment 12=225    segment 13=640    segment 14=412    segment 15=223    segment 16=372    segment 17=420    segment 18=500    segment 19=385    segment 20=675    segment 21=391    segment 22=242    segment 23=613    segment 24=597    segment 25=532    segment 26=453    segment 27=220    segment 28=330    segment 29=419    segment 30=363 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0"
[13] "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:1"
[25] "2:1" "2:2" "2:0" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027806 seconds 
1000 transitions using 10 leapfrog steps per transition would take 278.06 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40807.167             1.000            1.000 
   200       -40791.282             0.500            1.000 
   300       -40788.262             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  58.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=477    segment 2=622    segment 3=510    segment 4=405    segment 5=571    segment 6=595    segment 7=240    segment 8=428    segment 9=229    segment 10=441    segment 11=332    segment 12=225    segment 13=640    segment 14=412    segment 15=223    segment 16=372    segment 17=420    segment 18=500    segment 19=385    segment 20=675    segment 21=391    segment 22=242    segment 23=613    segment 24=597    segment 25=532    segment 26=453    segment 27=220    segment 28=330    segment 29=419    segment 30=363 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=499    2=657    3=532    4=423    5=594    6=619    7=245    8=442    9=233    10=457    11=339    12=230    13=665    14=429    15=225    16=391    17=440    18=521    19=403    20=698    21=411    22=248    23=633    24=619    25=557    26=473    27=225    28=344    29=443    30=378 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010599 seconds 
1000 transitions using 10 leapfrog steps per transition would take 105.99 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45372.517             1.000            1.000 
   200       -45352.516             0.500            1.000 
   300       -45347.814             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  32.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=570    segment 2=479    segment 3=585    segment 4=206    segment 5=341    segment 6=694    segment 7=522    segment 8=580    segment 9=387    segment 10=193    segment 11=383    segment 12=535    segment 13=495    segment 14=185    segment 15=512    segment 16=375    segment 17=692    segment 18=375    segment 19=684    segment 20=518    segment 21=297    segment 22=512    segment 23=423    segment 24=282    segment 25=538    segment 26=374    segment 27=358    segment 28=181    segment 29=561    segment 30=726 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019491 seconds 
1000 transitions using 10 leapfrog steps per transition would take 194.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42980.919             1.000            1.000 
   200       -42975.063             0.500            1.000 
   300       -42976.935             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  51.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=570    segment 2=479    segment 3=585    segment 4=206    segment 5=341    segment 6=694    segment 7=522    segment 8=580    segment 9=387    segment 10=193    segment 11=383    segment 12=535    segment 13=495    segment 14=185    segment 15=512    segment 16=375    segment 17=692    segment 18=375    segment 19=684    segment 20=518    segment 21=297    segment 22=512    segment 23=423    segment 24=282    segment 25=538    segment 26=374    segment 27=358    segment 28=181    segment 29=561    segment 30=726 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029488 seconds 
1000 transitions using 10 leapfrog steps per transition would take 294.88 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43017.160             1.000            1.000 
   200       -42994.014             0.500            1.000 
   300       -42987.929             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  56.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=570    segment 2=479    segment 3=585    segment 4=206    segment 5=341    segment 6=694    segment 7=522    segment 8=580    segment 9=387    segment 10=193    segment 11=383    segment 12=535    segment 13=495    segment 14=185    segment 15=512    segment 16=375    segment 17=692    segment 18=375    segment 19=684    segment 20=518    segment 21=297    segment 22=512    segment 23=423    segment 24=282    segment 25=538    segment 26=374    segment 27=358    segment 28=181    segment 29=561    segment 30=726 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.037074 seconds 
1000 transitions using 10 leapfrog steps per transition would take 370.74 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43054.424             1.000            1.000 
   200       -43031.141             0.500            1.000 
   300       -43029.895             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  64.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=570    segment 2=479    segment 3=585    segment 4=206    segment 5=341    segment 6=694    segment 7=522    segment 8=580    segment 9=387    segment 10=193    segment 11=383    segment 12=535    segment 13=495    segment 14=185    segment 15=512    segment 16=375    segment 17=692    segment 18=375    segment 19=684    segment 20=518    segment 21=297    segment 22=512    segment 23=423    segment 24=282    segment 25=538    segment 26=374    segment 27=358    segment 28=181    segment 29=561    segment 30=726 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.050524 seconds 
1000 transitions using 10 leapfrog steps per transition would take 505.24 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43055.145             1.000            1.000 
   200       -43031.964             0.500            1.000 
   300       -43028.094             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  77.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=570    segment 2=479    segment 3=585    segment 4=206    segment 5=341    segment 6=694    segment 7=522    segment 8=580    segment 9=387    segment 10=193    segment 11=383    segment 12=535    segment 13=495    segment 14=185    segment 15=512    segment 16=375    segment 17=692    segment 18=375    segment 19=684    segment 20=518    segment 21=297    segment 22=512    segment 23=423    segment 24=282    segment 25=538    segment 26=374    segment 27=358    segment 28=181    segment 29=561    segment 30=726 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1"
[13] "2:1" "2:0" "2:1" "2:1" "2:2" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:1" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019978 seconds 
1000 transitions using 10 leapfrog steps per transition would take 199.78 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42980.842             1.000            1.000 
   200       -42975.437             0.500            1.000 
   300       -42973.242             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=570    segment 2=479    segment 3=585    segment 4=206    segment 5=341    segment 6=694    segment 7=522    segment 8=580    segment 9=387    segment 10=193    segment 11=383    segment 12=535    segment 13=495    segment 14=185    segment 15=512    segment 16=375    segment 17=692    segment 18=375    segment 19=684    segment 20=518    segment 21=297    segment 22=512    segment 23=423    segment 24=282    segment 25=538    segment 26=374    segment 27=358    segment 28=181    segment 29=561    segment 30=726 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=498    3=612    4=211    5=354    6=723    7=540    8=608    9=397    10=197    11=401    12=549    13=522    14=186    15=544    16=397    17=720    18=389    19=708    20=555    21=310    22=535    23=446    24=286    25=561    26=393    27=369    28=186    29=578    30=748 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.013161 seconds 
1000 transitions using 10 leapfrog steps per transition would take 131.61 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -51292.556             1.000            1.000 
   200       -51276.432             0.500            1.000 
   300       -51275.917             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  40.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=556    segment 2=329    segment 3=443    segment 4=606    segment 5=487    segment 6=483    segment 7=271    segment 8=542    segment 9=371    segment 10=543    segment 11=515    segment 12=508    segment 13=524    segment 14=513    segment 15=516    segment 16=510    segment 17=375    segment 18=493    segment 19=467    segment 20=685    segment 21=752    segment 22=482    segment 23=773    segment 24=515    segment 25=557    segment 26=552    segment 27=634    segment 28=506    segment 29=385    segment 30=763 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.024833 seconds 
1000 transitions using 10 leapfrog steps per transition would take 248.33 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49736.457             1.000            1.000 
   200       -49736.445             0.500            1.000 
   300       -49732.185             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  55.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=556    segment 2=329    segment 3=443    segment 4=606    segment 5=487    segment 6=483    segment 7=271    segment 8=542    segment 9=371    segment 10=543    segment 11=515    segment 12=508    segment 13=524    segment 14=513    segment 15=516    segment 16=510    segment 17=375    segment 18=493    segment 19=467    segment 20=685    segment 21=752    segment 22=482    segment 23=773    segment 24=515    segment 25=557    segment 26=552    segment 27=634    segment 28=506    segment 29=385    segment 30=763 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.034113 seconds 
1000 transitions using 10 leapfrog steps per transition would take 341.13 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49748.702             1.000            1.000 
   200       -49750.390             0.500            1.000 
   300       -49748.212             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  61.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=556    segment 2=329    segment 3=443    segment 4=606    segment 5=487    segment 6=483    segment 7=271    segment 8=542    segment 9=371    segment 10=543    segment 11=515    segment 12=508    segment 13=524    segment 14=513    segment 15=516    segment 16=510    segment 17=375    segment 18=493    segment 19=467    segment 20=685    segment 21=752    segment 22=482    segment 23=773    segment 24=515    segment 25=557    segment 26=552    segment 27=634    segment 28=506    segment 29=385    segment 30=763 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.044129 seconds 
1000 transitions using 10 leapfrog steps per transition would take 441.29 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49763.623             1.000            1.000 
   200       -49756.248             0.500            1.000 
   300       -49753.973             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  88.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=556    segment 2=329    segment 3=443    segment 4=606    segment 5=487    segment 6=483    segment 7=271    segment 8=542    segment 9=371    segment 10=543    segment 11=515    segment 12=508    segment 13=524    segment 14=513    segment 15=516    segment 16=510    segment 17=375    segment 18=493    segment 19=467    segment 20=685    segment 21=752    segment 22=482    segment 23=773    segment 24=515    segment 25=557    segment 26=552    segment 27=634    segment 28=506    segment 29=385    segment 30=763 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.056085 seconds 
1000 transitions using 10 leapfrog steps per transition would take 560.85 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Iteration: 250 / 250 [100%]  (Adaptation) 
Success! Found best value [eta = 0.1]. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50353.810             1.000            1.000 
   200       -50017.622             0.503            1.000 
   300       -49930.330             0.336            0.007   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  99.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=556    segment 2=329    segment 3=443    segment 4=606    segment 5=487    segment 6=483    segment 7=271    segment 8=542    segment 9=371    segment 10=543    segment 11=515    segment 12=508    segment 13=524    segment 14=513    segment 15=516    segment 16=510    segment 17=375    segment 18=493    segment 19=467    segment 20=685    segment 21=752    segment 22=482    segment 23=773    segment 24=515    segment 25=557    segment 26=552    segment 27=634    segment 28=506    segment 29=385    segment 30=763 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.024209 seconds 
1000 transitions using 10 leapfrog steps per transition would take 242.09 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49751.656             1.000            1.000 
   200       -49738.443             0.500            1.000 
   300       -49732.693             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=556    segment 2=329    segment 3=443    segment 4=606    segment 5=487    segment 6=483    segment 7=271    segment 8=542    segment 9=371    segment 10=543    segment 11=515    segment 12=508    segment 13=524    segment 14=513    segment 15=516    segment 16=510    segment 17=375    segment 18=493    segment 19=467    segment 20=685    segment 21=752    segment 22=482    segment 23=773    segment 24=515    segment 25=557    segment 26=552    segment 27=634    segment 28=506    segment 29=385    segment 30=763 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=586    2=340    3=459    4=641    5=500    6=496    7=275    8=561    9=390    10=569    11=536    12=534    13=551    14=534    15=532    16=535    17=393    18=518    19=483    20=708    21=783    22=507    23=806    24=543    25=571    26=579    27=654    28=524    29=408    30=780 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.012347 seconds 
1000 transitions using 10 leapfrog steps per transition would take 123.47 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47404.642             1.000            1.000 
   200       -47411.871             0.500            1.000 
   300       -47405.021             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  36.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=317    segment 2=348    segment 3=536    segment 4=407    segment 5=228    segment 6=342    segment 7=642    segment 8=425    segment 9=758    segment 10=429    segment 11=371    segment 12=718    segment 13=473    segment 14=759    segment 15=544    segment 16=735    segment 17=564    segment 18=326    segment 19=327    segment 20=376    segment 21=510    segment 22=246    segment 23=559    segment 24=372    segment 25=736    segment 26=439    segment 27=523    segment 28=397    segment 29=549    segment 30=628 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021 seconds 
1000 transitions using 10 leapfrog steps per transition would take 210 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45347.344             1.000            1.000 
   200       -45339.383             0.500            1.000 
   300       -45335.838             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=317    segment 2=348    segment 3=536    segment 4=407    segment 5=228    segment 6=342    segment 7=642    segment 8=425    segment 9=758    segment 10=429    segment 11=371    segment 12=718    segment 13=473    segment 14=759    segment 15=544    segment 16=735    segment 17=564    segment 18=326    segment 19=327    segment 20=376    segment 21=510    segment 22=246    segment 23=559    segment 24=372    segment 25=736    segment 26=439    segment 27=523    segment 28=397    segment 29=549    segment 30=628 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03182 seconds 
1000 transitions using 10 leapfrog steps per transition would take 318.2 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45391.562             1.000            1.000 
   200       -45379.178             0.500            1.000 
   300       -45381.959             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  58.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=317    segment 2=348    segment 3=536    segment 4=407    segment 5=228    segment 6=342    segment 7=642    segment 8=425    segment 9=758    segment 10=429    segment 11=371    segment 12=718    segment 13=473    segment 14=759    segment 15=544    segment 16=735    segment 17=564    segment 18=326    segment 19=327    segment 20=376    segment 21=510    segment 22=246    segment 23=559    segment 24=372    segment 25=736    segment 26=439    segment 27=523    segment 28=397    segment 29=549    segment 30=628 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.040552 seconds 
1000 transitions using 10 leapfrog steps per transition would take 405.52 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45413.548             1.000            1.000 
   200       -45385.881             0.500            1.000 
   300       -45380.696             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  82.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=317    segment 2=348    segment 3=536    segment 4=407    segment 5=228    segment 6=342    segment 7=642    segment 8=425    segment 9=758    segment 10=429    segment 11=371    segment 12=718    segment 13=473    segment 14=759    segment 15=544    segment 16=735    segment 17=564    segment 18=326    segment 19=327    segment 20=376    segment 21=510    segment 22=246    segment 23=559    segment 24=372    segment 25=736    segment 26=439    segment 27=523    segment 28=397    segment 29=549    segment 30=628 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052859 seconds 
1000 transitions using 10 leapfrog steps per transition would take 528.59 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45407.142             1.000            1.000 
   200       -45392.303             0.500            1.000 
   300       -45386.016             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  81.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=317    segment 2=348    segment 3=536    segment 4=407    segment 5=228    segment 6=342    segment 7=642    segment 8=425    segment 9=758    segment 10=429    segment 11=371    segment 12=718    segment 13=473    segment 14=759    segment 15=544    segment 16=735    segment 17=564    segment 18=326    segment 19=327    segment 20=376    segment 21=510    segment 22=246    segment 23=559    segment 24=372    segment 25=736    segment 26=439    segment 27=523    segment 28=397    segment 29=549    segment 30=628 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:0"
[25] "2:2" "2:2" "2:1" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021047 seconds 
1000 transitions using 10 leapfrog steps per transition would take 210.47 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45340.051             1.000            1.000 
   200       -45337.488             0.500            1.000 
   300       -45334.075             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  58.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=317    segment 2=348    segment 3=536    segment 4=407    segment 5=228    segment 6=342    segment 7=642    segment 8=425    segment 9=758    segment 10=429    segment 11=371    segment 12=718    segment 13=473    segment 14=759    segment 15=544    segment 16=735    segment 17=564    segment 18=326    segment 19=327    segment 20=376    segment 21=510    segment 22=246    segment 23=559    segment 24=372    segment 25=736    segment 26=439    segment 27=523    segment 28=397    segment 29=549    segment 30=628 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=324    2=367    3=555    4=426    5=230    6=352    7=668    8=444    9=790    10=445    11=382    12=736    13=490    14=784    15=568    16=756    17=588    18=338    19=339    20=387    21=532    22=251    23=584    24=389    25=761    26=457    27=545    28=415    29=576    30=655 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011121 seconds 
1000 transitions using 10 leapfrog steps per transition would take 111.21 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47073.497             1.000            1.000 
   200       -47063.443             0.500            1.000 
   300       -47063.622             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  35.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=423    segment 2=206    segment 3=604    segment 4=382    segment 5=445    segment 6=372    segment 7=472    segment 8=586    segment 9=423    segment 10=519    segment 11=332    segment 12=320    segment 13=552    segment 14=497    segment 15=437    segment 16=384    segment 17=366    segment 18=691    segment 19=513    segment 20=405    segment 21=425    segment 22=278    segment 23=438    segment 24=594    segment 25=542    segment 26=455    segment 27=739    segment 28=720    segment 29=320    segment 30=347 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019836 seconds 
1000 transitions using 10 leapfrog steps per transition would take 198.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43829.290             1.000            1.000 
   200       -43827.069             0.500            1.000 
   300       -43825.954             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=423    segment 2=206    segment 3=604    segment 4=382    segment 5=445    segment 6=372    segment 7=472    segment 8=586    segment 9=423    segment 10=519    segment 11=332    segment 12=320    segment 13=552    segment 14=497    segment 15=437    segment 16=384    segment 17=366    segment 18=691    segment 19=513    segment 20=405    segment 21=425    segment 22=278    segment 23=438    segment 24=594    segment 25=542    segment 26=455    segment 27=739    segment 28=720    segment 29=320    segment 30=347 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029865 seconds 
1000 transitions using 10 leapfrog steps per transition would take 298.65 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43875.509             1.000            1.000 
   200       -43866.250             0.500            1.000 
   300       -43864.436             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  59.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=423    segment 2=206    segment 3=604    segment 4=382    segment 5=445    segment 6=372    segment 7=472    segment 8=586    segment 9=423    segment 10=519    segment 11=332    segment 12=320    segment 13=552    segment 14=497    segment 15=437    segment 16=384    segment 17=366    segment 18=691    segment 19=513    segment 20=405    segment 21=425    segment 22=278    segment 23=438    segment 24=594    segment 25=542    segment 26=455    segment 27=739    segment 28=720    segment 29=320    segment 30=347 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.038114 seconds 
1000 transitions using 10 leapfrog steps per transition would take 381.14 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43882.126             1.000            1.000 
   200       -43871.407             0.500            1.000 
   300       -43871.944             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=423    segment 2=206    segment 3=604    segment 4=382    segment 5=445    segment 6=372    segment 7=472    segment 8=586    segment 9=423    segment 10=519    segment 11=332    segment 12=320    segment 13=552    segment 14=497    segment 15=437    segment 16=384    segment 17=366    segment 18=691    segment 19=513    segment 20=405    segment 21=425    segment 22=278    segment 23=438    segment 24=594    segment 25=542    segment 26=455    segment 27=739    segment 28=720    segment 29=320    segment 30=347 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.051648 seconds 
1000 transitions using 10 leapfrog steps per transition would take 516.48 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43883.785             1.000            1.000 
   200       -43853.853             0.500            1.000 
   300       -43850.721             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  76.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=423    segment 2=206    segment 3=604    segment 4=382    segment 5=445    segment 6=372    segment 7=472    segment 8=586    segment 9=423    segment 10=519    segment 11=332    segment 12=320    segment 13=552    segment 14=497    segment 15=437    segment 16=384    segment 17=366    segment 18=691    segment 19=513    segment 20=405    segment 21=425    segment 22=278    segment 23=438    segment 24=594    segment 25=542    segment 26=455    segment 27=739    segment 28=720    segment 29=320    segment 30=347 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:0" "2:2" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0"
[13] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020304 seconds 
1000 transitions using 10 leapfrog steps per transition would take 203.04 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43833.524             1.000            1.000 
   200       -43829.851             0.500            1.000 
   300       -43827.131             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=423    segment 2=206    segment 3=604    segment 4=382    segment 5=445    segment 6=372    segment 7=472    segment 8=586    segment 9=423    segment 10=519    segment 11=332    segment 12=320    segment 13=552    segment 14=497    segment 15=437    segment 16=384    segment 17=366    segment 18=691    segment 19=513    segment 20=405    segment 21=425    segment 22=278    segment 23=438    segment 24=594    segment 25=542    segment 26=455    segment 27=739    segment 28=720    segment 29=320    segment 30=347 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=438    2=209    3=633    4=392    5=466    6=390    7=499    8=611    9=441    10=549    11=344    12=326    13=575    14=519    15=453    16=395    17=382    18=730    19=535    20=422    21=441    22=286    23=454    24=616    25=570    26=477    27=765    28=742    29=339    30=359 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011064 seconds 
1000 transitions using 10 leapfrog steps per transition would take 110.64 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46923.349             1.000            1.000 
   200       -46917.711             0.500            1.000 
   300       -46917.834             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  35.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=566    segment 2=468    segment 3=512    segment 4=310    segment 5=281    segment 6=278    segment 7=298    segment 8=806    segment 9=346    segment 10=473    segment 11=478    segment 12=574    segment 13=393    segment 14=374    segment 15=273    segment 16=618    segment 17=516    segment 18=216    segment 19=550    segment 20=586    segment 21=545    segment 22=618    segment 23=564    segment 24=290    segment 25=430    segment 26=433    segment 27=599    segment 28=599    segment 29=489    segment 30=582 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020792 seconds 
1000 transitions using 10 leapfrog steps per transition would take 207.92 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45440.716             1.000            1.000 
   200       -45435.164             0.500            1.000 
   300       -45434.323             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=566    segment 2=468    segment 3=512    segment 4=310    segment 5=281    segment 6=278    segment 7=298    segment 8=806    segment 9=346    segment 10=473    segment 11=478    segment 12=574    segment 13=393    segment 14=374    segment 15=273    segment 16=618    segment 17=516    segment 18=216    segment 19=550    segment 20=586    segment 21=545    segment 22=618    segment 23=564    segment 24=290    segment 25=430    segment 26=433    segment 27=599    segment 28=599    segment 29=489    segment 30=582 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.030075 seconds 
1000 transitions using 10 leapfrog steps per transition would take 300.75 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45464.985             1.000            1.000 
   200       -45445.848             0.500            1.000 
   300       -45447.176             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  55.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=566    segment 2=468    segment 3=512    segment 4=310    segment 5=281    segment 6=278    segment 7=298    segment 8=806    segment 9=346    segment 10=473    segment 11=478    segment 12=574    segment 13=393    segment 14=374    segment 15=273    segment 16=618    segment 17=516    segment 18=216    segment 19=550    segment 20=586    segment 21=545    segment 22=618    segment 23=564    segment 24=290    segment 25=430    segment 26=433    segment 27=599    segment 28=599    segment 29=489    segment 30=582 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039616 seconds 
1000 transitions using 10 leapfrog steps per transition would take 396.16 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45481.061             1.000            1.000 
   200       -45463.940             0.500            1.000 
   300       -45459.673             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  70.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=566    segment 2=468    segment 3=512    segment 4=310    segment 5=281    segment 6=278    segment 7=298    segment 8=806    segment 9=346    segment 10=473    segment 11=478    segment 12=574    segment 13=393    segment 14=374    segment 15=273    segment 16=618    segment 17=516    segment 18=216    segment 19=550    segment 20=586    segment 21=545    segment 22=618    segment 23=564    segment 24=290    segment 25=430    segment 26=433    segment 27=599    segment 28=599    segment 29=489    segment 30=582 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.051273 seconds 
1000 transitions using 10 leapfrog steps per transition would take 512.73 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45511.086             1.000            1.000 
   200       -45503.041             0.500            1.000 
   300       -45496.641             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  79.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=566    segment 2=468    segment 3=512    segment 4=310    segment 5=281    segment 6=278    segment 7=298    segment 8=806    segment 9=346    segment 10=473    segment 11=478    segment 12=574    segment 13=393    segment 14=374    segment 15=273    segment 16=618    segment 17=516    segment 18=216    segment 19=550    segment 20=586    segment 21=545    segment 22=618    segment 23=564    segment 24=290    segment 25=430    segment 26=433    segment 27=599    segment 28=599    segment 29=489    segment 30=582 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.02065 seconds 
1000 transitions using 10 leapfrog steps per transition would take 206.5 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45438.920             1.000            1.000 
   200       -45439.983             0.500            1.000 
   300       -45431.848             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  44.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=566    segment 2=468    segment 3=512    segment 4=310    segment 5=281    segment 6=278    segment 7=298    segment 8=806    segment 9=346    segment 10=473    segment 11=478    segment 12=574    segment 13=393    segment 14=374    segment 15=273    segment 16=618    segment 17=516    segment 18=216    segment 19=550    segment 20=586    segment 21=545    segment 22=618    segment 23=564    segment 24=290    segment 25=430    segment 26=433    segment 27=599    segment 28=599    segment 29=489    segment 30=582 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=590    2=482    3=529    4=328    5=295    6=286    7=314    8=840    9=362    10=490    11=494    12=591    13=414    14=391    15=281    16=637    17=537    18=223    19=573    20=608    21=567    22=635    23=593    24=295    25=447    26=455    27=624    28=624    29=510    30=611 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.012607 seconds 
1000 transitions using 10 leapfrog steps per transition would take 126.07 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48952.838             1.000            1.000 
   200       -48951.965             0.500            1.000 
   300       -48950.525             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  36.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=390    segment 2=363    segment 3=544    segment 4=745    segment 5=790    segment 6=342    segment 7=735    segment 8=403    segment 9=725    segment 10=372    segment 11=576    segment 12=593    segment 13=186    segment 14=605    segment 15=737    segment 16=228    segment 17=208    segment 18=411    segment 19=373    segment 20=381    segment 21=397    segment 22=736    segment 23=624    segment 24=212    segment 25=746    segment 26=789    segment 27=399    segment 28=480    segment 29=285    segment 30=381 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021835 seconds 
1000 transitions using 10 leapfrog steps per transition would take 218.35 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44664.401             1.000            1.000 
   200       -44662.048             0.500            1.000 
   300       -44659.238             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=390    segment 2=363    segment 3=544    segment 4=745    segment 5=790    segment 6=342    segment 7=735    segment 8=403    segment 9=725    segment 10=372    segment 11=576    segment 12=593    segment 13=186    segment 14=605    segment 15=737    segment 16=228    segment 17=208    segment 18=411    segment 19=373    segment 20=381    segment 21=397    segment 22=736    segment 23=624    segment 24=212    segment 25=746    segment 26=789    segment 27=399    segment 28=480    segment 29=285    segment 30=381 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.031369 seconds 
1000 transitions using 10 leapfrog steps per transition would take 313.69 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44675.891             1.000            1.000 
   200       -44671.103             0.500            1.000 
   300       -44676.113             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  58.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=390    segment 2=363    segment 3=544    segment 4=745    segment 5=790    segment 6=342    segment 7=735    segment 8=403    segment 9=725    segment 10=372    segment 11=576    segment 12=593    segment 13=186    segment 14=605    segment 15=737    segment 16=228    segment 17=208    segment 18=411    segment 19=373    segment 20=381    segment 21=397    segment 22=736    segment 23=624    segment 24=212    segment 25=746    segment 26=789    segment 27=399    segment 28=480    segment 29=285    segment 30=381 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.041123 seconds 
1000 transitions using 10 leapfrog steps per transition would take 411.23 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44754.838             1.000            1.000 
   200       -44759.657             0.500            1.000 
   300       -44755.573             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  76.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=390    segment 2=363    segment 3=544    segment 4=745    segment 5=790    segment 6=342    segment 7=735    segment 8=403    segment 9=725    segment 10=372    segment 11=576    segment 12=593    segment 13=186    segment 14=605    segment 15=737    segment 16=228    segment 17=208    segment 18=411    segment 19=373    segment 20=381    segment 21=397    segment 22=736    segment 23=624    segment 24=212    segment 25=746    segment 26=789    segment 27=399    segment 28=480    segment 29=285    segment 30=381 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052696 seconds 
1000 transitions using 10 leapfrog steps per transition would take 526.96 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44703.400             1.000            1.000 
   200       -44690.829             0.500            1.000 
Chain 1 stan::variational::normal_meanfield::calc_grad: The number of dropped evaluations has reached its maximum amount (10). Your model may be either severely ill-conditioned or misspecified.
Warning: Fitting finished unexpectedly! Use the $output() method for more information.

Finished in  43.3 seconds.
An error occurred during inference: Fit failed: Maximum number of discarded evaluations reached.
Attempt 2 with 10000 iterations, 2 grad_samples, and 200 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052991 seconds 
1000 transitions using 10 leapfrog steps per transition would take 529.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44756.641             1.000            1.000 
   200       -44746.655             0.500            1.000 
   300       -44739.230             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  107.7 seconds.
Fit succeeded in attempt 2
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=390    segment 2=363    segment 3=544    segment 4=745    segment 5=790    segment 6=342    segment 7=735    segment 8=403    segment 9=725    segment 10=372    segment 11=576    segment 12=593    segment 13=186    segment 14=605    segment 15=737    segment 16=228    segment 17=208    segment 18=411    segment 19=373    segment 20=381    segment 21=397    segment 22=736    segment 23=624    segment 24=212    segment 25=746    segment 26=789    segment 27=399    segment 28=480    segment 29=285    segment 30=381 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1"
[13] "2:0" "2:2" "2:2" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021647 seconds 
1000 transitions using 10 leapfrog steps per transition would take 216.47 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44669.877             1.000            1.000 
   200       -44659.669             0.500            1.000 
   300       -44660.702             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=390    segment 2=363    segment 3=544    segment 4=745    segment 5=790    segment 6=342    segment 7=735    segment 8=403    segment 9=725    segment 10=372    segment 11=576    segment 12=593    segment 13=186    segment 14=605    segment 15=737    segment 16=228    segment 17=208    segment 18=411    segment 19=373    segment 20=381    segment 21=397    segment 22=736    segment 23=624    segment 24=212    segment 25=746    segment 26=789    segment 27=399    segment 28=480    segment 29=285    segment 30=381 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=411    2=378    3=561    4=768    5=821    6=352    7=768    8=426    9=754    10=385    11=594    12=618    13=186    14=630    15=771    16=232    17=212    18=419    19=388    20=395    21=412    22=768    23=643    24=214    25=782    26=819    27=415    28=493    29=294    30=394 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01015 seconds 
1000 transitions using 10 leapfrog steps per transition would take 101.5 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42509.275             1.000            1.000 
   200       -42509.171             0.500            1.000 
   300       -42506.741             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  34.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=593    segment 2=526    segment 3=265    segment 4=542    segment 5=208    segment 6=393    segment 7=435    segment 8=322    segment 9=699    segment 10=410    segment 11=472    segment 12=691    segment 13=707    segment 14=209    segment 15=351    segment 16=244    segment 17=457    segment 18=276    segment 19=394    segment 20=517    segment 21=244    segment 22=453    segment 23=268    segment 24=191    segment 25=189    segment 26=698    segment 27=432    segment 28=528    segment 29=701    segment 30=550 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019005 seconds 
1000 transitions using 10 leapfrog steps per transition would take 190.05 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40248.911             1.000            1.000 
   200       -40249.193             0.500            1.000 
   300       -40249.419             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=593    segment 2=526    segment 3=265    segment 4=542    segment 5=208    segment 6=393    segment 7=435    segment 8=322    segment 9=699    segment 10=410    segment 11=472    segment 12=691    segment 13=707    segment 14=209    segment 15=351    segment 16=244    segment 17=457    segment 18=276    segment 19=394    segment 20=517    segment 21=244    segment 22=453    segment 23=268    segment 24=191    segment 25=189    segment 26=698    segment 27=432    segment 28=528    segment 29=701    segment 30=550 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027354 seconds 
1000 transitions using 10 leapfrog steps per transition would take 273.54 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40303.210             1.000            1.000 
   200       -40299.295             0.500            1.000 
   300       -40300.400             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  51.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=593    segment 2=526    segment 3=265    segment 4=542    segment 5=208    segment 6=393    segment 7=435    segment 8=322    segment 9=699    segment 10=410    segment 11=472    segment 12=691    segment 13=707    segment 14=209    segment 15=351    segment 16=244    segment 17=457    segment 18=276    segment 19=394    segment 20=517    segment 21=244    segment 22=453    segment 23=268    segment 24=191    segment 25=189    segment 26=698    segment 27=432    segment 28=528    segment 29=701    segment 30=550 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036142 seconds 
1000 transitions using 10 leapfrog steps per transition would take 361.42 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40305.456             1.000            1.000 
   200       -40299.522             0.500            1.000 
   300       -40294.276             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  60.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=593    segment 2=526    segment 3=265    segment 4=542    segment 5=208    segment 6=393    segment 7=435    segment 8=322    segment 9=699    segment 10=410    segment 11=472    segment 12=691    segment 13=707    segment 14=209    segment 15=351    segment 16=244    segment 17=457    segment 18=276    segment 19=394    segment 20=517    segment 21=244    segment 22=453    segment 23=268    segment 24=191    segment 25=189    segment 26=698    segment 27=432    segment 28=528    segment 29=701    segment 30=550 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048233 seconds 
1000 transitions using 10 leapfrog steps per transition would take 482.33 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40293.559             1.000            1.000 
   200       -40272.636             0.500            1.000 
   300       -40275.425             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  72.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=593    segment 2=526    segment 3=265    segment 4=542    segment 5=208    segment 6=393    segment 7=435    segment 8=322    segment 9=699    segment 10=410    segment 11=472    segment 12=691    segment 13=707    segment 14=209    segment 15=351    segment 16=244    segment 17=457    segment 18=276    segment 19=394    segment 20=517    segment 21=244    segment 22=453    segment 23=268    segment 24=191    segment 25=189    segment 26=698    segment 27=432    segment 28=528    segment 29=701    segment 30=550 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:0" "2:1" "2:1" "2:0" "2:2" "2:0" "2:0"
[25] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048541 seconds 
1000 transitions using 10 leapfrog steps per transition would take 485.41 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40352.544             1.000            1.000 
   200       -40322.081             0.500            1.000 
   300       -40315.142             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=593    segment 2=526    segment 3=265    segment 4=542    segment 5=208    segment 6=393    segment 7=435    segment 8=322    segment 9=699    segment 10=410    segment 11=472    segment 12=691    segment 13=707    segment 14=209    segment 15=351    segment 16=244    segment 17=457    segment 18=276    segment 19=394    segment 20=517    segment 21=244    segment 22=453    segment 23=268    segment 24=191    segment 25=189    segment 26=698    segment 27=432    segment 28=528    segment 29=701    segment 30=550 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=612    2=552    3=272    4=570    5=212    6=406    7=448    8=336    9=723    10=439    11=494    12=708    13=733    14=211    15=362    16=253    17=478    18=284    19=417    20=540    21=255    22=471    23=273    24=191    25=193    26=725    27=450    28=557    29=738    30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010943 seconds 
1000 transitions using 10 leapfrog steps per transition would take 109.43 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45455.312             1.000            1.000 
   200       -45453.097             0.500            1.000 
   300       -45453.497             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  35.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=728    segment 2=525    segment 3=692    segment 4=620    segment 5=351    segment 6=487    segment 7=562    segment 8=346    segment 9=329    segment 10=375    segment 11=347    segment 12=237    segment 13=449    segment 14=256    segment 15=480    segment 16=617    segment 17=424    segment 18=347    segment 19=489    segment 20=438    segment 21=254    segment 22=354    segment 23=597    segment 24=540    segment 25=433    segment 26=502    segment 27=326    segment 28=522    segment 29=749    segment 30=592 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.0206 seconds 
1000 transitions using 10 leapfrog steps per transition would take 206 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44269.395             1.000            1.000 
   200       -44263.838             0.500            1.000 
   300       -44265.412             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=728    segment 2=525    segment 3=692    segment 4=620    segment 5=351    segment 6=487    segment 7=562    segment 8=346    segment 9=329    segment 10=375    segment 11=347    segment 12=237    segment 13=449    segment 14=256    segment 15=480    segment 16=617    segment 17=424    segment 18=347    segment 19=489    segment 20=438    segment 21=254    segment 22=354    segment 23=597    segment 24=540    segment 25=433    segment 26=502    segment 27=326    segment 28=522    segment 29=749    segment 30=592 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.030252 seconds 
1000 transitions using 10 leapfrog steps per transition would take 302.52 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44278.336             1.000            1.000 
   200       -44272.663             0.500            1.000 
   300       -44266.906             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  61.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=728    segment 2=525    segment 3=692    segment 4=620    segment 5=351    segment 6=487    segment 7=562    segment 8=346    segment 9=329    segment 10=375    segment 11=347    segment 12=237    segment 13=449    segment 14=256    segment 15=480    segment 16=617    segment 17=424    segment 18=347    segment 19=489    segment 20=438    segment 21=254    segment 22=354    segment 23=597    segment 24=540    segment 25=433    segment 26=502    segment 27=326    segment 28=522    segment 29=749    segment 30=592 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039028 seconds 
1000 transitions using 10 leapfrog steps per transition would take 390.28 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44310.076             1.000            1.000 
   200       -44304.082             0.500            1.000 
   300       -44301.909             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  72.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=728    segment 2=525    segment 3=692    segment 4=620    segment 5=351    segment 6=487    segment 7=562    segment 8=346    segment 9=329    segment 10=375    segment 11=347    segment 12=237    segment 13=449    segment 14=256    segment 15=480    segment 16=617    segment 17=424    segment 18=347    segment 19=489    segment 20=438    segment 21=254    segment 22=354    segment 23=597    segment 24=540    segment 25=433    segment 26=502    segment 27=326    segment 28=522    segment 29=749    segment 30=592 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.050665 seconds 
1000 transitions using 10 leapfrog steps per transition would take 506.65 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44343.440             1.000            1.000 
   200       -44334.051             0.500            1.000 
   300       -44325.777             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  78.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=728    segment 2=525    segment 3=692    segment 4=620    segment 5=351    segment 6=487    segment 7=562    segment 8=346    segment 9=329    segment 10=375    segment 11=347    segment 12=237    segment 13=449    segment 14=256    segment 15=480    segment 16=617    segment 17=424    segment 18=347    segment 19=489    segment 20=438    segment 21=254    segment 22=354    segment 23=597    segment 24=540    segment 25=433    segment 26=502    segment 27=326    segment 28=522    segment 29=749    segment 30=592 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[13] "2:1" "2:0" "2:1" "2:2" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020469 seconds 
1000 transitions using 10 leapfrog steps per transition would take 204.69 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44270.417             1.000            1.000 
   200       -44267.265             0.500            1.000 
   300       -44267.427             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=728    segment 2=525    segment 3=692    segment 4=620    segment 5=351    segment 6=487    segment 7=562    segment 8=346    segment 9=329    segment 10=375    segment 11=347    segment 12=237    segment 13=449    segment 14=256    segment 15=480    segment 16=617    segment 17=424    segment 18=347    segment 19=489    segment 20=438    segment 21=254    segment 22=354    segment 23=597    segment 24=540    segment 25=433    segment 26=502    segment 27=326    segment 28=522    segment 29=749    segment 30=592 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=756    2=549    3=715    4=643    5=366    6=507    7=586    8=359    9=343    10=389    11=359    12=244    13=461    14=260    15=500    16=648    17=441    18=357    19=510    20=461    21=261    22=364    23=614    24=561    25=449    26=518    27=337    28=541    29=779    30=618 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010962 seconds 
1000 transitions using 10 leapfrog steps per transition would take 109.62 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46190.830             1.000            1.000 
   200       -46186.315             0.500            1.000 
   300       -46178.596             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=565    segment 2=752    segment 3=576    segment 4=413    segment 5=304    segment 6=284    segment 7=205    segment 8=405    segment 9=573    segment 10=592    segment 11=752    segment 12=251    segment 13=416    segment 14=525    segment 15=379    segment 16=726    segment 17=298    segment 18=525    segment 19=426    segment 20=737    segment 21=345    segment 22=375    segment 23=462    segment 24=212    segment 25=415    segment 26=437    segment 27=429    segment 28=388    segment 29=575    segment 30=389 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020449 seconds 
1000 transitions using 10 leapfrog steps per transition would take 204.49 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43329.091             1.000            1.000 
   200       -43324.058             0.500            1.000 
   300       -43324.362             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=565    segment 2=752    segment 3=576    segment 4=413    segment 5=304    segment 6=284    segment 7=205    segment 8=405    segment 9=573    segment 10=592    segment 11=752    segment 12=251    segment 13=416    segment 14=525    segment 15=379    segment 16=726    segment 17=298    segment 18=525    segment 19=426    segment 20=737    segment 21=345    segment 22=375    segment 23=462    segment 24=212    segment 25=415    segment 26=437    segment 27=429    segment 28=388    segment 29=575    segment 30=389 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029857 seconds 
1000 transitions using 10 leapfrog steps per transition would take 298.57 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43340.839             1.000            1.000 
   200       -43335.185             0.500            1.000 
   300       -43339.089             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  54.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=565    segment 2=752    segment 3=576    segment 4=413    segment 5=304    segment 6=284    segment 7=205    segment 8=405    segment 9=573    segment 10=592    segment 11=752    segment 12=251    segment 13=416    segment 14=525    segment 15=379    segment 16=726    segment 17=298    segment 18=525    segment 19=426    segment 20=737    segment 21=345    segment 22=375    segment 23=462    segment 24=212    segment 25=415    segment 26=437    segment 27=429    segment 28=388    segment 29=575    segment 30=389 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.038129 seconds 
1000 transitions using 10 leapfrog steps per transition would take 381.29 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43415.887             1.000            1.000 
   200       -43395.569             0.500            1.000 
   300       -43388.579             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  76.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=565    segment 2=752    segment 3=576    segment 4=413    segment 5=304    segment 6=284    segment 7=205    segment 8=405    segment 9=573    segment 10=592    segment 11=752    segment 12=251    segment 13=416    segment 14=525    segment 15=379    segment 16=726    segment 17=298    segment 18=525    segment 19=426    segment 20=737    segment 21=345    segment 22=375    segment 23=462    segment 24=212    segment 25=415    segment 26=437    segment 27=429    segment 28=388    segment 29=575    segment 30=389 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.050236 seconds 
1000 transitions using 10 leapfrog steps per transition would take 502.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43441.303             1.000            1.000 
   200       -43434.516             0.500            1.000 
   300       -43415.105             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  77.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=565    segment 2=752    segment 3=576    segment 4=413    segment 5=304    segment 6=284    segment 7=205    segment 8=405    segment 9=573    segment 10=592    segment 11=752    segment 12=251    segment 13=416    segment 14=525    segment 15=379    segment 16=726    segment 17=298    segment 18=525    segment 19=426    segment 20=737    segment 21=345    segment 22=375    segment 23=462    segment 24=212    segment 25=415    segment 26=437    segment 27=429    segment 28=388    segment 29=575    segment 30=389 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:2" "2:2" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020344 seconds 
1000 transitions using 10 leapfrog steps per transition would take 203.44 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43333.790             1.000            1.000 
   200       -43325.963             0.500            1.000 
   300       -43326.447             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  54.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=565    segment 2=752    segment 3=576    segment 4=413    segment 5=304    segment 6=284    segment 7=205    segment 8=405    segment 9=573    segment 10=592    segment 11=752    segment 12=251    segment 13=416    segment 14=525    segment 15=379    segment 16=726    segment 17=298    segment 18=525    segment 19=426    segment 20=737    segment 21=345    segment 22=375    segment 23=462    segment 24=212    segment 25=415    segment 26=437    segment 27=429    segment 28=388    segment 29=575    segment 30=389 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=592    2=776    3=601    4=429    5=310    6=287    7=214    8=418    9=590    10=611    11=776    12=260    13=436    14=548    15=391    16=755    17=312    18=552    19=441    20=765    21=358    22=394    23=487    24=216    25=432    26=452    27=443    28=408    29=598    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011114 seconds 
1000 transitions using 10 leapfrog steps per transition would take 111.14 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46591.773             1.000            1.000 
   200       -46593.183             0.500            1.000 
   300       -46591.530             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=377    segment 2=466    segment 3=301    segment 4=608    segment 5=321    segment 6=436    segment 7=667    segment 8=461    segment 9=490    segment 10=340    segment 11=603    segment 12=316    segment 13=413    segment 14=690    segment 15=392    segment 16=232    segment 17=419    segment 18=507    segment 19=657    segment 20=539    segment 21=473    segment 22=474    segment 23=635    segment 24=423    segment 25=274    segment 26=545    segment 27=316    segment 28=598    segment 29=473    segment 30=476 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020254 seconds 
1000 transitions using 10 leapfrog steps per transition would take 202.54 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45766.795             1.000            1.000 
   200       -45762.967             0.500            1.000 
   300       -45762.029             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=377    segment 2=466    segment 3=301    segment 4=608    segment 5=321    segment 6=436    segment 7=667    segment 8=461    segment 9=490    segment 10=340    segment 11=603    segment 12=316    segment 13=413    segment 14=690    segment 15=392    segment 16=232    segment 17=419    segment 18=507    segment 19=657    segment 20=539    segment 21=473    segment 22=474    segment 23=635    segment 24=423    segment 25=274    segment 26=545    segment 27=316    segment 28=598    segment 29=473    segment 30=476 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03066 seconds 
1000 transitions using 10 leapfrog steps per transition would take 306.6 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45801.937             1.000            1.000 
   200       -45791.701             0.500            1.000 
   300       -45787.427             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  59.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=377    segment 2=466    segment 3=301    segment 4=608    segment 5=321    segment 6=436    segment 7=667    segment 8=461    segment 9=490    segment 10=340    segment 11=603    segment 12=316    segment 13=413    segment 14=690    segment 15=392    segment 16=232    segment 17=419    segment 18=507    segment 19=657    segment 20=539    segment 21=473    segment 22=474    segment 23=635    segment 24=423    segment 25=274    segment 26=545    segment 27=316    segment 28=598    segment 29=473    segment 30=476 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039601 seconds 
1000 transitions using 10 leapfrog steps per transition would take 396.01 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45809.101             1.000            1.000 
   200       -45801.459             0.500            1.000 
   300       -45794.784             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  78.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=377    segment 2=466    segment 3=301    segment 4=608    segment 5=321    segment 6=436    segment 7=667    segment 8=461    segment 9=490    segment 10=340    segment 11=603    segment 12=316    segment 13=413    segment 14=690    segment 15=392    segment 16=232    segment 17=419    segment 18=507    segment 19=657    segment 20=539    segment 21=473    segment 22=474    segment 23=635    segment 24=423    segment 25=274    segment 26=545    segment 27=316    segment 28=598    segment 29=473    segment 30=476 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.051207 seconds 
1000 transitions using 10 leapfrog steps per transition would take 512.07 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45847.333             1.000            1.000 
   200       -45841.524             0.500            1.000 
   300       -45837.054             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  77.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=377    segment 2=466    segment 3=301    segment 4=608    segment 5=321    segment 6=436    segment 7=667    segment 8=461    segment 9=490    segment 10=340    segment 11=603    segment 12=316    segment 13=413    segment 14=690    segment 15=392    segment 16=232    segment 17=419    segment 18=507    segment 19=657    segment 20=539    segment 21=473    segment 22=474    segment 23=635    segment 24=423    segment 25=274    segment 26=545    segment 27=316    segment 28=598    segment 29=473    segment 30=476 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:0" "2:2" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0"
[13] "2:1" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1"
[25] "2:0" "2:2" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020156 seconds 
1000 transitions using 10 leapfrog steps per transition would take 201.56 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45766.145             1.000            1.000 
   200       -45764.645             0.500            1.000 
   300       -45765.403             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  47.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=377    segment 2=466    segment 3=301    segment 4=608    segment 5=321    segment 6=436    segment 7=667    segment 8=461    segment 9=490    segment 10=340    segment 11=603    segment 12=316    segment 13=413    segment 14=690    segment 15=392    segment 16=232    segment 17=419    segment 18=507    segment 19=657    segment 20=539    segment 21=473    segment 22=474    segment 23=635    segment 24=423    segment 25=274    segment 26=545    segment 27=316    segment 28=598    segment 29=473    segment 30=476 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=394    2=484    3=310    4=637    5=336    6=451    7=699    8=485    9=508    10=349    11=628    12=329    13=442    14=721    15=409    16=236    17=441    18=519    19=685    20=570    21=489    22=499    23=665    24=447    25=279    26=573    27=326    28=615    29=492    30=490 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.012711 seconds 
1000 transitions using 10 leapfrog steps per transition would take 127.11 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48307.902             1.000            1.000 
   200       -48304.589             0.500            1.000 
   300       -48304.030             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=482    segment 2=547    segment 3=439    segment 4=387    segment 5=561    segment 6=683    segment 7=252    segment 8=385    segment 9=564    segment 10=430    segment 11=445    segment 12=537    segment 13=514    segment 14=382    segment 15=581    segment 16=404    segment 17=366    segment 18=353    segment 19=673    segment 20=464    segment 21=559    segment 22=558    segment 23=653    segment 24=571    segment 25=791    segment 26=445    segment 27=353    segment 28=403    segment 29=542    segment 30=496 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.022163 seconds 
1000 transitions using 10 leapfrog steps per transition would take 221.63 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47024.147             1.000            1.000 
   200       -47018.728             0.500            1.000 
   300       -47017.547             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=482    segment 2=547    segment 3=439    segment 4=387    segment 5=561    segment 6=683    segment 7=252    segment 8=385    segment 9=564    segment 10=430    segment 11=445    segment 12=537    segment 13=514    segment 14=382    segment 15=581    segment 16=404    segment 17=366    segment 18=353    segment 19=673    segment 20=464    segment 21=559    segment 22=558    segment 23=653    segment 24=571    segment 25=791    segment 26=445    segment 27=353    segment 28=403    segment 29=542    segment 30=496 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03183 seconds 
1000 transitions using 10 leapfrog steps per transition would take 318.3 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47059.503             1.000            1.000 
   200       -47049.144             0.500            1.000 
   300       -47049.621             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  60.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=482    segment 2=547    segment 3=439    segment 4=387    segment 5=561    segment 6=683    segment 7=252    segment 8=385    segment 9=564    segment 10=430    segment 11=445    segment 12=537    segment 13=514    segment 14=382    segment 15=581    segment 16=404    segment 17=366    segment 18=353    segment 19=673    segment 20=464    segment 21=559    segment 22=558    segment 23=653    segment 24=571    segment 25=791    segment 26=445    segment 27=353    segment 28=403    segment 29=542    segment 30=496 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.041285 seconds 
1000 transitions using 10 leapfrog steps per transition would take 412.85 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47047.823             1.000            1.000 
   200       -47043.683             0.500            1.000 
   300       -47043.888             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  70.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=482    segment 2=547    segment 3=439    segment 4=387    segment 5=561    segment 6=683    segment 7=252    segment 8=385    segment 9=564    segment 10=430    segment 11=445    segment 12=537    segment 13=514    segment 14=382    segment 15=581    segment 16=404    segment 17=366    segment 18=353    segment 19=673    segment 20=464    segment 21=559    segment 22=558    segment 23=653    segment 24=571    segment 25=791    segment 26=445    segment 27=353    segment 28=403    segment 29=542    segment 30=496 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.053673 seconds 
1000 transitions using 10 leapfrog steps per transition would take 536.73 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47092.169             1.000            1.000 
   200       -47080.161             0.500            1.000 
   300       -47071.774             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  83.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=482    segment 2=547    segment 3=439    segment 4=387    segment 5=561    segment 6=683    segment 7=252    segment 8=385    segment 9=564    segment 10=430    segment 11=445    segment 12=537    segment 13=514    segment 14=382    segment 15=581    segment 16=404    segment 17=366    segment 18=353    segment 19=673    segment 20=464    segment 21=559    segment 22=558    segment 23=653    segment 24=571    segment 25=791    segment 26=445    segment 27=353    segment 28=403    segment 29=542    segment 30=496 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:1" "2:0" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:1" "2:1"
[13] "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1"
[25] "2:2" "2:1" "2:0" "2:0" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.022303 seconds 
1000 transitions using 10 leapfrog steps per transition would take 223.03 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47022.210             1.000            1.000 
   200       -47018.785             0.500            1.000 
   300       -47022.005             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  47.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=482    segment 2=547    segment 3=439    segment 4=387    segment 5=561    segment 6=683    segment 7=252    segment 8=385    segment 9=564    segment 10=430    segment 11=445    segment 12=537    segment 13=514    segment 14=382    segment 15=581    segment 16=404    segment 17=366    segment 18=353    segment 19=673    segment 20=464    segment 21=559    segment 22=558    segment 23=653    segment 24=571    segment 25=791    segment 26=445    segment 27=353    segment 28=403    segment 29=542    segment 30=496 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=498    2=573    3=459    4=402    5=586    6=715    7=257    8=407    9=582    10=448    11=460    12=564    13=539    14=394    15=602    16=420    17=378    18=369    19=690    20=485    21=580    22=578    23=677    24=596    25=818    26=460    27=366    28=412    29=573    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=598    2=770    3=266    4=257    5=289    6=412    7=348    8=601    9=526    10=355    11=280    12=844    13=557    14=541    15=583    16=289    17=478    18=324    19=351    20=283    21=317    22=742    23=685    24=262    25=726    26=300    27=265    28=381    29=750    30=673 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:0" "2:0" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:0" "2:0" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:2" "2:0" "2:0" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010893 seconds 
1000 transitions using 10 leapfrog steps per transition would take 108.93 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42871.324             1.000            1.000 
   200       -42866.107             0.500            1.000 
   300       -42866.425             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
