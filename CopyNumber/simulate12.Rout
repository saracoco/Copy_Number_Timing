
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(patchwork)
> library(loo)
This is loo version 2.8.0
- Online documentation and vignettes at mc-stan.org/loo
- As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. 
> library(bayesplot)
This is bayesplot version 1.11.1
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
> library(cmdstanr)
This is cmdstanr version 0.8.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /u/cdslab/scocomello/.cmdstan/cmdstan-2.34.1
- CmdStan version: 2.34.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable cmdstanr_no_ver_check=TRUE.
> library(factoextra)
Loading required package: ggplot2
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr) #for plotting add in the right script
> library(fossil) #RI and ARI computation
Loading required package: sp
Loading required package: maps
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> 
> 
> 
> #setwd("C:/Users/sarac/CDS_git/Copy-Number-Timing/CopyNumber/")
> #orfeo
> setwd("/orfeo/cephfs/scratch/cdslab/scocomello/Copy_Number_Timing/CopyNumber")
> 
> original_dir <- getwd()
> 
> source("./CNTiming/R/simulate_functions.R")
> source("./CNTiming/R/fitting_functions.R")
> source("./CNTiming/R/plotting_functions.R")
> 
> 
> self_name = "12"
> new_dir = paste0("../",self_name) #relative path of the new created directory where to save the simulation results
> dir.create(new_dir)
Warning message:
In dir.create(new_dir) : '../12' already exists
> 
> number_events = 30
> number_clocks = 4
> 
> INIT = FALSE
> epsilon = 0.15
> n_simulations = 20
> purity = 0.99
> 
> vector_karyo <- c("2:0", "2:1", "2:2")
> weights_karyo <- c(0.33, 0.33, 0.33)
> 
> 
> # get simulation parametes
> coverage = 100 # average number of reads that align to a reference base
> mu = 1e-4 # mutation rate
> w = 1e-2 # cell division rate
> l = 1e7 # length of the segment
> time_interval = 20
> 
> 
> options(bitmapType='cairo')
> 
> 
> 
> 
> for(i in 1:n_simulations){
+   # Create a unique directory for each iteration
+   iter_dir <- paste0("/simulation_iteration_", i)
+   iter_dir <- paste0(new_dir,iter_dir)
+   dir.create(iter_dir)
+   setwd(iter_dir)
+   dir.create(paste0("./plots"), showWarnings = TRUE)
+   dir.create(paste0("./results"), showWarnings = FALSE)
+   
+   
+ 
+   vector_tau = rep(0, number_clocks)
+   
+   for (j in 1:number_clocks){
+     vector_tau[j] = runif(1, 0)
+     if (j != 1){
+       while (!all ( abs(vector_tau[1:j-1] - vector_tau[j]) > epsilon  )   ){
+         vector_tau[j] = runif(1, 0)
+       }
+     }
+   }
+   weights_tau <- rep(1/number_clocks, number_clocks)
+   
+   data <- get_taus_karyo(number_events, vector_tau, vector_karyo, weights_tau, weights_karyo)
+   simulation_data_all_segments = get_simulation(data$taus, data$karyo, purity, coverage = 100) # the other parameters have default value assigned if none is specified
+   simulation_data_all_segments <- simulation_data_all_segments[order(simulation_data_all_segments$segment_id), ]
+ 
+ 
+   saveRDS(simulation_data_all_segments, "./results/all_sim_input_prepare_input_data.rds")
+ 
+ 
+ 
+   
+   Subtitle <- vector("list", (length(unique(simulation_data_all_segments$segment_id))+1))
+   Subtitle[[1]]  <- paste0("Number of mutations per segment: ")
+   num_mutations_all_segments <- c()
+ 
+     for (i in seq_along(unique(simulation_data_all_segments$segment_id))) {
+     segment <- unique(simulation_data_all_segments$segment_id)[i]
+     num_mutations <- nrow(simulation_data_all_segments %>% filter(segment_id == segment))
+     num_mutations_all_segments <- c(num_mutations_all_segments, num_mutations)
+     Subtitle[[i+1]] <- paste0(segment, "=", num_mutations," ")
+   }
+   
+   Subtitle <- paste(Subtitle, collapse = "   ")
+   cat(Subtitle)
+ 
+   mean_mut <- mean(num_mutations_all_segments)
+   max_mut <- max(num_mutations_all_segments)
+   min_mut <- min(num_mutations_all_segments)
+ 
+   Subtitle_short <- paste0("Average number of mutations per segment: ", mean_mut, "  Minimum number of mutations per segment: ", min_mut, "  Maximum number of mutations per segment: ", max_mut )
+ 
+ 
+   #add statistics on number of mutations from the simulation
+   
+   simulation_params <- list(
+     vector_tau = vector_tau,
+     vector_karyo = vector_karyo,
+     weights_tau = weights_tau,
+     weights_karyo = weights_karyo,
+     taus = data$taus,
+     karyo = data$karyo,
+     purity = purity,
+     number_events = number_events, # = nrow(vector-tau) / nrow(vector_karyo)
+     number_clocks = number_clocks, # = unique(vector_tau)
+     epsilon = epsilon
+   )
+ 
+ 
+ 
+   simulation_data_plot = simulation_data_all_segments %>% mutate (tau = round(tau, 2))
+   plot_data <- simulation_data_plot %>% 
+     ggplot(mapping = aes(x = NV / DP, fill = segment_name)) +
+     geom_histogram(alpha = .5, position = "identity") +
+     labs(
+       title = "Distribution on the VAF for each segment in the simulated data",
+       subtitle = paste0(Subtitle_short)
+     )+
+     facet_wrap(vars(karyotype, tau, segment_name), scales = "free_x", strip.position = "bottom") +
+     theme_minimal() +
+     theme(
+     panel.background = element_rect(fill = "white", color = NA),  # White panel background
+     plot.background = element_rect(fill = "white", color = NA),   # White plot background
+     strip.background = element_rect(fill = "white", color = NA),  # White strip background
+     strip.placement = "outside",   # Place facet labels outside
+     axis.text.x = element_text(angle = 360, hjust = 1, color = "black", size = 8),  # Rotate and adjust x-axis text
+     axis.ticks.x = element_line(color = "black"),  # Black x-axis ticks
+     panel.spacing = unit(1, "lines"),  # Adjust space between facets
+     strip.text.x = element_text(size = 10, color = "black"),  # Adjust and color strip text
+     axis.line = element_line(color = "black"),  # Black axis lines
+     axis.title.x = element_text(color = "black"),  # Black x-axis title
+     axis.title.y = element_text(color = "black")   # Black y-axis title
+   )
+ 
+ 
+   #save plot of the simulated data in which we can see each single segment VAF distribution
+   ggsave("./plots/simulation_data.png", plot = plot_data, width = 12 + simulation_params$number_events, height = 10 + simulation_params$number_events + (simulation_params$number_events/1.3), limitsize = FALSE,   device = png) 
+   #simulation_params can be substituted in relation with simulation_data variables
+   
+   
+   #in "fit model selection best K" the plots for each K inference is directly saved 
+   results <- fit_model_selection_best_K(simulation_data_all_segments, data$karyo, purity, INIT = INIT, simulation_params = simulation_params)
+   saveRDS(results, paste0("./results/results_simulation",i,".rds"))
+   
+ 
+   
+   
+   
+   model_selection_plot = plotting_model_selection(results)
+   model_selection_plot
+   ggsave("./plots/model_selection_plot.png", plot = model_selection_plot, width = 12, height = 10,  device = png)
+   
+   model_selection <- results$model_selection_tibble
+   saveRDS(model_selection, "./results/model_selection.rds")
+   
+ 
+   
+   setwd(original_dir)
+   
+ }
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010992 seconds 
1000 transitions using 10 leapfrog steps per transition would take 109.92 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42927.798             1.000            1.000 
   200       -42926.704             0.500            1.000 
   300       -42924.649             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  29.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=380    segment 2=535    segment 3=671    segment 4=626    segment 5=229    segment 6=441    segment 7=357    segment 8=632    segment 9=690    segment 10=321    segment 11=439    segment 12=308    segment 13=568    segment 14=524    segment 15=453    segment 16=449    segment 17=228    segment 18=534    segment 19=228    segment 20=544    segment 21=448    segment 22=419    segment 23=555    segment 24=754    segment 25=258    segment 26=257    segment 27=299    segment 28=272    segment 29=248    segment 30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01763 seconds 
1000 transitions using 10 leapfrog steps per transition would take 176.3 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41469.997             1.000            1.000 
   200       -41469.800             0.500            1.000 
   300       -41464.867             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  39.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=380    segment 2=535    segment 3=671    segment 4=626    segment 5=229    segment 6=441    segment 7=357    segment 8=632    segment 9=690    segment 10=321    segment 11=439    segment 12=308    segment 13=568    segment 14=524    segment 15=453    segment 16=449    segment 17=228    segment 18=534    segment 19=228    segment 20=544    segment 21=448    segment 22=419    segment 23=555    segment 24=754    segment 25=258    segment 26=257    segment 27=299    segment 28=272    segment 29=248    segment 30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.026223 seconds 
1000 transitions using 10 leapfrog steps per transition would take 262.23 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41488.902             1.000            1.000 
   200       -41476.482             0.500            1.000 
   300       -41475.761             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=380    segment 2=535    segment 3=671    segment 4=626    segment 5=229    segment 6=441    segment 7=357    segment 8=632    segment 9=690    segment 10=321    segment 11=439    segment 12=308    segment 13=568    segment 14=524    segment 15=453    segment 16=449    segment 17=228    segment 18=534    segment 19=228    segment 20=544    segment 21=448    segment 22=419    segment 23=555    segment 24=754    segment 25=258    segment 26=257    segment 27=299    segment 28=272    segment 29=248    segment 30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.033866 seconds 
1000 transitions using 10 leapfrog steps per transition would take 338.66 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41516.046             1.000            1.000 
   200       -41486.530             0.500            1.000 
   300       -41482.738             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  61.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=380    segment 2=535    segment 3=671    segment 4=626    segment 5=229    segment 6=441    segment 7=357    segment 8=632    segment 9=690    segment 10=321    segment 11=439    segment 12=308    segment 13=568    segment 14=524    segment 15=453    segment 16=449    segment 17=228    segment 18=534    segment 19=228    segment 20=544    segment 21=448    segment 22=419    segment 23=555    segment 24=754    segment 25=258    segment 26=257    segment 27=299    segment 28=272    segment 29=248    segment 30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.045267 seconds 
1000 transitions using 10 leapfrog steps per transition would take 452.67 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41558.501             1.000            1.000 
   200       -41544.611             0.500            1.000 
   300       -41516.994             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  66.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=380    segment 2=535    segment 3=671    segment 4=626    segment 5=229    segment 6=441    segment 7=357    segment 8=632    segment 9=690    segment 10=321    segment 11=439    segment 12=308    segment 13=568    segment 14=524    segment 15=453    segment 16=449    segment 17=228    segment 18=534    segment 19=228    segment 20=544    segment 21=448    segment 22=419    segment 23=555    segment 24=754    segment 25=258    segment 26=257    segment 27=299    segment 28=272    segment 29=248    segment 30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0"
[13] "2:1" "2:1" "2:1" "2:1" "2:0" "2:1" "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
[25] "2:0" "2:0" "2:0" "2:0" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018084 seconds 
1000 transitions using 10 leapfrog steps per transition would take 180.84 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41469.900             1.000            1.000 
   200       -41467.047             0.500            1.000 
   300       -41466.010             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=380    segment 2=535    segment 3=671    segment 4=626    segment 5=229    segment 6=441    segment 7=357    segment 8=632    segment 9=690    segment 10=321    segment 11=439    segment 12=308    segment 13=568    segment 14=524    segment 15=453    segment 16=449    segment 17=228    segment 18=534    segment 19=228    segment 20=544    segment 21=448    segment 22=419    segment 23=555    segment 24=754    segment 25=258    segment 26=257    segment 27=299    segment 28=272    segment 29=248    segment 30=563 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=391    2=550    3=693    4=644    5=234    6=453    7=368    8=663    9=710    10=335    11=454    12=312    13=602    14=547    15=469    16=466    17=233    18=557    19=233    20=563    21=462    22=437    23=577    24=776    25=263    26=267    27=312    28=280    29=250    30=591 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011795 seconds 
1000 transitions using 10 leapfrog steps per transition would take 117.95 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50874.938             1.000            1.000 
   200       -50875.593             0.500            1.000 
   300       -50883.249             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  34.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=211    segment 2=514    segment 3=411    segment 4=451    segment 5=569    segment 6=545    segment 7=536    segment 8=418    segment 9=344    segment 10=369    segment 11=453    segment 12=422    segment 13=738    segment 14=377    segment 15=514    segment 16=432    segment 17=468    segment 18=501    segment 19=764    segment 20=583    segment 21=665    segment 22=564    segment 23=652    segment 24=257    segment 25=436    segment 26=491    segment 27=621    segment 28=692    segment 29=522    segment 30=467 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020555 seconds 
1000 transitions using 10 leapfrog steps per transition would take 205.55 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48853.804             1.000            1.000 
   200       -48847.862             0.500            1.000 
   300       -48850.619             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  55.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=211    segment 2=514    segment 3=411    segment 4=451    segment 5=569    segment 6=545    segment 7=536    segment 8=418    segment 9=344    segment 10=369    segment 11=453    segment 12=422    segment 13=738    segment 14=377    segment 15=514    segment 16=432    segment 17=468    segment 18=501    segment 19=764    segment 20=583    segment 21=665    segment 22=564    segment 23=652    segment 24=257    segment 25=436    segment 26=491    segment 27=621    segment 28=692    segment 29=522    segment 30=467 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029492 seconds 
1000 transitions using 10 leapfrog steps per transition would take 294.92 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48911.128             1.000            1.000 
   200       -48902.230             0.500            1.000 
   300       -48893.944             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=211    segment 2=514    segment 3=411    segment 4=451    segment 5=569    segment 6=545    segment 7=536    segment 8=418    segment 9=344    segment 10=369    segment 11=453    segment 12=422    segment 13=738    segment 14=377    segment 15=514    segment 16=432    segment 17=468    segment 18=501    segment 19=764    segment 20=583    segment 21=665    segment 22=564    segment 23=652    segment 24=257    segment 25=436    segment 26=491    segment 27=621    segment 28=692    segment 29=522    segment 30=467 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.038351 seconds 
1000 transitions using 10 leapfrog steps per transition would take 383.51 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48921.354             1.000            1.000 
   200       -48884.977             0.500            1.000 
   300       -48865.265             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  64.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=211    segment 2=514    segment 3=411    segment 4=451    segment 5=569    segment 6=545    segment 7=536    segment 8=418    segment 9=344    segment 10=369    segment 11=453    segment 12=422    segment 13=738    segment 14=377    segment 15=514    segment 16=432    segment 17=468    segment 18=501    segment 19=764    segment 20=583    segment 21=665    segment 22=564    segment 23=652    segment 24=257    segment 25=436    segment 26=491    segment 27=621    segment 28=692    segment 29=522    segment 30=467 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.049311 seconds 
1000 transitions using 10 leapfrog steps per transition would take 493.11 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48940.676             1.000            1.000 
   200       -48937.449             0.500            1.000 
   300       -48915.777             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  74.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=211    segment 2=514    segment 3=411    segment 4=451    segment 5=569    segment 6=545    segment 7=536    segment 8=418    segment 9=344    segment 10=369    segment 11=453    segment 12=422    segment 13=738    segment 14=377    segment 15=514    segment 16=432    segment 17=468    segment 18=501    segment 19=764    segment 20=583    segment 21=665    segment 22=564    segment 23=652    segment 24=257    segment 25=436    segment 26=491    segment 27=621    segment 28=692    segment 29=522    segment 30=467 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:1" "2:0" "2:0" "2:2" "2:2"
[13] "2:2" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:1" "2:2" "2:1" "2:2" "2:0"
[25] "2:2" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019015 seconds 
1000 transitions using 10 leapfrog steps per transition would take 190.15 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48852.064             1.000            1.000 
   200       -48850.799             0.500            1.000 
   300       -48848.949             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  42.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=211    segment 2=514    segment 3=411    segment 4=451    segment 5=569    segment 6=545    segment 7=536    segment 8=418    segment 9=344    segment 10=369    segment 11=453    segment 12=422    segment 13=738    segment 14=377    segment 15=514    segment 16=432    segment 17=468    segment 18=501    segment 19=764    segment 20=583    segment 21=665    segment 22=564    segment 23=652    segment 24=257    segment 25=436    segment 26=491    segment 27=621    segment 28=692    segment 29=522    segment 30=467 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=220    2=538    3=429    4=467    5=595    6=560    7=558    8=429    9=363    10=385    11=473    12=433    13=769    14=396    15=535    16=450    17=486    18=518    19=793    20=604    21=693    22=594    23=681    24=264    25=452    26=517    27=646    28=717    29=542    30=486 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.00959 seconds 
1000 transitions using 10 leapfrog steps per transition would take 95.9 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44425.930             1.000            1.000 
   200       -44412.443             0.500            1.000 
   300       -44409.447             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  30.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=240    segment 2=282    segment 3=439    segment 4=490    segment 5=225    segment 6=531    segment 7=620    segment 8=413    segment 9=458    segment 10=264    segment 11=590    segment 12=419    segment 13=220    segment 14=439    segment 15=572    segment 16=430    segment 17=633    segment 18=555    segment 19=331    segment 20=537    segment 21=324    segment 22=434    segment 23=385    segment 24=461    segment 25=682    segment 26=481    segment 27=400    segment 28=531    segment 29=378    segment 30=331 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.017535 seconds 
1000 transitions using 10 leapfrog steps per transition would take 175.35 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42854.729             1.000            1.000 
   200       -42851.717             0.500            1.000 
   300       -42852.586             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=240    segment 2=282    segment 3=439    segment 4=490    segment 5=225    segment 6=531    segment 7=620    segment 8=413    segment 9=458    segment 10=264    segment 11=590    segment 12=419    segment 13=220    segment 14=439    segment 15=572    segment 16=430    segment 17=633    segment 18=555    segment 19=331    segment 20=537    segment 21=324    segment 22=434    segment 23=385    segment 24=461    segment 25=682    segment 26=481    segment 27=400    segment 28=531    segment 29=378    segment 30=331 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.026474 seconds 
1000 transitions using 10 leapfrog steps per transition would take 264.74 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42901.063             1.000            1.000 
   200       -42896.464             0.500            1.000 
   300       -42888.456             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=240    segment 2=282    segment 3=439    segment 4=490    segment 5=225    segment 6=531    segment 7=620    segment 8=413    segment 9=458    segment 10=264    segment 11=590    segment 12=419    segment 13=220    segment 14=439    segment 15=572    segment 16=430    segment 17=633    segment 18=555    segment 19=331    segment 20=537    segment 21=324    segment 22=434    segment 23=385    segment 24=461    segment 25=682    segment 26=481    segment 27=400    segment 28=531    segment 29=378    segment 30=331 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.033521 seconds 
1000 transitions using 10 leapfrog steps per transition would take 335.21 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42918.433             1.000            1.000 
   200       -42916.997             0.500            1.000 
   300       -42912.181             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  66.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=240    segment 2=282    segment 3=439    segment 4=490    segment 5=225    segment 6=531    segment 7=620    segment 8=413    segment 9=458    segment 10=264    segment 11=590    segment 12=419    segment 13=220    segment 14=439    segment 15=572    segment 16=430    segment 17=633    segment 18=555    segment 19=331    segment 20=537    segment 21=324    segment 22=434    segment 23=385    segment 24=461    segment 25=682    segment 26=481    segment 27=400    segment 28=531    segment 29=378    segment 30=331 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.044887 seconds 
1000 transitions using 10 leapfrog steps per transition would take 448.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42927.863             1.000            1.000 
   200       -42905.307             0.500            1.000 
   300       -42902.928             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  67.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=240    segment 2=282    segment 3=439    segment 4=490    segment 5=225    segment 6=531    segment 7=620    segment 8=413    segment 9=458    segment 10=264    segment 11=590    segment 12=419    segment 13=220    segment 14=439    segment 15=572    segment 16=430    segment 17=633    segment 18=555    segment 19=331    segment 20=537    segment 21=324    segment 22=434    segment 23=385    segment 24=461    segment 25=682    segment 26=481    segment 27=400    segment 28=531    segment 29=378    segment 30=331 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:2"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:1" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.017737 seconds 
1000 transitions using 10 leapfrog steps per transition would take 177.37 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42853.297             1.000            1.000 
   200       -42848.181             0.500            1.000 
   300       -42851.113             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  41.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=240    segment 2=282    segment 3=439    segment 4=490    segment 5=225    segment 6=531    segment 7=620    segment 8=413    segment 9=458    segment 10=264    segment 11=590    segment 12=419    segment 13=220    segment 14=439    segment 15=572    segment 16=430    segment 17=633    segment 18=555    segment 19=331    segment 20=537    segment 21=324    segment 22=434    segment 23=385    segment 24=461    segment 25=682    segment 26=481    segment 27=400    segment 28=531    segment 29=378    segment 30=331 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=251    2=298    3=463    4=510    5=226    6=552    7=645    8=430    9=473    10=271    11=614    12=435    13=224    14=449    15=594    16=444    17=657    18=575    19=341    20=556    21=335    22=449    23=408    24=495    25=708    26=500    27=412    28=556    29=399    30=342 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010468 seconds 
1000 transitions using 10 leapfrog steps per transition would take 104.68 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47696.535             1.000            1.000 
   200       -47686.443             0.500            1.000 
   300       -47685.940             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=378    segment 3=472    segment 4=506    segment 5=425    segment 6=537    segment 7=361    segment 8=444    segment 9=512    segment 10=402    segment 11=712    segment 12=320    segment 13=424    segment 14=583    segment 15=341    segment 16=287    segment 17=748    segment 18=483    segment 19=754    segment 20=293    segment 21=728    segment 22=577    segment 23=568    segment 24=294    segment 25=322    segment 26=343    segment 27=343    segment 28=501    segment 29=488    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019623 seconds 
1000 transitions using 10 leapfrog steps per transition would take 196.23 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45892.399             1.000            1.000 
   200       -45890.476             0.500            1.000 
   300       -45886.724             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=378    segment 3=472    segment 4=506    segment 5=425    segment 6=537    segment 7=361    segment 8=444    segment 9=512    segment 10=402    segment 11=712    segment 12=320    segment 13=424    segment 14=583    segment 15=341    segment 16=287    segment 17=748    segment 18=483    segment 19=754    segment 20=293    segment 21=728    segment 22=577    segment 23=568    segment 24=294    segment 25=322    segment 26=343    segment 27=343    segment 28=501    segment 29=488    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028416 seconds 
1000 transitions using 10 leapfrog steps per transition would take 284.16 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45928.170             1.000            1.000 
   200       -45927.861             0.500            1.000 
   300       -45924.270             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  51.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=378    segment 3=472    segment 4=506    segment 5=425    segment 6=537    segment 7=361    segment 8=444    segment 9=512    segment 10=402    segment 11=712    segment 12=320    segment 13=424    segment 14=583    segment 15=341    segment 16=287    segment 17=748    segment 18=483    segment 19=754    segment 20=293    segment 21=728    segment 22=577    segment 23=568    segment 24=294    segment 25=322    segment 26=343    segment 27=343    segment 28=501    segment 29=488    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036953 seconds 
1000 transitions using 10 leapfrog steps per transition would take 369.53 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45935.208             1.000            1.000 
   200       -45922.054             0.500            1.000 
   300       -45905.740             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  61.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=378    segment 3=472    segment 4=506    segment 5=425    segment 6=537    segment 7=361    segment 8=444    segment 9=512    segment 10=402    segment 11=712    segment 12=320    segment 13=424    segment 14=583    segment 15=341    segment 16=287    segment 17=748    segment 18=483    segment 19=754    segment 20=293    segment 21=728    segment 22=577    segment 23=568    segment 24=294    segment 25=322    segment 26=343    segment 27=343    segment 28=501    segment 29=488    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048227 seconds 
1000 transitions using 10 leapfrog steps per transition would take 482.27 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45991.852             1.000            1.000 
   200       -45976.037             0.500            1.000 
   300       -45968.544             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  72.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=378    segment 3=472    segment 4=506    segment 5=425    segment 6=537    segment 7=361    segment 8=444    segment 9=512    segment 10=402    segment 11=712    segment 12=320    segment 13=424    segment 14=583    segment 15=341    segment 16=287    segment 17=748    segment 18=483    segment 19=754    segment 20=293    segment 21=728    segment 22=577    segment 23=568    segment 24=294    segment 25=322    segment 26=343    segment 27=343    segment 28=501    segment 29=488    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0"
[13] "2:2" "2:2" "2:0" "2:0" "2:2" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019361 seconds 
1000 transitions using 10 leapfrog steps per transition would take 193.61 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45891.274             1.000            1.000 
   200       -45885.801             0.500            1.000 
   300       -45888.760             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=378    segment 3=472    segment 4=506    segment 5=425    segment 6=537    segment 7=361    segment 8=444    segment 9=512    segment 10=402    segment 11=712    segment 12=320    segment 13=424    segment 14=583    segment 15=341    segment 16=287    segment 17=748    segment 18=483    segment 19=754    segment 20=293    segment 21=728    segment 22=577    segment 23=568    segment 24=294    segment 25=322    segment 26=343    segment 27=343    segment 28=501    segment 29=488    segment 30=757 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=404    2=390    3=491    4=522    5=443    6=568    7=381    8=463    9=534    10=415    11=737    12=331    13=448    14=608    15=350    16=299    17=776    18=491    19=791    20=300    21=754    22=598    23=591    24=304    25=334    26=352    27=361    28=520    29=499    30=781 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010175 seconds 
1000 transitions using 10 leapfrog steps per transition would take 101.75 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47515.234             1.000            1.000 
   200       -47514.178             0.500            1.000 
   300       -47513.326             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  31.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=619    segment 3=304    segment 4=506    segment 5=697    segment 6=351    segment 7=418    segment 8=728    segment 9=538    segment 10=477    segment 11=238    segment 12=378    segment 13=387    segment 14=419    segment 15=306    segment 16=685    segment 17=512    segment 18=303    segment 19=436    segment 20=627    segment 21=579    segment 22=387    segment 23=583    segment 24=551    segment 25=304    segment 26=469    segment 27=409    segment 28=555    segment 29=434    segment 30=390 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018772 seconds 
1000 transitions using 10 leapfrog steps per transition would take 187.72 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45509.763             1.000            1.000 
   200       -45507.274             0.500            1.000 
   300       -45508.063             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  42.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=619    segment 3=304    segment 4=506    segment 5=697    segment 6=351    segment 7=418    segment 8=728    segment 9=538    segment 10=477    segment 11=238    segment 12=378    segment 13=387    segment 14=419    segment 15=306    segment 16=685    segment 17=512    segment 18=303    segment 19=436    segment 20=627    segment 21=579    segment 22=387    segment 23=583    segment 24=551    segment 25=304    segment 26=469    segment 27=409    segment 28=555    segment 29=434    segment 30=390 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027561 seconds 
1000 transitions using 10 leapfrog steps per transition would take 275.61 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45527.582             1.000            1.000 
   200       -45518.586             0.500            1.000 
   300       -45519.580             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=619    segment 3=304    segment 4=506    segment 5=697    segment 6=351    segment 7=418    segment 8=728    segment 9=538    segment 10=477    segment 11=238    segment 12=378    segment 13=387    segment 14=419    segment 15=306    segment 16=685    segment 17=512    segment 18=303    segment 19=436    segment 20=627    segment 21=579    segment 22=387    segment 23=583    segment 24=551    segment 25=304    segment 26=469    segment 27=409    segment 28=555    segment 29=434    segment 30=390 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036459 seconds 
1000 transitions using 10 leapfrog steps per transition would take 364.59 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45572.834             1.000            1.000 
   200       -45560.312             0.500            1.000 
   300       -45557.281             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=619    segment 3=304    segment 4=506    segment 5=697    segment 6=351    segment 7=418    segment 8=728    segment 9=538    segment 10=477    segment 11=238    segment 12=378    segment 13=387    segment 14=419    segment 15=306    segment 16=685    segment 17=512    segment 18=303    segment 19=436    segment 20=627    segment 21=579    segment 22=387    segment 23=583    segment 24=551    segment 25=304    segment 26=469    segment 27=409    segment 28=555    segment 29=434    segment 30=390 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.047455 seconds 
1000 transitions using 10 leapfrog steps per transition would take 474.55 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Iteration: 250 / 250 [100%]  (Adaptation) 
Success! Found best value [eta = 0.1]. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46657.689             1.000            1.000 
   200       -46073.712             0.506            1.000 
   300       -45832.202             0.339            0.013 
   400       -45720.045             0.255            0.013 
   500       -45664.672             0.204            0.005   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  91.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=619    segment 3=304    segment 4=506    segment 5=697    segment 6=351    segment 7=418    segment 8=728    segment 9=538    segment 10=477    segment 11=238    segment 12=378    segment 13=387    segment 14=419    segment 15=306    segment 16=685    segment 17=512    segment 18=303    segment 19=436    segment 20=627    segment 21=579    segment 22=387    segment 23=583    segment 24=551    segment 25=304    segment 26=469    segment 27=409    segment 28=555    segment 29=434    segment 30=390 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0"
[13] "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:2"
[25] "2:0" "2:1" "2:2" "2:1" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01872 seconds 
1000 transitions using 10 leapfrog steps per transition would take 187.2 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45517.327             1.000            1.000 
   200       -45509.062             0.500            1.000 
   300       -45507.628             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  39.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=619    segment 3=304    segment 4=506    segment 5=697    segment 6=351    segment 7=418    segment 8=728    segment 9=538    segment 10=477    segment 11=238    segment 12=378    segment 13=387    segment 14=419    segment 15=306    segment 16=685    segment 17=512    segment 18=303    segment 19=436    segment 20=627    segment 21=579    segment 22=387    segment 23=583    segment 24=551    segment 25=304    segment 26=469    segment 27=409    segment 28=555    segment 29=434    segment 30=390 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=645    3=311    4=519    5=713    6=371    7=433    8=751    9=568    10=494    11=241    12=386    13=407    14=444    15=317    16=716    17=527    18=319    19=457    20=642    21=597    22=412    23=609    24=575    25=311    26=492    27=429    28=574    29=447    30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.008853 seconds 
1000 transitions using 10 leapfrog steps per transition would take 88.53 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40872.846             1.000            1.000 
   200       -40873.821             0.500            1.000 
   300       -40869.300             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  27.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=225    segment 2=281    segment 3=284    segment 4=264    segment 5=194    segment 6=235    segment 7=721    segment 8=410    segment 9=349    segment 10=345    segment 11=210    segment 12=456    segment 13=406    segment 14=560    segment 15=540    segment 16=210    segment 17=518    segment 18=482    segment 19=392    segment 20=686    segment 21=453    segment 22=432    segment 23=360    segment 24=509    segment 25=523    segment 26=524    segment 27=564    segment 28=326    segment 29=498    segment 30=326 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016972 seconds 
1000 transitions using 10 leapfrog steps per transition would take 169.72 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39611.317             1.000            1.000 
   200       -39608.206             0.500            1.000 
   300       -39608.168             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  39.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=225    segment 2=281    segment 3=284    segment 4=264    segment 5=194    segment 6=235    segment 7=721    segment 8=410    segment 9=349    segment 10=345    segment 11=210    segment 12=456    segment 13=406    segment 14=560    segment 15=540    segment 16=210    segment 17=518    segment 18=482    segment 19=392    segment 20=686    segment 21=453    segment 22=432    segment 23=360    segment 24=509    segment 25=523    segment 26=524    segment 27=564    segment 28=326    segment 29=498    segment 30=326 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.024831 seconds 
1000 transitions using 10 leapfrog steps per transition would take 248.31 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39624.440             1.000            1.000 
   200       -39616.710             0.500            1.000 
   300       -39615.179             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  47.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=225    segment 2=281    segment 3=284    segment 4=264    segment 5=194    segment 6=235    segment 7=721    segment 8=410    segment 9=349    segment 10=345    segment 11=210    segment 12=456    segment 13=406    segment 14=560    segment 15=540    segment 16=210    segment 17=518    segment 18=482    segment 19=392    segment 20=686    segment 21=453    segment 22=432    segment 23=360    segment 24=509    segment 25=523    segment 26=524    segment 27=564    segment 28=326    segment 29=498    segment 30=326 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.031302 seconds 
1000 transitions using 10 leapfrog steps per transition would take 313.02 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39655.496             1.000            1.000 
   200       -39646.618             0.500            1.000 
   300       -39626.056             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=225    segment 2=281    segment 3=284    segment 4=264    segment 5=194    segment 6=235    segment 7=721    segment 8=410    segment 9=349    segment 10=345    segment 11=210    segment 12=456    segment 13=406    segment 14=560    segment 15=540    segment 16=210    segment 17=518    segment 18=482    segment 19=392    segment 20=686    segment 21=453    segment 22=432    segment 23=360    segment 24=509    segment 25=523    segment 26=524    segment 27=564    segment 28=326    segment 29=498    segment 30=326 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.038796 seconds 
1000 transitions using 10 leapfrog steps per transition would take 387.96 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
Chain 1 stan::variational::normal_meanfield::calc_grad: The number of dropped evaluations has reached its maximum amount (10). Your model may be either severely ill-conditioned or misspecified.
Warning: Fitting finished unexpectedly! Use the $output() method for more information.

Finished in  8.8 seconds.
An error occurred during inference: Fit failed: Maximum number of discarded evaluations reached.
Attempt 2 with 10000 iterations, 2 grad_samples, and 200 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039197 seconds 
1000 transitions using 10 leapfrog steps per transition would take 391.97 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39670.554             1.000            1.000 
   200       -39639.982             0.500            1.000 
   300       -39634.044             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  79.1 seconds.
Fit succeeded in attempt 2
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=225    segment 2=281    segment 3=284    segment 4=264    segment 5=194    segment 6=235    segment 7=721    segment 8=410    segment 9=349    segment 10=345    segment 11=210    segment 12=456    segment 13=406    segment 14=560    segment 15=540    segment 16=210    segment 17=518    segment 18=482    segment 19=392    segment 20=686    segment 21=453    segment 22=432    segment 23=360    segment 24=509    segment 25=523    segment 26=524    segment 27=564    segment 28=326    segment 29=498    segment 30=326 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.3311037 0.6622074
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1" "2:0" "2:0" "2:0" "2:1"
[13] "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:1" "2:0" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01666 seconds 
1000 transitions using 10 leapfrog steps per transition would take 166.6 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39614.155             1.000            1.000 
   200       -39608.687             0.500            1.000 
   300       -39606.898             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  41.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=225    segment 2=281    segment 3=284    segment 4=264    segment 5=194    segment 6=235    segment 7=721    segment 8=410    segment 9=349    segment 10=345    segment 11=210    segment 12=456    segment 13=406    segment 14=560    segment 15=540    segment 16=210    segment 17=518    segment 18=482    segment 19=392    segment 20=686    segment 21=453    segment 22=432    segment 23=360    segment 24=509    segment 25=523    segment 26=524    segment 27=564    segment 28=326    segment 29=498    segment 30=326 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=233    2=294    3=292    4=270    5=198    6=237    7=747    8=436    9=367    10=356    11=213    12=479    13=421    14=576    15=567    16=215    17=540    18=495    19=402    20=717    21=470    22=456    23=374    24=532    25=530    26=549    27=584    28=341    29=515    30=345 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011153 seconds 
1000 transitions using 10 leapfrog steps per transition would take 111.53 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50958.876             1.000            1.000 
   200       -50951.771             0.500            1.000 
   300       -50951.505             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  35.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=664    segment 2=343    segment 3=609    segment 4=798    segment 5=698    segment 6=341    segment 7=534    segment 8=334    segment 9=781    segment 10=697    segment 11=437    segment 12=587    segment 13=479    segment 14=250    segment 15=516    segment 16=431    segment 17=576    segment 18=256    segment 19=704    segment 20=433    segment 21=750    segment 22=563    segment 23=539    segment 24=532    segment 25=477    segment 26=306    segment 27=730    segment 28=410    segment 29=458    segment 30=512 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.022516 seconds 
1000 transitions using 10 leapfrog steps per transition would take 225.16 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49139.144             1.000            1.000 
   200       -49130.494             0.500            1.000 
   300       -49130.193             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  44.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=664    segment 2=343    segment 3=609    segment 4=798    segment 5=698    segment 6=341    segment 7=534    segment 8=334    segment 9=781    segment 10=697    segment 11=437    segment 12=587    segment 13=479    segment 14=250    segment 15=516    segment 16=431    segment 17=576    segment 18=256    segment 19=704    segment 20=433    segment 21=750    segment 22=563    segment 23=539    segment 24=532    segment 25=477    segment 26=306    segment 27=730    segment 28=410    segment 29=458    segment 30=512 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.031565 seconds 
1000 transitions using 10 leapfrog steps per transition would take 315.65 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49177.364             1.000            1.000 
   200       -49166.418             0.500            1.000 
   300       -49165.505             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  56.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=664    segment 2=343    segment 3=609    segment 4=798    segment 5=698    segment 6=341    segment 7=534    segment 8=334    segment 9=781    segment 10=697    segment 11=437    segment 12=587    segment 13=479    segment 14=250    segment 15=516    segment 16=431    segment 17=576    segment 18=256    segment 19=704    segment 20=433    segment 21=750    segment 22=563    segment 23=539    segment 24=532    segment 25=477    segment 26=306    segment 27=730    segment 28=410    segment 29=458    segment 30=512 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.040815 seconds 
1000 transitions using 10 leapfrog steps per transition would take 408.15 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49221.218             1.000            1.000 
   200       -49208.213             0.500            1.000 
   300       -49200.600             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  82.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=664    segment 2=343    segment 3=609    segment 4=798    segment 5=698    segment 6=341    segment 7=534    segment 8=334    segment 9=781    segment 10=697    segment 11=437    segment 12=587    segment 13=479    segment 14=250    segment 15=516    segment 16=431    segment 17=576    segment 18=256    segment 19=704    segment 20=433    segment 21=750    segment 22=563    segment 23=539    segment 24=532    segment 25=477    segment 26=306    segment 27=730    segment 28=410    segment 29=458    segment 30=512 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.051907 seconds 
1000 transitions using 10 leapfrog steps per transition would take 519.07 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49204.781             1.000            1.000 
   200       -49189.620             0.500            1.000 
   300       -49184.404             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  79.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=664    segment 2=343    segment 3=609    segment 4=798    segment 5=698    segment 6=341    segment 7=534    segment 8=334    segment 9=781    segment 10=697    segment 11=437    segment 12=587    segment 13=479    segment 14=250    segment 15=516    segment 16=431    segment 17=576    segment 18=256    segment 19=704    segment 20=433    segment 21=750    segment 22=563    segment 23=539    segment 24=532    segment 25=477    segment 26=306    segment 27=730    segment 28=410    segment 29=458    segment 30=512 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:0" "2:2" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:2" "2:2" "2:1"
[13] "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:2" "2:1" "2:1" "2:1"
[25] "2:1" "2:0" "2:2" "2:1" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.02244 seconds 
1000 transitions using 10 leapfrog steps per transition would take 224.4 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49162.103             1.000            1.000 
   200       -49129.737             0.500            1.000 
   300       -49129.296             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=664    segment 2=343    segment 3=609    segment 4=798    segment 5=698    segment 6=341    segment 7=534    segment 8=334    segment 9=781    segment 10=697    segment 11=437    segment 12=587    segment 13=479    segment 14=250    segment 15=516    segment 16=431    segment 17=576    segment 18=256    segment 19=704    segment 20=433    segment 21=750    segment 22=563    segment 23=539    segment 24=532    segment 25=477    segment 26=306    segment 27=730    segment 28=410    segment 29=458    segment 30=512 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=688    2=358    3=636    4=829    5=733    6=350    7=558    8=340    9=808    10=717    11=457    12=614    13=504    14=250    15=536    16=449    17=612    18=263    19=737    20=447    21=777    22=579    23=565    24=554    25=503    26=315    27=751    28=430    29=472    30=533 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.009438 seconds 
1000 transitions using 10 leapfrog steps per transition would take 94.38 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45020.733             1.000            1.000 
   200       -45018.395             0.500            1.000 
   300       -45019.298             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  30.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=435    segment 2=744    segment 3=461    segment 4=365    segment 5=649    segment 6=380    segment 7=543    segment 8=505    segment 9=538    segment 10=358    segment 11=448    segment 12=404    segment 13=339    segment 14=392    segment 15=488    segment 16=219    segment 17=317    segment 18=506    segment 19=427    segment 20=445    segment 21=542    segment 22=754    segment 23=416    segment 24=249    segment 25=320    segment 26=237    segment 27=571    segment 28=410    segment 29=478    segment 30=440 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018421 seconds 
1000 transitions using 10 leapfrog steps per transition would take 184.21 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43322.602             1.000            1.000 
   200       -43317.460             0.500            1.000 
   300       -43319.070             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  43.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=435    segment 2=744    segment 3=461    segment 4=365    segment 5=649    segment 6=380    segment 7=543    segment 8=505    segment 9=538    segment 10=358    segment 11=448    segment 12=404    segment 13=339    segment 14=392    segment 15=488    segment 16=219    segment 17=317    segment 18=506    segment 19=427    segment 20=445    segment 21=542    segment 22=754    segment 23=416    segment 24=249    segment 25=320    segment 26=237    segment 27=571    segment 28=410    segment 29=478    segment 30=440 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.026235 seconds 
1000 transitions using 10 leapfrog steps per transition would take 262.35 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43356.157             1.000            1.000 
   200       -43354.006             0.500            1.000 
   300       -43352.383             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=435    segment 2=744    segment 3=461    segment 4=365    segment 5=649    segment 6=380    segment 7=543    segment 8=505    segment 9=538    segment 10=358    segment 11=448    segment 12=404    segment 13=339    segment 14=392    segment 15=488    segment 16=219    segment 17=317    segment 18=506    segment 19=427    segment 20=445    segment 21=542    segment 22=754    segment 23=416    segment 24=249    segment 25=320    segment 26=237    segment 27=571    segment 28=410    segment 29=478    segment 30=440 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.034503 seconds 
1000 transitions using 10 leapfrog steps per transition would take 345.03 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43393.017             1.000            1.000 
   200       -43375.637             0.500            1.000 
   300       -43364.925             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  68.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=435    segment 2=744    segment 3=461    segment 4=365    segment 5=649    segment 6=380    segment 7=543    segment 8=505    segment 9=538    segment 10=358    segment 11=448    segment 12=404    segment 13=339    segment 14=392    segment 15=488    segment 16=219    segment 17=317    segment 18=506    segment 19=427    segment 20=445    segment 21=542    segment 22=754    segment 23=416    segment 24=249    segment 25=320    segment 26=237    segment 27=571    segment 28=410    segment 29=478    segment 30=440 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.045609 seconds 
1000 transitions using 10 leapfrog steps per transition would take 456.09 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43398.004             1.000            1.000 
   200       -43351.837             0.501            1.000 
   300       -43342.717             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  82.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=435    segment 2=744    segment 3=461    segment 4=365    segment 5=649    segment 6=380    segment 7=543    segment 8=505    segment 9=538    segment 10=358    segment 11=448    segment 12=404    segment 13=339    segment 14=392    segment 15=488    segment 16=219    segment 17=317    segment 18=506    segment 19=427    segment 20=445    segment 21=542    segment 22=754    segment 23=416    segment 24=249    segment 25=320    segment 26=237    segment 27=571    segment 28=410    segment 29=478    segment 30=440 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1"
[13] "2:0" "2:1" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0"
[25] "2:0" "2:0" "2:1" "2:1" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.045808 seconds 
1000 transitions using 10 leapfrog steps per transition would take 458.08 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43403.465             1.000            1.000 
   200       -43384.744             0.500            1.000 
   300       -43366.460             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  75.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=435    segment 2=744    segment 3=461    segment 4=365    segment 5=649    segment 6=380    segment 7=543    segment 8=505    segment 9=538    segment 10=358    segment 11=448    segment 12=404    segment 13=339    segment 14=392    segment 15=488    segment 16=219    segment 17=317    segment 18=506    segment 19=427    segment 20=445    segment 21=542    segment 22=754    segment 23=416    segment 24=249    segment 25=320    segment 26=237    segment 27=571    segment 28=410    segment 29=478    segment 30=440 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=453    2=768    3=481    4=381    5=667    6=396    7=563    8=521    9=562    10=379    11=465    12=421    13=351    14=405    15=505    16=222    17=329    18=531    19=440    20=461    21=559    22=778    23=439    24=257    25=335    26=244    27=586    28=426    29=499    30=457 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.008791 seconds 
1000 transitions using 10 leapfrog steps per transition would take 87.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40120.532             1.000            1.000 
   200       -40111.960             0.500            1.000 
   300       -40111.227             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  29.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=550    segment 2=470    segment 3=595    segment 4=595    segment 5=197    segment 6=239    segment 7=343    segment 8=348    segment 9=295    segment 10=275    segment 11=770    segment 12=390    segment 13=376    segment 14=394    segment 15=596    segment 16=451    segment 17=563    segment 18=433    segment 19=390    segment 20=216    segment 21=307    segment 22=275    segment 23=367    segment 24=299    segment 25=290    segment 26=476    segment 27=497    segment 28=306    segment 29=579    segment 30=375 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016343 seconds 
1000 transitions using 10 leapfrog steps per transition would take 163.43 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -38155.347             1.000            1.000 
   200       -38151.475             0.500            1.000 
   300       -38151.031             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=550    segment 2=470    segment 3=595    segment 4=595    segment 5=197    segment 6=239    segment 7=343    segment 8=348    segment 9=295    segment 10=275    segment 11=770    segment 12=390    segment 13=376    segment 14=394    segment 15=596    segment 16=451    segment 17=563    segment 18=433    segment 19=390    segment 20=216    segment 21=307    segment 22=275    segment 23=367    segment 24=299    segment 25=290    segment 26=476    segment 27=497    segment 28=306    segment 29=579    segment 30=375 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.024717 seconds 
1000 transitions using 10 leapfrog steps per transition would take 247.17 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -38191.132             1.000            1.000 
   200       -38172.618             0.500            1.000 
   300       -38163.255             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  47.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=550    segment 2=470    segment 3=595    segment 4=595    segment 5=197    segment 6=239    segment 7=343    segment 8=348    segment 9=295    segment 10=275    segment 11=770    segment 12=390    segment 13=376    segment 14=394    segment 15=596    segment 16=451    segment 17=563    segment 18=433    segment 19=390    segment 20=216    segment 21=307    segment 22=275    segment 23=367    segment 24=299    segment 25=290    segment 26=476    segment 27=497    segment 28=306    segment 29=579    segment 30=375 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.031536 seconds 
1000 transitions using 10 leapfrog steps per transition would take 315.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -38187.259             1.000            1.000 
   200       -38169.057             0.500            1.000 
   300       -38168.734             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=550    segment 2=470    segment 3=595    segment 4=595    segment 5=197    segment 6=239    segment 7=343    segment 8=348    segment 9=295    segment 10=275    segment 11=770    segment 12=390    segment 13=376    segment 14=394    segment 15=596    segment 16=451    segment 17=563    segment 18=433    segment 19=390    segment 20=216    segment 21=307    segment 22=275    segment 23=367    segment 24=299    segment 25=290    segment 26=476    segment 27=497    segment 28=306    segment 29=579    segment 30=375 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.038789 seconds 
1000 transitions using 10 leapfrog steps per transition would take 387.89 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -38230.794             1.000            1.000 
   200       -38200.759             0.500            1.000 
   300       -38197.746             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=550    segment 2=470    segment 3=595    segment 4=595    segment 5=197    segment 6=239    segment 7=343    segment 8=348    segment 9=295    segment 10=275    segment 11=770    segment 12=390    segment 13=376    segment 14=394    segment 15=596    segment 16=451    segment 17=563    segment 18=433    segment 19=390    segment 20=216    segment 21=307    segment 22=275    segment 23=367    segment 24=299    segment 25=290    segment 26=476    segment 27=497    segment 28=306    segment 29=579    segment 30=375 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:0" "2:0" "2:0" "2:2" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:0"
[25] "2:0" "2:1" "2:2" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016987 seconds 
1000 transitions using 10 leapfrog steps per transition would take 169.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -38152.794             1.000            1.000 
   200       -38150.158             0.500            1.000 
   300       -38149.199             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  39.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=550    segment 2=470    segment 3=595    segment 4=595    segment 5=197    segment 6=239    segment 7=343    segment 8=348    segment 9=295    segment 10=275    segment 11=770    segment 12=390    segment 13=376    segment 14=394    segment 15=596    segment 16=451    segment 17=563    segment 18=433    segment 19=390    segment 20=216    segment 21=307    segment 22=275    segment 23=367    segment 24=299    segment 25=290    segment 26=476    segment 27=497    segment 28=306    segment 29=579    segment 30=375 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=571    2=494    3=620    4=624    5=201    6=247    7=354    8=360    9=306    10=290    11=792    12=403    13=395    14=409    15=625    16=476    17=606    18=447    19=410    20=222    21=315    22=284    23=384    24=309    25=303    26=498    27=516    28=319    29=594    30=387 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010214 seconds 
1000 transitions using 10 leapfrog steps per transition would take 102.14 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48253.200             1.000            1.000 
   200       -48253.001             0.500            1.000 
   300       -48254.489             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  31.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=554    segment 2=574    segment 3=566    segment 4=388    segment 5=364    segment 6=303    segment 7=730    segment 8=392    segment 9=581    segment 10=444    segment 11=558    segment 12=668    segment 13=367    segment 14=215    segment 15=454    segment 16=586    segment 17=384    segment 18=391    segment 19=186    segment 20=430    segment 21=515    segment 22=527    segment 23=354    segment 24=756    segment 25=264    segment 26=530    segment 27=740    segment 28=414    segment 29=526    segment 30=489 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018738 seconds 
1000 transitions using 10 leapfrog steps per transition would take 187.38 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45777.565             1.000            1.000 
   200       -45770.888             0.500            1.000 
   300       -45768.422             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  43.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=554    segment 2=574    segment 3=566    segment 4=388    segment 5=364    segment 6=303    segment 7=730    segment 8=392    segment 9=581    segment 10=444    segment 11=558    segment 12=668    segment 13=367    segment 14=215    segment 15=454    segment 16=586    segment 17=384    segment 18=391    segment 19=186    segment 20=430    segment 21=515    segment 22=527    segment 23=354    segment 24=756    segment 25=264    segment 26=530    segment 27=740    segment 28=414    segment 29=526    segment 30=489 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027575 seconds 
1000 transitions using 10 leapfrog steps per transition would take 275.75 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45812.792             1.000            1.000 
   200       -45792.888             0.500            1.000 
   300       -45781.281             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  50.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=554    segment 2=574    segment 3=566    segment 4=388    segment 5=364    segment 6=303    segment 7=730    segment 8=392    segment 9=581    segment 10=444    segment 11=558    segment 12=668    segment 13=367    segment 14=215    segment 15=454    segment 16=586    segment 17=384    segment 18=391    segment 19=186    segment 20=430    segment 21=515    segment 22=527    segment 23=354    segment 24=756    segment 25=264    segment 26=530    segment 27=740    segment 28=414    segment 29=526    segment 30=489 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036059 seconds 
1000 transitions using 10 leapfrog steps per transition would take 360.59 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45856.533             1.000            1.000 
   200       -45839.061             0.500            1.000 
   300       -45830.023             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  67.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=554    segment 2=574    segment 3=566    segment 4=388    segment 5=364    segment 6=303    segment 7=730    segment 8=392    segment 9=581    segment 10=444    segment 11=558    segment 12=668    segment 13=367    segment 14=215    segment 15=454    segment 16=586    segment 17=384    segment 18=391    segment 19=186    segment 20=430    segment 21=515    segment 22=527    segment 23=354    segment 24=756    segment 25=264    segment 26=530    segment 27=740    segment 28=414    segment 29=526    segment 30=489 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048551 seconds 
1000 transitions using 10 leapfrog steps per transition would take 485.51 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45889.216             1.000            1.000 
   200       -45873.797             0.500            1.000 
   300       -45862.367             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  87.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=554    segment 2=574    segment 3=566    segment 4=388    segment 5=364    segment 6=303    segment 7=730    segment 8=392    segment 9=581    segment 10=444    segment 11=558    segment 12=668    segment 13=367    segment 14=215    segment 15=454    segment 16=586    segment 17=384    segment 18=391    segment 19=186    segment 20=430    segment 21=515    segment 22=527    segment 23=354    segment 24=756    segment 25=264    segment 26=530    segment 27=740    segment 28=414    segment 29=526    segment 30=489 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:1" "2:2" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:2" "2:2"
[13] "2:0" "2:0" "2:1" "2:2" "2:2" "2:1" "2:0" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028353 seconds 
1000 transitions using 10 leapfrog steps per transition would take 283.53 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45827.402             1.000            1.000 
   200       -45816.467             0.500            1.000 
   300       -45811.916             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  51.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=554    segment 2=574    segment 3=566    segment 4=388    segment 5=364    segment 6=303    segment 7=730    segment 8=392    segment 9=581    segment 10=444    segment 11=558    segment 12=668    segment 13=367    segment 14=215    segment 15=454    segment 16=586    segment 17=384    segment 18=391    segment 19=186    segment 20=430    segment 21=515    segment 22=527    segment 23=354    segment 24=756    segment 25=264    segment 26=530    segment 27=740    segment 28=414    segment 29=526    segment 30=489 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=594    3=590    4=407    5=378    6=313    7=754    8=415    9=612    10=454    11=593    12=689    13=378    14=218    15=476    16=604    17=404    18=408    19=193    20=447    21=539    22=542    23=369    24=792    25=269    26=546    27=772    28=430    29=556    30=513 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.009491 seconds 
1000 transitions using 10 leapfrog steps per transition would take 94.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46758.247             1.000            1.000 
   200       -46756.408             0.500            1.000 
   300       -46756.166             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=561    segment 2=208    segment 3=658    segment 4=695    segment 5=389    segment 6=330    segment 7=525    segment 8=357    segment 9=301    segment 10=572    segment 11=220    segment 12=471    segment 13=650    segment 14=455    segment 15=253    segment 16=405    segment 17=651    segment 18=735    segment 19=706    segment 20=529    segment 21=328    segment 22=410    segment 23=399    segment 24=548    segment 25=301    segment 26=650    segment 27=399    segment 28=322    segment 29=407    segment 30=556 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019107 seconds 
1000 transitions using 10 leapfrog steps per transition would take 191.07 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44932.868             1.000            1.000 
   200       -44932.996             0.500            1.000 
   300       -44926.162             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  44.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=561    segment 2=208    segment 3=658    segment 4=695    segment 5=389    segment 6=330    segment 7=525    segment 8=357    segment 9=301    segment 10=572    segment 11=220    segment 12=471    segment 13=650    segment 14=455    segment 15=253    segment 16=405    segment 17=651    segment 18=735    segment 19=706    segment 20=529    segment 21=328    segment 22=410    segment 23=399    segment 24=548    segment 25=301    segment 26=650    segment 27=399    segment 28=322    segment 29=407    segment 30=556 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027636 seconds 
1000 transitions using 10 leapfrog steps per transition would take 276.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44981.333             1.000            1.000 
   200       -44978.249             0.500            1.000 
   300       -44968.022             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=561    segment 2=208    segment 3=658    segment 4=695    segment 5=389    segment 6=330    segment 7=525    segment 8=357    segment 9=301    segment 10=572    segment 11=220    segment 12=471    segment 13=650    segment 14=455    segment 15=253    segment 16=405    segment 17=651    segment 18=735    segment 19=706    segment 20=529    segment 21=328    segment 22=410    segment 23=399    segment 24=548    segment 25=301    segment 26=650    segment 27=399    segment 28=322    segment 29=407    segment 30=556 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.035475 seconds 
1000 transitions using 10 leapfrog steps per transition would take 354.75 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44980.464             1.000            1.000 
   200       -44970.355             0.500            1.000 
   300       -44951.627             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  59.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=561    segment 2=208    segment 3=658    segment 4=695    segment 5=389    segment 6=330    segment 7=525    segment 8=357    segment 9=301    segment 10=572    segment 11=220    segment 12=471    segment 13=650    segment 14=455    segment 15=253    segment 16=405    segment 17=651    segment 18=735    segment 19=706    segment 20=529    segment 21=328    segment 22=410    segment 23=399    segment 24=548    segment 25=301    segment 26=650    segment 27=399    segment 28=322    segment 29=407    segment 30=556 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.047587 seconds 
1000 transitions using 10 leapfrog steps per transition would take 475.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45015.728             1.000            1.000 
   200       -45003.270             0.500            1.000 
   300       -45012.846             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  70.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=561    segment 2=208    segment 3=658    segment 4=695    segment 5=389    segment 6=330    segment 7=525    segment 8=357    segment 9=301    segment 10=572    segment 11=220    segment 12=471    segment 13=650    segment 14=455    segment 15=253    segment 16=405    segment 17=651    segment 18=735    segment 19=706    segment 20=529    segment 21=328    segment 22=410    segment 23=399    segment 24=548    segment 25=301    segment 26=650    segment 27=399    segment 28=322    segment 29=407    segment 30=556 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:0" "2:1"
[13] "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:1" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019277 seconds 
1000 transitions using 10 leapfrog steps per transition would take 192.77 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44940.060             1.000            1.000 
   200       -44929.231             0.500            1.000 
   300       -44929.260             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=561    segment 2=208    segment 3=658    segment 4=695    segment 5=389    segment 6=330    segment 7=525    segment 8=357    segment 9=301    segment 10=572    segment 11=220    segment 12=471    segment 13=650    segment 14=455    segment 15=253    segment 16=405    segment 17=651    segment 18=735    segment 19=706    segment 20=529    segment 21=328    segment 22=410    segment 23=399    segment 24=548    segment 25=301    segment 26=650    segment 27=399    segment 28=322    segment 29=407    segment 30=556 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=579    2=210    3=685    4=718    5=409    6=345    7=545    8=367    9=321    10=596    11=222    12=484    13=676    14=475    15=265    16=419    17=678    18=760    19=740    20=548    21=339    22=428    23=419    24=565    25=308    26=676    27=415    28=332    29=422    30=578 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010132 seconds 
1000 transitions using 10 leapfrog steps per transition would take 101.32 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44967.184             1.000            1.000 
   200       -44964.897             0.500            1.000 
   300       -44965.443             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  32.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=230    segment 2=607    segment 3=560    segment 4=417    segment 5=735    segment 6=243    segment 7=295    segment 8=524    segment 9=544    segment 10=443    segment 11=502    segment 12=635    segment 13=448    segment 14=340    segment 15=398    segment 16=402    segment 17=626    segment 18=739    segment 19=450    segment 20=489    segment 21=589    segment 22=275    segment 23=216    segment 24=415    segment 25=263    segment 26=454    segment 27=352    segment 28=554    segment 29=453    segment 30=433 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018384 seconds 
1000 transitions using 10 leapfrog steps per transition would take 183.84 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43283.054             1.000            1.000 
   200       -43275.878             0.500            1.000 
   300       -43279.859             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  43.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=230    segment 2=607    segment 3=560    segment 4=417    segment 5=735    segment 6=243    segment 7=295    segment 8=524    segment 9=544    segment 10=443    segment 11=502    segment 12=635    segment 13=448    segment 14=340    segment 15=398    segment 16=402    segment 17=626    segment 18=739    segment 19=450    segment 20=489    segment 21=589    segment 22=275    segment 23=216    segment 24=415    segment 25=263    segment 26=454    segment 27=352    segment 28=554    segment 29=453    segment 30=433 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027226 seconds 
1000 transitions using 10 leapfrog steps per transition would take 272.26 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43313.528             1.000            1.000 
   200       -43292.096             0.500            1.000 
   300       -43286.628             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=230    segment 2=607    segment 3=560    segment 4=417    segment 5=735    segment 6=243    segment 7=295    segment 8=524    segment 9=544    segment 10=443    segment 11=502    segment 12=635    segment 13=448    segment 14=340    segment 15=398    segment 16=402    segment 17=626    segment 18=739    segment 19=450    segment 20=489    segment 21=589    segment 22=275    segment 23=216    segment 24=415    segment 25=263    segment 26=454    segment 27=352    segment 28=554    segment 29=453    segment 30=433 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.035597 seconds 
1000 transitions using 10 leapfrog steps per transition would take 355.97 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43360.475             1.000            1.000 
   200       -43355.196             0.500            1.000 
   300       -43350.849             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  63.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=230    segment 2=607    segment 3=560    segment 4=417    segment 5=735    segment 6=243    segment 7=295    segment 8=524    segment 9=544    segment 10=443    segment 11=502    segment 12=635    segment 13=448    segment 14=340    segment 15=398    segment 16=402    segment 17=626    segment 18=739    segment 19=450    segment 20=489    segment 21=589    segment 22=275    segment 23=216    segment 24=415    segment 25=263    segment 26=454    segment 27=352    segment 28=554    segment 29=453    segment 30=433 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.045969 seconds 
1000 transitions using 10 leapfrog steps per transition would take 459.69 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43369.536             1.000            1.000 
   200       -43358.407             0.500            1.000 
   300       -43357.183             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=230    segment 2=607    segment 3=560    segment 4=417    segment 5=735    segment 6=243    segment 7=295    segment 8=524    segment 9=544    segment 10=443    segment 11=502    segment 12=635    segment 13=448    segment 14=340    segment 15=398    segment 16=402    segment 17=626    segment 18=739    segment 19=450    segment 20=489    segment 21=589    segment 22=275    segment 23=216    segment 24=415    segment 25=263    segment 26=454    segment 27=352    segment 28=554    segment 29=453    segment 30=433 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2"
[13] "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:1"
[25] "2:0" "2:1" "2:0" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027262 seconds 
1000 transitions using 10 leapfrog steps per transition would take 272.62 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43290.901             1.000            1.000 
   200       -43285.303             0.500            1.000 
   300       -43285.459             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=230    segment 2=607    segment 3=560    segment 4=417    segment 5=735    segment 6=243    segment 7=295    segment 8=524    segment 9=544    segment 10=443    segment 11=502    segment 12=635    segment 13=448    segment 14=340    segment 15=398    segment 16=402    segment 17=626    segment 18=739    segment 19=450    segment 20=489    segment 21=589    segment 22=275    segment 23=216    segment 24=415    segment 25=263    segment 26=454    segment 27=352    segment 28=554    segment 29=453    segment 30=433 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=238    2=629    3=576    4=439    5=755    6=246    7=302    8=539    9=571    10=463    11=520    12=661    13=460    14=354    15=414    16=418    17=653    18=766    19=467    20=509    21=609    22=284    23=224    24=429    25=270    26=470    27=360    28=576    29=474    30=448 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010124 seconds 
1000 transitions using 10 leapfrog steps per transition would take 101.24 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45416.665             1.000            1.000 
   200       -45407.189             0.500            1.000 
   300       -45406.915             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  30.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=611    segment 2=602    segment 3=366    segment 4=344    segment 5=457    segment 6=531    segment 7=668    segment 8=582    segment 9=578    segment 10=352    segment 11=270    segment 12=317    segment 13=582    segment 14=298    segment 15=360    segment 16=538    segment 17=262    segment 18=248    segment 19=387    segment 20=655    segment 21=615    segment 22=527    segment 23=610    segment 24=357    segment 25=548    segment 26=321    segment 27=439    segment 28=246    segment 29=576    segment 30=504 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018589 seconds 
1000 transitions using 10 leapfrog steps per transition would take 185.89 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44777.006             1.000            1.000 
   200       -44772.510             0.500            1.000 
   300       -44771.911             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  38.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=611    segment 2=602    segment 3=366    segment 4=344    segment 5=457    segment 6=531    segment 7=668    segment 8=582    segment 9=578    segment 10=352    segment 11=270    segment 12=317    segment 13=582    segment 14=298    segment 15=360    segment 16=538    segment 17=262    segment 18=248    segment 19=387    segment 20=655    segment 21=615    segment 22=527    segment 23=610    segment 24=357    segment 25=548    segment 26=321    segment 27=439    segment 28=246    segment 29=576    segment 30=504 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027341 seconds 
1000 transitions using 10 leapfrog steps per transition would take 273.41 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44820.345             1.000            1.000 
   200       -44813.829             0.500            1.000 
   300       -44817.881             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  49.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=611    segment 2=602    segment 3=366    segment 4=344    segment 5=457    segment 6=531    segment 7=668    segment 8=582    segment 9=578    segment 10=352    segment 11=270    segment 12=317    segment 13=582    segment 14=298    segment 15=360    segment 16=538    segment 17=262    segment 18=248    segment 19=387    segment 20=655    segment 21=615    segment 22=527    segment 23=610    segment 24=357    segment 25=548    segment 26=321    segment 27=439    segment 28=246    segment 29=576    segment 30=504 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.035476 seconds 
1000 transitions using 10 leapfrog steps per transition would take 354.76 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44800.162             1.000            1.000 
   200       -44785.840             0.500            1.000 
   300       -44785.237             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  58.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=611    segment 2=602    segment 3=366    segment 4=344    segment 5=457    segment 6=531    segment 7=668    segment 8=582    segment 9=578    segment 10=352    segment 11=270    segment 12=317    segment 13=582    segment 14=298    segment 15=360    segment 16=538    segment 17=262    segment 18=248    segment 19=387    segment 20=655    segment 21=615    segment 22=527    segment 23=610    segment 24=357    segment 25=548    segment 26=321    segment 27=439    segment 28=246    segment 29=576    segment 30=504 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.046216 seconds 
1000 transitions using 10 leapfrog steps per transition would take 462.16 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Iteration: 250 / 250 [100%]  (Adaptation) 
Success! Found best value [eta = 0.1]. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45219.701             1.000            1.000 
   200       -45021.633             0.502            1.000 
   300       -44939.347             0.335            0.004   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=611    segment 2=602    segment 3=366    segment 4=344    segment 5=457    segment 6=531    segment 7=668    segment 8=582    segment 9=578    segment 10=352    segment 11=270    segment 12=317    segment 13=582    segment 14=298    segment 15=360    segment 16=538    segment 17=262    segment 18=248    segment 19=387    segment 20=655    segment 21=615    segment 22=527    segment 23=610    segment 24=357    segment 25=548    segment 26=321    segment 27=439    segment 28=246    segment 29=576    segment 30=504 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.4950000 0.9900000
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:0" "2:0" "2:1" "2:1" "2:2" "2:1" "2:2" "2:0" "2:0" "2:0"
[13] "2:2" "2:0" "2:0" "2:2" "2:0" "2:0" "2:0" "2:2" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.017836 seconds 
1000 transitions using 10 leapfrog steps per transition would take 178.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44782.842             1.000            1.000 
   200       -44774.497             0.500            1.000 
   300       -44773.190             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  38.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=611    segment 2=602    segment 3=366    segment 4=344    segment 5=457    segment 6=531    segment 7=668    segment 8=582    segment 9=578    segment 10=352    segment 11=270    segment 12=317    segment 13=582    segment 14=298    segment 15=360    segment 16=538    segment 17=262    segment 18=248    segment 19=387    segment 20=655    segment 21=615    segment 22=527    segment 23=610    segment 24=357    segment 25=548    segment 26=321    segment 27=439    segment 28=246    segment 29=576    segment 30=504 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=633    2=627    3=387    4=357    5=478    6=554    7=687    8=609    9=597    10=364    11=279    12=325    13=599    14=306    15=374    16=559    17=268    18=252    19=398    20=678    21=640    22=549    23=637    24=373    25=571    26=344    27=458    28=256    29=599    30=524 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010732 seconds 
1000 transitions using 10 leapfrog steps per transition would take 107.32 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48909.964             1.000            1.000 
   200       -48913.092             0.500            1.000 
   300       -48909.568             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  32.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=711    segment 2=551    segment 3=535    segment 4=431    segment 5=547    segment 6=386    segment 7=230    segment 8=428    segment 9=256    segment 10=543    segment 11=407    segment 12=404    segment 13=427    segment 14=482    segment 15=602    segment 16=478    segment 17=255    segment 18=570    segment 19=425    segment 20=494    segment 21=245    segment 22=419    segment 23=389    segment 24=433    segment 25=560    segment 26=426    segment 27=587    segment 28=764    segment 29=659    segment 30=732 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018636 seconds 
1000 transitions using 10 leapfrog steps per transition would take 186.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46460.629             1.000            1.000 
   200       -46464.351             0.500            1.000 
   300       -46459.829             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=711    segment 2=551    segment 3=535    segment 4=431    segment 5=547    segment 6=386    segment 7=230    segment 8=428    segment 9=256    segment 10=543    segment 11=407    segment 12=404    segment 13=427    segment 14=482    segment 15=602    segment 16=478    segment 17=255    segment 18=570    segment 19=425    segment 20=494    segment 21=245    segment 22=419    segment 23=389    segment 24=433    segment 25=560    segment 26=426    segment 27=587    segment 28=764    segment 29=659    segment 30=732 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028054 seconds 
1000 transitions using 10 leapfrog steps per transition would take 280.54 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46507.937             1.000            1.000 
   200       -46503.941             0.500            1.000 
   300       -46499.954             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  60.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=711    segment 2=551    segment 3=535    segment 4=431    segment 5=547    segment 6=386    segment 7=230    segment 8=428    segment 9=256    segment 10=543    segment 11=407    segment 12=404    segment 13=427    segment 14=482    segment 15=602    segment 16=478    segment 17=255    segment 18=570    segment 19=425    segment 20=494    segment 21=245    segment 22=419    segment 23=389    segment 24=433    segment 25=560    segment 26=426    segment 27=587    segment 28=764    segment 29=659    segment 30=732 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036689 seconds 
1000 transitions using 10 leapfrog steps per transition would take 366.89 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46514.243             1.000            1.000 
   200       -46490.999             0.500            1.000 
   300       -46481.122             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  65.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=711    segment 2=551    segment 3=535    segment 4=431    segment 5=547    segment 6=386    segment 7=230    segment 8=428    segment 9=256    segment 10=543    segment 11=407    segment 12=404    segment 13=427    segment 14=482    segment 15=602    segment 16=478    segment 17=255    segment 18=570    segment 19=425    segment 20=494    segment 21=245    segment 22=419    segment 23=389    segment 24=433    segment 25=560    segment 26=426    segment 27=587    segment 28=764    segment 29=659    segment 30=732 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.048853 seconds 
1000 transitions using 10 leapfrog steps per transition would take 488.53 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46553.796             1.000            1.000 
   200       -46536.765             0.500            1.000 
   300       -46524.627             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  87.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=711    segment 2=551    segment 3=535    segment 4=431    segment 5=547    segment 6=386    segment 7=230    segment 8=428    segment 9=256    segment 10=543    segment 11=407    segment 12=404    segment 13=427    segment 14=482    segment 15=602    segment 16=478    segment 17=255    segment 18=570    segment 19=425    segment 20=494    segment 21=245    segment 22=419    segment 23=389    segment 24=433    segment 25=560    segment 26=426    segment 27=587    segment 28=764    segment 29=659    segment 30=732 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.3311037 0.6622074
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:1" "2:2" "2:1"
[13] "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0" "2:1" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019089 seconds 
1000 transitions using 10 leapfrog steps per transition would take 190.89 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46462.228             1.000            1.000 
   200       -46460.543             0.500            1.000 
   300       -46459.587             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=711    segment 2=551    segment 3=535    segment 4=431    segment 5=547    segment 6=386    segment 7=230    segment 8=428    segment 9=256    segment 10=543    segment 11=407    segment 12=404    segment 13=427    segment 14=482    segment 15=602    segment 16=478    segment 17=255    segment 18=570    segment 19=425    segment 20=494    segment 21=245    segment 22=419    segment 23=389    segment 24=433    segment 25=560    segment 26=426    segment 27=587    segment 28=764    segment 29=659    segment 30=732 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=731    2=580    3=558    4=453    5=570    6=408    7=232    8=444    9=261    10=570    11=421    12=418    13=445    14=506    15=625    16=510    17=260    18=584    19=451    20=516    21=252    22=430    23=410    24=451    25=579    26=445    27=612    28=793    29=680    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010589 seconds 
1000 transitions using 10 leapfrog steps per transition would take 105.89 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45918.770             1.000            1.000 
   200       -45899.263             0.500            1.000 
   300       -45901.496             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  31.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=750    segment 2=421    segment 3=740    segment 4=314    segment 5=509    segment 6=333    segment 7=354    segment 8=421    segment 9=502    segment 10=658    segment 11=592    segment 12=298    segment 13=311    segment 14=739    segment 15=419    segment 16=697    segment 17=654    segment 18=247    segment 19=666    segment 20=374    segment 21=436    segment 22=423    segment 23=263    segment 24=380    segment 25=347    segment 26=321    segment 27=230    segment 28=645    segment 29=406    segment 30=734 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019134 seconds 
1000 transitions using 10 leapfrog steps per transition would take 191.34 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43567.214             1.000            1.000 
   200       -43567.204             0.500            1.000 
   300       -43566.030             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=750    segment 2=421    segment 3=740    segment 4=314    segment 5=509    segment 6=333    segment 7=354    segment 8=421    segment 9=502    segment 10=658    segment 11=592    segment 12=298    segment 13=311    segment 14=739    segment 15=419    segment 16=697    segment 17=654    segment 18=247    segment 19=666    segment 20=374    segment 21=436    segment 22=423    segment 23=263    segment 24=380    segment 25=347    segment 26=321    segment 27=230    segment 28=645    segment 29=406    segment 30=734 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027394 seconds 
1000 transitions using 10 leapfrog steps per transition would take 273.94 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43614.168             1.000            1.000 
   200       -43619.865             0.500            1.000 
   300       -43614.853             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  50.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=750    segment 2=421    segment 3=740    segment 4=314    segment 5=509    segment 6=333    segment 7=354    segment 8=421    segment 9=502    segment 10=658    segment 11=592    segment 12=298    segment 13=311    segment 14=739    segment 15=419    segment 16=697    segment 17=654    segment 18=247    segment 19=666    segment 20=374    segment 21=436    segment 22=423    segment 23=263    segment 24=380    segment 25=347    segment 26=321    segment 27=230    segment 28=645    segment 29=406    segment 30=734 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03572 seconds 
1000 transitions using 10 leapfrog steps per transition would take 357.2 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43644.169             1.000            1.000 
   200       -43622.632             0.500            1.000 
   300       -43622.716             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=750    segment 2=421    segment 3=740    segment 4=314    segment 5=509    segment 6=333    segment 7=354    segment 8=421    segment 9=502    segment 10=658    segment 11=592    segment 12=298    segment 13=311    segment 14=739    segment 15=419    segment 16=697    segment 17=654    segment 18=247    segment 19=666    segment 20=374    segment 21=436    segment 22=423    segment 23=263    segment 24=380    segment 25=347    segment 26=321    segment 27=230    segment 28=645    segment 29=406    segment 30=734 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.047099 seconds 
1000 transitions using 10 leapfrog steps per transition would take 470.99 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43608.782             1.000            1.000 
   200       -43597.177             0.500            1.000 
   300       -43594.499             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=750    segment 2=421    segment 3=740    segment 4=314    segment 5=509    segment 6=333    segment 7=354    segment 8=421    segment 9=502    segment 10=658    segment 11=592    segment 12=298    segment 13=311    segment 14=739    segment 15=419    segment 16=697    segment 17=654    segment 18=247    segment 19=666    segment 20=374    segment 21=436    segment 22=423    segment 23=263    segment 24=380    segment 25=347    segment 26=321    segment 27=230    segment 28=645    segment 29=406    segment 30=734 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.4950000 0.9900000
[25,] 0.4950000 0.9900000
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:1" "2:0"
[13] "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:0"
[25] "2:0" "2:0" "2:0" "2:2" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019339 seconds 
1000 transitions using 10 leapfrog steps per transition would take 193.39 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43571.244             1.000            1.000 
   200       -43564.406             0.500            1.000 
   300       -43567.187             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=750    segment 2=421    segment 3=740    segment 4=314    segment 5=509    segment 6=333    segment 7=354    segment 8=421    segment 9=502    segment 10=658    segment 11=592    segment 12=298    segment 13=311    segment 14=739    segment 15=419    segment 16=697    segment 17=654    segment 18=247    segment 19=666    segment 20=374    segment 21=436    segment 22=423    segment 23=263    segment 24=380    segment 25=347    segment 26=321    segment 27=230    segment 28=645    segment 29=406    segment 30=734 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=787    2=442    3=771    4=324    5=536    6=344    7=368    8=440    9=522    10=685    11=610    12=305    13=327    14=774    15=432    16=723    17=676    18=253    19=693    20=391    21=458    22=444    23=274    24=400    25=360    26=332    27=233    28=679    29=434    30=764 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011767 seconds 
1000 transitions using 10 leapfrog steps per transition would take 117.67 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49917.830             1.000            1.000 
   200       -49915.059             0.500            1.000 
   300       -49913.836             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=291    segment 2=723    segment 3=419    segment 4=489    segment 5=746    segment 6=532    segment 7=393    segment 8=407    segment 9=397    segment 10=360    segment 11=189    segment 12=407    segment 13=730    segment 14=545    segment 15=390    segment 16=408    segment 17=546    segment 18=727    segment 19=626    segment 20=484    segment 21=464    segment 22=731    segment 23=214    segment 24=584    segment 25=466    segment 26=561    segment 27=377    segment 28=515    segment 29=518    segment 30=462 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019168 seconds 
1000 transitions using 10 leapfrog steps per transition would take 191.68 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47373.740             1.000            1.000 
   200       -47375.377             0.500            1.000 
   300       -47372.456             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=291    segment 2=723    segment 3=419    segment 4=489    segment 5=746    segment 6=532    segment 7=393    segment 8=407    segment 9=397    segment 10=360    segment 11=189    segment 12=407    segment 13=730    segment 14=545    segment 15=390    segment 16=408    segment 17=546    segment 18=727    segment 19=626    segment 20=484    segment 21=464    segment 22=731    segment 23=214    segment 24=584    segment 25=466    segment 26=561    segment 27=377    segment 28=515    segment 29=518    segment 30=462 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029405 seconds 
1000 transitions using 10 leapfrog steps per transition would take 294.05 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47410.132             1.000            1.000 
   200       -47389.090             0.500            1.000 
   300       -47380.576             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  61.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=291    segment 2=723    segment 3=419    segment 4=489    segment 5=746    segment 6=532    segment 7=393    segment 8=407    segment 9=397    segment 10=360    segment 11=189    segment 12=407    segment 13=730    segment 14=545    segment 15=390    segment 16=408    segment 17=546    segment 18=727    segment 19=626    segment 20=484    segment 21=464    segment 22=731    segment 23=214    segment 24=584    segment 25=466    segment 26=561    segment 27=377    segment 28=515    segment 29=518    segment 30=462 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.037584 seconds 
1000 transitions using 10 leapfrog steps per transition would take 375.84 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47424.857             1.000            1.000 
   200       -47419.851             0.500            1.000 
   300       -47412.526             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  75.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=291    segment 2=723    segment 3=419    segment 4=489    segment 5=746    segment 6=532    segment 7=393    segment 8=407    segment 9=397    segment 10=360    segment 11=189    segment 12=407    segment 13=730    segment 14=545    segment 15=390    segment 16=408    segment 17=546    segment 18=727    segment 19=626    segment 20=484    segment 21=464    segment 22=731    segment 23=214    segment 24=584    segment 25=466    segment 26=561    segment 27=377    segment 28=515    segment 29=518    segment 30=462 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.047645 seconds 
1000 transitions using 10 leapfrog steps per transition would take 476.45 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47476.761             1.000            1.000 
   200       -47449.718             0.500            1.000 
   300       -47428.608             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=291    segment 2=723    segment 3=419    segment 4=489    segment 5=746    segment 6=532    segment 7=393    segment 8=407    segment 9=397    segment 10=360    segment 11=189    segment 12=407    segment 13=730    segment 14=545    segment 15=390    segment 16=408    segment 17=546    segment 18=727    segment 19=626    segment 20=484    segment 21=464    segment 22=731    segment 23=214    segment 24=584    segment 25=466    segment 26=561    segment 27=377    segment 28=515    segment 29=518    segment 30=462 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.2487437 0.4974874
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2"
[25] "2:2" "2:1" "2:0" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019738 seconds 
1000 transitions using 10 leapfrog steps per transition would take 197.38 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47378.096             1.000            1.000 
   200       -47373.392             0.500            1.000 
   300       -47371.358             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  53.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=291    segment 2=723    segment 3=419    segment 4=489    segment 5=746    segment 6=532    segment 7=393    segment 8=407    segment 9=397    segment 10=360    segment 11=189    segment 12=407    segment 13=730    segment 14=545    segment 15=390    segment 16=408    segment 17=546    segment 18=727    segment 19=626    segment 20=484    segment 21=464    segment 22=731    segment 23=214    segment 24=584    segment 25=466    segment 26=561    segment 27=377    segment 28=515    segment 29=518    segment 30=462 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=304    2=753    3=437    4=513    5=768    6=550    7=409    8=426    9=413    10=373    11=191    12=420    13=761    14=563    15=400    16=424    17=565    18=752    19=650    20=506    21=480    22=766    23=216    24=602    25=487    26=581    27=395    28=530    29=539    30=478 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=188    2=490    3=401    4=348    5=541    6=486    7=669    8=212    9=669    10=442    11=446    12=660    13=218    14=637    15=441    16=424    17=280    18=543    19=344    20=478    21=328    22=489    23=483    24=549    25=647    26=594    27=273    28=271    29=344    30=298 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.008688 seconds 
1000 transitions using 10 leapfrog steps per transition would take 86.88 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42264.097             1.000            1.000 
   200       -42269.645             0.500            1.000 
   300       -42262.515             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  28.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=188    segment 2=472    segment 3=382    segment 4=336    segment 5=512    segment 6=471    segment 7=649    segment 8=210    segment 9=642    segment 10=424    segment 11=430    segment 12=634    segment 13=213    segment 14=613    segment 15=423    segment 16=397    segment 17=271    segment 18=528    segment 19=334    segment 20=457    segment 21=311    segment 22=466    segment 23=469    segment 24=527    segment 25=612    segment 26=567    segment 27=264    segment 28=266    segment 29=329    segment 30=290 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=188    2=490    3=401    4=348    5=541    6=486    7=669    8=212    9=669    10=442    11=446    12=660    13=218    14=637    15=441    16=424    17=280    18=543    19=344    20=478    21=328    22=489    23=483    24=549    25=647    26=594    27=273    28=271    29=344    30=298 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016524 seconds 
1000 transitions using 10 leapfrog steps per transition would take 165.24 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41027.675             1.000            1.000 
   200       -41029.160             0.500            1.000 
   300       -41022.289             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  40.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=188    segment 2=472    segment 3=382    segment 4=336    segment 5=512    segment 6=471    segment 7=649    segment 8=210    segment 9=642    segment 10=424    segment 11=430    segment 12=634    segment 13=213    segment 14=613    segment 15=423    segment 16=397    segment 17=271    segment 18=528    segment 19=334    segment 20=457    segment 21=311    segment 22=466    segment 23=469    segment 24=527    segment 25=612    segment 26=567    segment 27=264    segment 28=266    segment 29=329    segment 30=290 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=188    2=490    3=401    4=348    5=541    6=486    7=669    8=212    9=669    10=442    11=446    12=660    13=218    14=637    15=441    16=424    17=280    18=543    19=344    20=478    21=328    22=489    23=483    24=549    25=647    26=594    27=273    28=271    29=344    30=298 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.025303 seconds 
1000 transitions using 10 leapfrog steps per transition would take 253.03 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41076.063             1.000            1.000 
   200       -41066.342             0.500            1.000 
   300       -41066.937             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=188    segment 2=472    segment 3=382    segment 4=336    segment 5=512    segment 6=471    segment 7=649    segment 8=210    segment 9=642    segment 10=424    segment 11=430    segment 12=634    segment 13=213    segment 14=613    segment 15=423    segment 16=397    segment 17=271    segment 18=528    segment 19=334    segment 20=457    segment 21=311    segment 22=466    segment 23=469    segment 24=527    segment 25=612    segment 26=567    segment 27=264    segment 28=266    segment 29=329    segment 30=290 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=188    2=490    3=401    4=348    5=541    6=486    7=669    8=212    9=669    10=442    11=446    12=660    13=218    14=637    15=441    16=424    17=280    18=543    19=344    20=478    21=328    22=489    23=483    24=549    25=647    26=594    27=273    28=271    29=344    30=298 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:1" "2:1" "2:2"
[13] "2:0" "2:2" "2:2" "2:1" "2:0" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:2" "2:2" "2:0" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.033001 seconds 
1000 transitions using 10 leapfrog steps per transition would take 330.01 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41096.245             1.000            1.000 
   200       -41084.483             0.500            1.000 
   300       -41077.766             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  54.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=188    segment 2=472    segment 3=382    segment 4=336    segment 5=512    segment 6=471    segment 7=649    segment 8=210    segment 9=642    segment 10=424    segment 11=430    segment 12=634    segment 13=213    segment 14=613    segment 15=423    segment 16=397    segment 17=271    segment 18=528    segment 19=334    segment 20=457    segment 21=311    segment 22=466    segment 23=469    segment 24=527    segment 25=612    segment 26=567    segment 27=264    segment 28=266    segment 29=329    segment 30=290 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
