set.seed(1234567)
rm(list = ls())
library(rRACES)
require(dplyr)
library(knitr)
library(ggplot2)
library(patchwork)
sim <- new(Simulation, "Border Growth")
# Set the "border" growth model
sim$duplicate_internal_cells <- TRUE
# Set the death activation level to avoid drift
sim$death_activation_level <- 50
# Add mutants
sim$update_tissue(100, 100)
sim$add_mutant(name = "A", growth_rates = 0.1, death_rates = 0)
sim$place_cell("A", 50, 50)
sim$run_up_to_time(500)
n_w <- n_h <- 40
ncells <- 0.9*n_w*n_h
bbox <- sim$search_sample(c("A" = ncells), n_w, n_h)
sim$sample_cells("SA", bbox$lower_corner, bbox$upper_corner)
plot_tissue(sim, num_of_bins = 100)
# Add "B" mutant
sim$add_mutant(name="B", growth_rates = 0.5, death_rates=.01)
sim$mutate_progeny(sim$choose_cell_in("A"), "B")
sim$update_rates("A", c(growth = 0, death=.01))
sim$run_up_to_size("B", 100*100*.9)
plot_tissue(sim, num_of_bins = 100)
# Add "C" mutant
sim$add_mutant(name="C", growth_rates = 0.5, death_rates=.01)
sim$mutate_progeny(sim$choose_cell_in("B"), "C")
sim$update_rates("B", c(growth = 0, death=.01))
sim$run_up_to_size("C", 9000)
plot_tissue(sim, num_of_bins = 100)
# Sample cells ####
n_w <- n_h <- 40
ncells <- 0.9*n_w*n_h
bbox <- sim$search_sample(c("C" = ncells), n_w, n_h)
sim$sample_cells("SC", bbox$lower_corner, bbox$upper_corner)
plot_tissue(sim, num_of_bins = 100)
forest <- sim$get_samples_forest()
# build a mutation engine and place all the files in the directory "Test" ####
m_engine <- build_mutation_engine(setup_code = "demo")
#To observe the different nature of the two events will make the deletion span a smaller segment than the amplification.
# Define Mutants ####
# B, son of A, will have a deletion
# C, son of B, will have an amplification
# We remove passenger CNA
m_engine$add_mutant(
mutant_name = "A",
passenger_rates = c(SNV = 1e-7, CNA = 0),
driver_SNVs = c(SNV("22", 10510210, "C"))
#driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 10303470,len = 1e7))
)
(3*78)/(1471+(2*78))
50/400
2007400
0.25/2
(2*315)/(2*315+890)
(3*78) / (1471+(2*78))
(3*75)/(1078+(2*75))
(2*637)/(2*637+530)
50/200
25/100
21.2/39.3
getwd()
install.packages("devtools")
install.packages("roxygen2")
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo))
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=TRUE)
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=TRUE)
data
data$karyo
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=TRUE)
results$model_selection_tibble
p <- plotting(results$res_best_K,results$input_data,results$best_K)
ggsave(paste0("./plots/plot_best_K_",names[1],".png"), width = 12, height = 16, device = "png", plot=p)
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
#names <- c("UPN05", "UPN05_LSH")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
#names <- c("UPN05", "UPN05_LSH")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
#names <- c("UPN05", "UPN05_LSH")
#setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
#names <- c("UPN04","UPN04_LSH")
names <- c("UPN05", "UPN05_LSH")
#setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=FALSE)
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
#names <- c("UPN04","UPN04_LSH")
names <- c("UPN05", "UPN05_LSH")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=TRUE)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
# LOAD DATA #
setwd("E:/scratch/CDS_ORFEO/Timing_CDS")
UPN04_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN04/mutations.rds")
UPN05_extra <- readRDS("Data/extra_cnloh/alpha_beta/UPN05/mutations.rds")
UPN04_alpha_beta <- readRDS("Data/alpha_beta/UPN04/mutations.rds")
UPN05_alpha_beta <- readRDS("Data/alpha_beta/UPN05/mutations.rds")
# FILTERING #
UPN04_extra_NV = UPN04_extra %>% filter(timing_classification %in% c("alpha private", "beta"),PASS == TRUE)
UPN05_extra_NV = UPN05_extra %>% filter(timing_classification  %in% c("alpha private", "beta"),chr == "chr1",PASS == TRUE)
UPN04_alpha_beta_NV = UPN04_alpha_beta %>% ungroup %>% filter(timing_classification %in% c("alpha"),PASS == TRUE)
UPN05_alpha_beta_NV = UPN05_alpha_beta %>% filter(timing_classification %in% c("alpha", "beta"),PASS == TRUE)
data_lsh <- list(UPN04 = UPN04_extra_NV, UPN05 = UPN05_extra_NV, UPN04_LSH = UPN04_alpha_beta_NV, UPN05_LSH = UPN05_alpha_beta_NV)
#names <- c("UPN04","UPN04_LSH", "UPN05", "UPN05_LSH")
names <- c("UPN04","UPN04_LSH")
#names <- c("UPN05", "UPN05_LSH")
setwd("E:/scratch/CDS_ORFEO/Timing_CDS/initialization")
data <- dplyr::tibble()
karyo_all <- c()
for(i in 1:length(names)){
data_single <- data_lsh[[names[i]]]
data_single <- data_single %>% rename(karyo = segment.REL,
DP = DP.REL,
NV = NV.REL) %>%
mutate(j = paste0(names[i]),
segment_id = i,
karyo = as.character(karyo),
karyotype = karyo)
karyo <- data_single$karyo[1]
data <- dplyr::bind_rows(data, data_single)
karyo_all <- c(karyo_all, karyo)
}
##### INFERENCE MODEL SEELECTION MULTIPLE K ##################################################################################
results <- fit_model_selection_best_K(data, karyo=karyo_all, purity=0.98, INIT=TRUE)
library(dplyr)
library(ggplot2)
library(patchwork)
library(loo)
library(bayesplot)
library(cmdstanr)
library(factoextra)
library(ppclust)
setwd("C:/Users/sarac/CDS/CopyNumber")
source("./CNTiming/R/simulate_functions.R")
source("./CNTiming/R/fitting_functions.R")
source("./CNTiming/R/plotting_functions.R")
number_events=6
vector_tau<-c(0.01,0.5,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.33,0.33,0.33) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
plot_data <- data_sim %>%
ggplot(mapping = aes(x=NV/DP, fill=as.factor(j))) +
geom_histogram(alpha=.5, position = "identity")
plot_data <- plot_data + facet_wrap(vars(karyotype, tau, j))
plot_data
ggsave("./plots/data.png", plot=plot_data, width = 12, height = 10, device = "png")
# directly
results <- fit_model_selection_best_K(data_sim, data$karyo, purity, INIT = FALSE)
purity = 0.98
purity = 0.99
# directly
results <- fit_model_selection_best_K(data_sim, data$karyo, purity, INIT = FALSE)
warnings()
results$best_K
number_events=6
vector_tau<-c(0.01,0.5,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.33,0.33,0.33) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
purity = 0.99
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
number_events=6
vector_tau<-c(0.01,0.5,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.33,0.33,0.33) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
purity = 0.99
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
number_events=6
vector_tau<-c(0.01,0.5,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.33,0.33,0.33) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
purity = 0.99
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
number_events=6
vector_tau<-c(0.01,0.5,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.33,0.33,0.33) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
purity = 0.99
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
number_events=6
vector_tau<-c(0.01,0.5,0.9)
vector_karyo<-c("2:0", "2:1")
weignths_tau<-c(0.33,0.33,0.33) #vedere se il modello ha trovato le giuste proporzioni --> comp tau proportions
weights_karyo<-c(0.5,0.5)
purity = 0.99
data <- get_taus_karyo(number_events,vector_tau,vector_karyo,weignths_tau,weights_karyo)
all_sim = get_simulation(data$taus,data$karyo, purity=.99)
data_sim <- all_sim
#change j with "segment_name" segment_id with segment_index
plot_data <- data_sim %>%
ggplot(mapping = aes(x=NV/DP, fill=as.factor(j))) +
geom_histogram(alpha=.5, position = "identity")
plot_data <- plot_data + facet_wrap(vars(karyotype, tau, j))
plot_data
ggsave("./plots/data.png", plot=plot_data, width = 12, height = 10, device = "png")
# directly
results <- fit_model_selection_best_K(data_sim, data$karyo, purity, INIT = FALSE)
nrow(data_sim)
nrow(data_sim$j)
data_sim$j
table(data_sim$j)
