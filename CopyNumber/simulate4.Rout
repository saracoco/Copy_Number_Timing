
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(patchwork)
> library(loo)
This is loo version 2.8.0
- Online documentation and vignettes at mc-stan.org/loo
- As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. 
> library(bayesplot)
This is bayesplot version 1.11.1
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
> library(cmdstanr)
This is cmdstanr version 0.8.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /u/cdslab/scocomello/.cmdstan/cmdstan-2.34.1
- CmdStan version: 2.34.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable cmdstanr_no_ver_check=TRUE.
> library(factoextra)
Loading required package: ggplot2
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr) #for plotting add in the right script
> library(fossil) #RI and ARI computation
Loading required package: sp
Loading required package: maps
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> 
> 
> 
> #setwd("C:/Users/sarac/CDS_git/Copy-Number-Timing/CopyNumber/")
> #orfeo
> setwd("/orfeo/cephfs/scratch/cdslab/scocomello/Copy_Number_Timing/CopyNumber")
> 
> original_dir <- getwd()
> 
> source("./CNTiming/R/simulate_functions.R")
> source("./CNTiming/R/fitting_functions.R")
> source("./CNTiming/R/plotting_functions.R")
> 
> 
> self_name = "4"
> new_dir = paste0("../",self_name) #relative path of the new created directory where to save the simulation results
> dir.create(new_dir)
Warning message:
In dir.create(new_dir) : '../4' already exists
> 
> number_events = 30
> number_clocks = 2
> 
> INIT = FALSE
> epsilon = 0.20
> n_simulations = 20
> purity = 0.99
> 
> vector_karyo <- c("2:0", "2:1", "2:2")
> weights_karyo <- c(0.33, 0.33, 0.33)
> 
> 
> # get simulation parametes
> coverage = 100 # average number of reads that align to a reference base
> mu = 1e-4 # mutation rate
> w = 1e-2 # cell division rate
> l = 1e7 # length of the segment
> time_interval = 20
> 
> 
> options(bitmapType='cairo')
> 
> 
> 
> 
> for(i in 1:n_simulations){
+   # Create a unique directory for each iteration
+   iter_dir <- paste0("/simulation_iteration_", i)
+   iter_dir <- paste0(new_dir,iter_dir)
+   dir.create(iter_dir)
+   setwd(iter_dir)
+   dir.create(paste0("./plots"), showWarnings = TRUE)
+   dir.create(paste0("./results"), showWarnings = FALSE)
+   
+   
+ 
+   vector_tau = rep(0, number_clocks)
+   
+   for (j in 1:number_clocks){
+     vector_tau[j] = runif(1, 0)
+     if (j != 1){
+       while (!all ( abs(vector_tau[1:j-1] - vector_tau[j]) > epsilon  )   ){
+         vector_tau[j] = runif(1, 0)
+       }
+     }
+   }
+   weights_tau <- rep(1/number_clocks, number_clocks)
+   
+   data <- get_taus_karyo(number_events, vector_tau, vector_karyo, weights_tau, weights_karyo)
+   simulation_data_all_segments = get_simulation(data$taus, data$karyo, purity, coverage = 100) # the other parameters have default value assigned if none is specified
+   simulation_data_all_segments <- simulation_data_all_segments[order(simulation_data_all_segments$segment_id), ]
+ 
+ 
+   saveRDS(simulation_data_all_segments, "./results/all_sim_input_prepare_input_data.rds")
+ 
+ 
+ 
+   
+   Subtitle <- vector("list", (length(unique(simulation_data_all_segments$segment_id))+1))
+   Subtitle[[1]]  <- paste0("Number of mutations per segment: ")
+   num_mutations_all_segments <- c()
+ 
+     for (i in seq_along(unique(simulation_data_all_segments$segment_id))) {
+     segment <- unique(simulation_data_all_segments$segment_id)[i]
+     num_mutations <- nrow(simulation_data_all_segments %>% filter(segment_id == segment))
+     num_mutations_all_segments <- c(num_mutations_all_segments, num_mutations)
+     Subtitle[[i+1]] <- paste0(segment, "=", num_mutations," ")
+   }
+   
+   Subtitle <- paste(Subtitle, collapse = "   ")
+   cat(Subtitle)
+ 
+   mean_mut <- mean(num_mutations_all_segments)
+   max_mut <- max(num_mutations_all_segments)
+   min_mut <- min(num_mutations_all_segments)
+ 
+   Subtitle_short <- paste0("Average number of mutations per segment: ", mean_mut, "  Minimum number of mutations per segment: ", min_mut, "  Maximum number of mutations per segment: ", max_mut )
+ 
+ 
+   #add statistics on number of mutations from the simulation
+   
+   simulation_params <- list(
+     vector_tau = vector_tau,
+     vector_karyo = vector_karyo,
+     weights_tau = weights_tau,
+     weights_karyo = weights_karyo,
+     taus = data$taus,
+     karyo = data$karyo,
+     purity = purity,
+     number_events = number_events, # = nrow(vector-tau) / nrow(vector_karyo)
+     number_clocks = number_clocks, # = unique(vector_tau)
+     epsilon = epsilon
+   )
+ 
+ 
+ 
+   simulation_data_plot = simulation_data_all_segments %>% mutate (tau = round(tau, 2))
+   plot_data <- simulation_data_plot %>% 
+     ggplot(mapping = aes(x = NV / DP, fill = segment_name)) +
+     geom_histogram(alpha = .5, position = "identity") +
+     labs(
+       title = "Distribution on the VAF for each segment in the simulated data",
+       subtitle = paste0(Subtitle_short)
+     )+
+     facet_wrap(vars(karyotype, tau, segment_name), scales = "free_x", strip.position = "bottom") +
+     theme_minimal() +
+     theme(
+     panel.background = element_rect(fill = "white", color = NA),  # White panel background
+     plot.background = element_rect(fill = "white", color = NA),   # White plot background
+     strip.background = element_rect(fill = "white", color = NA),  # White strip background
+     strip.placement = "outside",   # Place facet labels outside
+     axis.text.x = element_text(angle = 360, hjust = 1, color = "black", size = 8),  # Rotate and adjust x-axis text
+     axis.ticks.x = element_line(color = "black"),  # Black x-axis ticks
+     panel.spacing = unit(1, "lines"),  # Adjust space between facets
+     strip.text.x = element_text(size = 10, color = "black"),  # Adjust and color strip text
+     axis.line = element_line(color = "black"),  # Black axis lines
+     axis.title.x = element_text(color = "black"),  # Black x-axis title
+     axis.title.y = element_text(color = "black")   # Black y-axis title
+   )
+ 
+ 
+   #save plot of the simulated data in which we can see each single segment VAF distribution
+   ggsave("./plots/simulation_data.png", plot = plot_data, width = 12 + simulation_params$number_events, height = 10 + simulation_params$number_events + (simulation_params$number_events/1.3), limitsize = FALSE,   device = png) 
+   #simulation_params can be substituted in relation with simulation_data variables
+   
+   
+   #in "fit model selection best K" the plots for each K inference is directly saved 
+   results <- fit_model_selection_best_K(simulation_data_all_segments, data$karyo, purity, INIT = INIT, simulation_params = simulation_params)
+   saveRDS(results, paste0("./results/results_simulation",i,".rds"))
+   
+ 
+   
+   
+   
+   model_selection_plot = plotting_model_selection(results)
+   model_selection_plot
+   ggsave("./plots/model_selection_plot.png", plot = model_selection_plot, width = 12, height = 10,  device = png)
+   
+   model_selection <- results$model_selection_tibble
+   saveRDS(model_selection, "./results/model_selection.rds")
+   
+ 
+   
+   setwd(original_dir)
+   
+ }
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011495 seconds 
1000 transitions using 10 leapfrog steps per transition would take 114.95 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44800.438             1.000            1.000 
   200       -44799.127             0.500            1.000 
   300       -44812.011             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  33.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=447    segment 2=366    segment 3=268    segment 4=475    segment 5=250    segment 6=491    segment 7=555    segment 8=369    segment 9=569    segment 10=515    segment 11=505    segment 12=334    segment 13=424    segment 14=363    segment 15=534    segment 16=512    segment 17=256    segment 18=737    segment 19=251    segment 20=543    segment 21=459    segment 22=595    segment 23=463    segment 24=304    segment 25=440    segment 26=352    segment 27=415    segment 28=692    segment 29=607    segment 30=454 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019887 seconds 
1000 transitions using 10 leapfrog steps per transition would take 198.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43495.988             1.000            1.000 
   200       -43491.398             0.500            1.000 
   300       -43490.952             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  48.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=447    segment 2=366    segment 3=268    segment 4=475    segment 5=250    segment 6=491    segment 7=555    segment 8=369    segment 9=569    segment 10=515    segment 11=505    segment 12=334    segment 13=424    segment 14=363    segment 15=534    segment 16=512    segment 17=256    segment 18=737    segment 19=251    segment 20=543    segment 21=459    segment 22=595    segment 23=463    segment 24=304    segment 25=440    segment 26=352    segment 27=415    segment 28=692    segment 29=607    segment 30=454 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029715 seconds 
1000 transitions using 10 leapfrog steps per transition would take 297.15 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43547.146             1.000            1.000 
   200       -43539.450             0.500            1.000 
   300       -43529.472             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  53.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=447    segment 2=366    segment 3=268    segment 4=475    segment 5=250    segment 6=491    segment 7=555    segment 8=369    segment 9=569    segment 10=515    segment 11=505    segment 12=334    segment 13=424    segment 14=363    segment 15=534    segment 16=512    segment 17=256    segment 18=737    segment 19=251    segment 20=543    segment 21=459    segment 22=595    segment 23=463    segment 24=304    segment 25=440    segment 26=352    segment 27=415    segment 28=692    segment 29=607    segment 30=454 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.038383 seconds 
1000 transitions using 10 leapfrog steps per transition would take 383.83 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43533.090             1.000            1.000 
   200       -43519.769             0.500            1.000 
   300       -43507.154             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=447    segment 2=366    segment 3=268    segment 4=475    segment 5=250    segment 6=491    segment 7=555    segment 8=369    segment 9=569    segment 10=515    segment 11=505    segment 12=334    segment 13=424    segment 14=363    segment 15=534    segment 16=512    segment 17=256    segment 18=737    segment 19=251    segment 20=543    segment 21=459    segment 22=595    segment 23=463    segment 24=304    segment 25=440    segment 26=352    segment 27=415    segment 28=692    segment 29=607    segment 30=454 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.051428 seconds 
1000 transitions using 10 leapfrog steps per transition would take 514.28 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43551.920             1.000            1.000 
   200       -43550.031             0.500            1.000 
   300       -43550.886             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  75.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=447    segment 2=366    segment 3=268    segment 4=475    segment 5=250    segment 6=491    segment 7=555    segment 8=369    segment 9=569    segment 10=515    segment 11=505    segment 12=334    segment 13=424    segment 14=363    segment 15=534    segment 16=512    segment 17=256    segment 18=737    segment 19=251    segment 20=543    segment 21=459    segment 22=595    segment 23=463    segment 24=304    segment 25=440    segment 26=352    segment 27=415    segment 28=692    segment 29=607    segment 30=454 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1" "2:0" "2:1" "2:2" "2:2" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:0" "2:2" "2:0" "2:1" "2:1" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:2" "2:1" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020461 seconds 
1000 transitions using 10 leapfrog steps per transition would take 204.61 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43499.576             1.000            1.000 
   200       -43494.593             0.500            1.000 
   300       -43493.282             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  47.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=447    segment 2=366    segment 3=268    segment 4=475    segment 5=250    segment 6=491    segment 7=555    segment 8=369    segment 9=569    segment 10=515    segment 11=505    segment 12=334    segment 13=424    segment 14=363    segment 15=534    segment 16=512    segment 17=256    segment 18=737    segment 19=251    segment 20=543    segment 21=459    segment 22=595    segment 23=463    segment 24=304    segment 25=440    segment 26=352    segment 27=415    segment 28=692    segment 29=607    segment 30=454 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=379    3=272    4=492    5=261    6=508    7=576    8=382    9=595    10=535    11=529    12=345    13=435    14=373    15=555    16=533    17=267    18=765    19=262    20=565    21=481    22=618    23=482    24=318    25=467    26=366    27=426    28=719    29=638    30=471 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.013156 seconds 
1000 transitions using 10 leapfrog steps per transition would take 131.56 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50722.402             1.000            1.000 
   200       -50733.037             0.500            1.000 
   300       -50723.331             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  41.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=410    segment 2=546    segment 3=751    segment 4=385    segment 5=388    segment 6=571    segment 7=700    segment 8=578    segment 9=749    segment 10=565    segment 11=346    segment 12=769    segment 13=750    segment 14=582    segment 15=569    segment 16=461    segment 17=462    segment 18=433    segment 19=498    segment 20=540    segment 21=240    segment 22=237    segment 23=442    segment 24=479    segment 25=555    segment 26=379    segment 27=725    segment 28=553    segment 29=207    segment 30=749 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.024933 seconds 
1000 transitions using 10 leapfrog steps per transition would take 249.33 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48751.940             1.000            1.000 
   200       -48744.414             0.500            1.000 
   300       -48741.775             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=410    segment 2=546    segment 3=751    segment 4=385    segment 5=388    segment 6=571    segment 7=700    segment 8=578    segment 9=749    segment 10=565    segment 11=346    segment 12=769    segment 13=750    segment 14=582    segment 15=569    segment 16=461    segment 17=462    segment 18=433    segment 19=498    segment 20=540    segment 21=240    segment 22=237    segment 23=442    segment 24=479    segment 25=555    segment 26=379    segment 27=725    segment 28=553    segment 29=207    segment 30=749 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.033495 seconds 
1000 transitions using 10 leapfrog steps per transition would take 334.95 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Iteration: 250 / 250 [100%]  (Adaptation) 
Success! Found best value [eta = 0.1]. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49757.269             1.000            1.000 
   200       -49200.248             0.506            1.000 
   300       -48947.885             0.339            0.011 
   400       -48844.894             0.255            0.011 
   500       -48812.569             0.204            0.005   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  72.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=410    segment 2=546    segment 3=751    segment 4=385    segment 5=388    segment 6=571    segment 7=700    segment 8=578    segment 9=749    segment 10=565    segment 11=346    segment 12=769    segment 13=750    segment 14=582    segment 15=569    segment 16=461    segment 17=462    segment 18=433    segment 19=498    segment 20=540    segment 21=240    segment 22=237    segment 23=442    segment 24=479    segment 25=555    segment 26=379    segment 27=725    segment 28=553    segment 29=207    segment 30=749 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.043668 seconds 
1000 transitions using 10 leapfrog steps per transition would take 436.68 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48777.805             1.000            1.000 
   200       -48765.302             0.500            1.000 
   300       -48756.636             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  88.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=410    segment 2=546    segment 3=751    segment 4=385    segment 5=388    segment 6=571    segment 7=700    segment 8=578    segment 9=749    segment 10=565    segment 11=346    segment 12=769    segment 13=750    segment 14=582    segment 15=569    segment 16=461    segment 17=462    segment 18=433    segment 19=498    segment 20=540    segment 21=240    segment 22=237    segment 23=442    segment 24=479    segment 25=555    segment 26=379    segment 27=725    segment 28=553    segment 29=207    segment 30=749 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.056785 seconds 
1000 transitions using 10 leapfrog steps per transition would take 567.85 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48808.992             1.000            1.000 
   200       -48802.322             0.500            1.000 
   300       -48797.335             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  87.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=410    segment 2=546    segment 3=751    segment 4=385    segment 5=388    segment 6=571    segment 7=700    segment 8=578    segment 9=749    segment 10=565    segment 11=346    segment 12=769    segment 13=750    segment 14=582    segment 15=569    segment 16=461    segment 17=462    segment 18=433    segment 19=498    segment 20=540    segment 21=240    segment 22=237    segment 23=442    segment 24=479    segment 25=555    segment 26=379    segment 27=725    segment 28=553    segment 29=207    segment 30=749 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.2487437 0.4974874
[10,] 0.3311037 0.6622074
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.2487437 0.4974874
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.2487437 0.4974874
 [1] "2:1" "2:1" "2:2" "2:0" "2:0" "2:1" "2:2" "2:1" "2:2" "2:1" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:2" "2:2" "2:1" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2"
[25] "2:1" "2:1" "2:2" "2:1" "2:0" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.025008 seconds 
1000 transitions using 10 leapfrog steps per transition would take 250.08 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48751.471             1.000            1.000 
   200       -48743.399             0.500            1.000 
   300       -48741.702             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  55.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=410    segment 2=546    segment 3=751    segment 4=385    segment 5=388    segment 6=571    segment 7=700    segment 8=578    segment 9=749    segment 10=565    segment 11=346    segment 12=769    segment 13=750    segment 14=582    segment 15=569    segment 16=461    segment 17=462    segment 18=433    segment 19=498    segment 20=540    segment 21=240    segment 22=237    segment 23=442    segment 24=479    segment 25=555    segment 26=379    segment 27=725    segment 28=553    segment 29=207    segment 30=749 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=426    2=567    3=781    4=397    5=399    6=592    7=725    8=595    9=776    10=583    11=372    12=798    13=777    14=604    15=586    16=473    17=480    18=449    19=511    20=559    21=245    22=244    23=463    24=506    25=570    26=391    27=760    28=584    29=213    30=772 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01265 seconds 
1000 transitions using 10 leapfrog steps per transition would take 126.5 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49210.541             1.000            1.000 
   200       -49207.662             0.500            1.000 
   300       -49206.941             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=269    segment 2=301    segment 3=459    segment 4=612    segment 5=517    segment 6=650    segment 7=522    segment 8=462    segment 9=480    segment 10=481    segment 11=554    segment 12=593    segment 13=251    segment 14=508    segment 15=513    segment 16=638    segment 17=267    segment 18=581    segment 19=540    segment 20=524    segment 21=648    segment 22=300    segment 23=311    segment 24=509    segment 25=435    segment 26=498    segment 27=451    segment 28=621    segment 29=446    segment 30=604 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021266 seconds 
1000 transitions using 10 leapfrog steps per transition would take 212.66 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48850.134             1.000            1.000 
   200       -48846.210             0.500            1.000 
   300       -48841.483             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=269    segment 2=301    segment 3=459    segment 4=612    segment 5=517    segment 6=650    segment 7=522    segment 8=462    segment 9=480    segment 10=481    segment 11=554    segment 12=593    segment 13=251    segment 14=508    segment 15=513    segment 16=638    segment 17=267    segment 18=581    segment 19=540    segment 20=524    segment 21=648    segment 22=300    segment 23=311    segment 24=509    segment 25=435    segment 26=498    segment 27=451    segment 28=621    segment 29=446    segment 30=604 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.031155 seconds 
1000 transitions using 10 leapfrog steps per transition would take 311.55 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48879.663             1.000            1.000 
   200       -48872.060             0.500            1.000 
   300       -48864.077             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=269    segment 2=301    segment 3=459    segment 4=612    segment 5=517    segment 6=650    segment 7=522    segment 8=462    segment 9=480    segment 10=481    segment 11=554    segment 12=593    segment 13=251    segment 14=508    segment 15=513    segment 16=638    segment 17=267    segment 18=581    segment 19=540    segment 20=524    segment 21=648    segment 22=300    segment 23=311    segment 24=509    segment 25=435    segment 26=498    segment 27=451    segment 28=621    segment 29=446    segment 30=604 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.041019 seconds 
1000 transitions using 10 leapfrog steps per transition would take 410.19 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48863.828             1.000            1.000 
   200       -48857.818             0.500            1.000 
   300       -48854.279             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=269    segment 2=301    segment 3=459    segment 4=612    segment 5=517    segment 6=650    segment 7=522    segment 8=462    segment 9=480    segment 10=481    segment 11=554    segment 12=593    segment 13=251    segment 14=508    segment 15=513    segment 16=638    segment 17=267    segment 18=581    segment 19=540    segment 20=524    segment 21=648    segment 22=300    segment 23=311    segment 24=509    segment 25=435    segment 26=498    segment 27=451    segment 28=621    segment 29=446    segment 30=604 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052729 seconds 
1000 transitions using 10 leapfrog steps per transition would take 527.29 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48887.809             1.000            1.000 
   200       -48878.237             0.500            1.000 
   300       -48863.658             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  97.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=269    segment 2=301    segment 3=459    segment 4=612    segment 5=517    segment 6=650    segment 7=522    segment 8=462    segment 9=480    segment 10=481    segment 11=554    segment 12=593    segment 13=251    segment 14=508    segment 15=513    segment 16=638    segment 17=267    segment 18=581    segment 19=540    segment 20=524    segment 21=648    segment 22=300    segment 23=311    segment 24=509    segment 25=435    segment 26=498    segment 27=451    segment 28=621    segment 29=446    segment 30=604 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.2487437 0.4974874
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.2487437 0.4974874
[20,] 0.2487437 0.4974874
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:0" "2:1" "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:2"
[13] "2:0" "2:1" "2:2" "2:2" "2:0" "2:2" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2"
[25] "2:1" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021027 seconds 
1000 transitions using 10 leapfrog steps per transition would take 210.27 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -48851.066             1.000            1.000 
   200       -48845.892             0.500            1.000 
   300       -48843.068             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=269    segment 2=301    segment 3=459    segment 4=612    segment 5=517    segment 6=650    segment 7=522    segment 8=462    segment 9=480    segment 10=481    segment 11=554    segment 12=593    segment 13=251    segment 14=508    segment 15=513    segment 16=638    segment 17=267    segment 18=581    segment 19=540    segment 20=524    segment 21=648    segment 22=300    segment 23=311    segment 24=509    segment 25=435    segment 26=498    segment 27=451    segment 28=621    segment 29=446    segment 30=604 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=275    2=314    3=471    4=645    5=539    6=679    7=537    8=491    9=498    10=500    11=576    12=619    13=258    14=536    15=537    16=669    17=272    18=600    19=562    20=543    21=671    22=319    23=319    24=533    25=452    26=525    27=479    28=639    29=461    30=627 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010512 seconds 
1000 transitions using 10 leapfrog steps per transition would take 105.12 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43218.818             1.000            1.000 
   200       -43216.691             0.500            1.000 
   300       -43216.391             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  35.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=272    segment 2=428    segment 3=478    segment 4=504    segment 5=334    segment 6=639    segment 7=309    segment 8=489    segment 9=259    segment 10=340    segment 11=225    segment 12=431    segment 13=628    segment 14=535    segment 15=472    segment 16=432    segment 17=506    segment 18=657    segment 19=300    segment 20=512    segment 21=221    segment 22=464    segment 23=522    segment 24=421    segment 25=276    segment 26=457    segment 27=658    segment 28=233    segment 29=502    segment 30=503 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019364 seconds 
1000 transitions using 10 leapfrog steps per transition would take 193.64 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42565.060             1.000            1.000 
   200       -42555.234             0.500            1.000 
   300       -42556.217             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  41.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=272    segment 2=428    segment 3=478    segment 4=504    segment 5=334    segment 6=639    segment 7=309    segment 8=489    segment 9=259    segment 10=340    segment 11=225    segment 12=431    segment 13=628    segment 14=535    segment 15=472    segment 16=432    segment 17=506    segment 18=657    segment 19=300    segment 20=512    segment 21=221    segment 22=464    segment 23=522    segment 24=421    segment 25=276    segment 26=457    segment 27=658    segment 28=233    segment 29=502    segment 30=503 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.027725 seconds 
1000 transitions using 10 leapfrog steps per transition would take 277.25 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42588.231             1.000            1.000 
   200       -42577.341             0.500            1.000 
   300       -42582.975             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  59.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=272    segment 2=428    segment 3=478    segment 4=504    segment 5=334    segment 6=639    segment 7=309    segment 8=489    segment 9=259    segment 10=340    segment 11=225    segment 12=431    segment 13=628    segment 14=535    segment 15=472    segment 16=432    segment 17=506    segment 18=657    segment 19=300    segment 20=512    segment 21=221    segment 22=464    segment 23=522    segment 24=421    segment 25=276    segment 26=457    segment 27=658    segment 28=233    segment 29=502    segment 30=503 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036291 seconds 
1000 transitions using 10 leapfrog steps per transition would take 362.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42596.662             1.000            1.000 
   200       -42584.582             0.500            1.000 
   300       -42592.817             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=272    segment 2=428    segment 3=478    segment 4=504    segment 5=334    segment 6=639    segment 7=309    segment 8=489    segment 9=259    segment 10=340    segment 11=225    segment 12=431    segment 13=628    segment 14=535    segment 15=472    segment 16=432    segment 17=506    segment 18=657    segment 19=300    segment 20=512    segment 21=221    segment 22=464    segment 23=522    segment 24=421    segment 25=276    segment 26=457    segment 27=658    segment 28=233    segment 29=502    segment 30=503 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.049318 seconds 
1000 transitions using 10 leapfrog steps per transition would take 493.18 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42631.380             1.000            1.000 
   200       -42618.298             0.500            1.000 
   300       -42612.866             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=272    segment 2=428    segment 3=478    segment 4=504    segment 5=334    segment 6=639    segment 7=309    segment 8=489    segment 9=259    segment 10=340    segment 11=225    segment 12=431    segment 13=628    segment 14=535    segment 15=472    segment 16=432    segment 17=506    segment 18=657    segment 19=300    segment 20=512    segment 21=221    segment 22=464    segment 23=522    segment 24=421    segment 25=276    segment 26=457    segment 27=658    segment 28=233    segment 29=502    segment 30=503 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.2487437 0.4974874
[16,] 0.3311037 0.6622074
[17,] 0.2487437 0.4974874
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.3311037 0.6622074
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.4950000 0.9900000
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:0" "2:1"
[13] "2:2" "2:1" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1"
[25] "2:0" "2:2" "2:2" "2:0" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019299 seconds 
1000 transitions using 10 leapfrog steps per transition would take 192.99 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42557.338             1.000            1.000 
   200       -42554.164             0.500            1.000 
   300       -42556.740             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  44.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=272    segment 2=428    segment 3=478    segment 4=504    segment 5=334    segment 6=639    segment 7=309    segment 8=489    segment 9=259    segment 10=340    segment 11=225    segment 12=431    segment 13=628    segment 14=535    segment 15=472    segment 16=432    segment 17=506    segment 18=657    segment 19=300    segment 20=512    segment 21=221    segment 22=464    segment 23=522    segment 24=421    segment 25=276    segment 26=457    segment 27=658    segment 28=233    segment 29=502    segment 30=503 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=282    2=439    3=496    4=522    5=345    6=662    7=317    8=507    9=268    10=352    11=231    12=447    13=661    14=553    15=501    16=446    17=530    18=691    19=312    20=523    21=228    22=484    23=548    24=437    25=280    26=480    27=684    28=239    29=514    30=520 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010591 seconds 
1000 transitions using 10 leapfrog steps per transition would take 105.91 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42736.013             1.000            1.000 
   200       -42733.925             0.500            1.000 
   300       -42736.803             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  34.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=480    segment 2=749    segment 3=466    segment 4=410    segment 5=477    segment 6=367    segment 7=574    segment 8=235    segment 9=742    segment 10=391    segment 11=348    segment 12=775    segment 13=206    segment 14=387    segment 15=561    segment 16=241    segment 17=234    segment 18=620    segment 19=538    segment 20=237    segment 21=235    segment 22=413    segment 23=578    segment 24=376    segment 25=570    segment 26=438    segment 27=382    segment 28=452    segment 29=203    segment 30=408 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019093 seconds 
1000 transitions using 10 leapfrog steps per transition would take 190.93 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40261.213             1.000            1.000 
   200       -40252.688             0.500            1.000 
   300       -40256.989             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  50.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=480    segment 2=749    segment 3=466    segment 4=410    segment 5=477    segment 6=367    segment 7=574    segment 8=235    segment 9=742    segment 10=391    segment 11=348    segment 12=775    segment 13=206    segment 14=387    segment 15=561    segment 16=241    segment 17=234    segment 18=620    segment 19=538    segment 20=237    segment 21=235    segment 22=413    segment 23=578    segment 24=376    segment 25=570    segment 26=438    segment 27=382    segment 28=452    segment 29=203    segment 30=408 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028193 seconds 
1000 transitions using 10 leapfrog steps per transition would take 281.93 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40277.544             1.000            1.000 
   200       -40264.536             0.500            1.000 
   300       -40265.420             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=480    segment 2=749    segment 3=466    segment 4=410    segment 5=477    segment 6=367    segment 7=574    segment 8=235    segment 9=742    segment 10=391    segment 11=348    segment 12=775    segment 13=206    segment 14=387    segment 15=561    segment 16=241    segment 17=234    segment 18=620    segment 19=538    segment 20=237    segment 21=235    segment 22=413    segment 23=578    segment 24=376    segment 25=570    segment 26=438    segment 27=382    segment 28=452    segment 29=203    segment 30=408 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.037121 seconds 
1000 transitions using 10 leapfrog steps per transition would take 371.21 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40320.972             1.000            1.000 
   200       -40310.409             0.500            1.000 
   300       -40298.344             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=480    segment 2=749    segment 3=466    segment 4=410    segment 5=477    segment 6=367    segment 7=574    segment 8=235    segment 9=742    segment 10=391    segment 11=348    segment 12=775    segment 13=206    segment 14=387    segment 15=561    segment 16=241    segment 17=234    segment 18=620    segment 19=538    segment 20=237    segment 21=235    segment 22=413    segment 23=578    segment 24=376    segment 25=570    segment 26=438    segment 27=382    segment 28=452    segment 29=203    segment 30=408 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.049465 seconds 
1000 transitions using 10 leapfrog steps per transition would take 494.65 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40346.947             1.000            1.000 
   200       -40337.271             0.500            1.000 
   300       -40323.190             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  80.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=480    segment 2=749    segment 3=466    segment 4=410    segment 5=477    segment 6=367    segment 7=574    segment 8=235    segment 9=742    segment 10=391    segment 11=348    segment 12=775    segment 13=206    segment 14=387    segment 15=561    segment 16=241    segment 17=234    segment 18=620    segment 19=538    segment 20=237    segment 21=235    segment 22=413    segment 23=578    segment 24=376    segment 25=570    segment 26=438    segment 27=382    segment 28=452    segment 29=203    segment 30=408 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.3311037 0.6622074
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.4950000 0.9900000
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.2487437 0.4974874
[27,] 0.4950000 0.9900000
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:2" "2:2" "2:1" "2:2" "2:0" "2:1" "2:0" "2:2" "2:0" "2:0" "2:2"
[13] "2:0" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0"
[25] "2:1" "2:2" "2:0" "2:1" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.029084 seconds 
1000 transitions using 10 leapfrog steps per transition would take 290.84 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -40295.875             1.000            1.000 
   200       -40274.628             0.500            1.000 
   300       -40266.418             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=480    segment 2=749    segment 3=466    segment 4=410    segment 5=477    segment 6=367    segment 7=574    segment 8=235    segment 9=742    segment 10=391    segment 11=348    segment 12=775    segment 13=206    segment 14=387    segment 15=561    segment 16=241    segment 17=234    segment 18=620    segment 19=538    segment 20=237    segment 21=235    segment 22=413    segment 23=578    segment 24=376    segment 25=570    segment 26=438    segment 27=382    segment 28=452    segment 29=203    segment 30=408 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=491    2=787    3=481    4=433    5=491    6=381    7=599    8=239    9=775    10=411    11=368    12=810    13=212    14=404    15=590    16=244    17=238    18=641    19=561    20=242    21=241    22=432    23=602    24=390    25=596    26=456    27=390    28=473    29=210    30=431 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.009451 seconds 
1000 transitions using 10 leapfrog steps per transition would take 94.51 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -37570.683             1.000            1.000 
   200       -37566.928             0.500            1.000 
   300       -37567.894             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  29.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=294    segment 2=569    segment 3=439    segment 4=224    segment 5=508    segment 6=234    segment 7=291    segment 8=290    segment 9=399    segment 10=283    segment 11=489    segment 12=188    segment 13=471    segment 14=200    segment 15=433    segment 16=554    segment 17=381    segment 18=283    segment 19=315    segment 20=480    segment 21=461    segment 22=193    segment 23=271    segment 24=440    segment 25=225    segment 26=567    segment 27=537    segment 28=427    segment 29=430    segment 30=534 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.017163 seconds 
1000 transitions using 10 leapfrog steps per transition would take 171.63 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -36678.983             1.000            1.000 
   200       -36678.220             0.500            1.000 
   300       -36676.415             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  35.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=294    segment 2=569    segment 3=439    segment 4=224    segment 5=508    segment 6=234    segment 7=291    segment 8=290    segment 9=399    segment 10=283    segment 11=489    segment 12=188    segment 13=471    segment 14=200    segment 15=433    segment 16=554    segment 17=381    segment 18=283    segment 19=315    segment 20=480    segment 21=461    segment 22=193    segment 23=271    segment 24=440    segment 25=225    segment 26=567    segment 27=537    segment 28=427    segment 29=430    segment 30=534 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.024615 seconds 
1000 transitions using 10 leapfrog steps per transition would take 246.15 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -36720.759             1.000            1.000 
   200       -36712.643             0.500            1.000 
   300       -36705.412             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  44.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=294    segment 2=569    segment 3=439    segment 4=224    segment 5=508    segment 6=234    segment 7=291    segment 8=290    segment 9=399    segment 10=283    segment 11=489    segment 12=188    segment 13=471    segment 14=200    segment 15=433    segment 16=554    segment 17=381    segment 18=283    segment 19=315    segment 20=480    segment 21=461    segment 22=193    segment 23=271    segment 24=440    segment 25=225    segment 26=567    segment 27=537    segment 28=427    segment 29=430    segment 30=534 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.032642 seconds 
1000 transitions using 10 leapfrog steps per transition would take 326.42 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -36738.409             1.000            1.000 
   200       -36709.813             0.500            1.000 
   300       -36709.504             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  55.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=294    segment 2=569    segment 3=439    segment 4=224    segment 5=508    segment 6=234    segment 7=291    segment 8=290    segment 9=399    segment 10=283    segment 11=489    segment 12=188    segment 13=471    segment 14=200    segment 15=433    segment 16=554    segment 17=381    segment 18=283    segment 19=315    segment 20=480    segment 21=461    segment 22=193    segment 23=271    segment 24=440    segment 25=225    segment 26=567    segment 27=537    segment 28=427    segment 29=430    segment 30=534 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039244 seconds 
1000 transitions using 10 leapfrog steps per transition would take 392.44 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -36721.392             1.000            1.000 
   200       -36701.816             0.500            1.000 
   300       -36701.141             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=294    segment 2=569    segment 3=439    segment 4=224    segment 5=508    segment 6=234    segment 7=291    segment 8=290    segment 9=399    segment 10=283    segment 11=489    segment 12=188    segment 13=471    segment 14=200    segment 15=433    segment 16=554    segment 17=381    segment 18=283    segment 19=315    segment 20=480    segment 21=461    segment 22=193    segment 23=271    segment 24=440    segment 25=225    segment 26=567    segment 27=537    segment 28=427    segment 29=430    segment 30=534 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.3311037 0.6622074
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.2487437 0.4974874
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.2487437 0.4974874
 [1] "2:0" "2:2" "2:2" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:0"
[13] "2:1" "2:0" "2:2" "2:2" "2:1" "2:0" "2:0" "2:1" "2:2" "2:0" "2:0" "2:2"
[25] "2:0" "2:2" "2:2" "2:2" "2:2" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016745 seconds 
1000 transitions using 10 leapfrog steps per transition would take 167.45 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -36676.744             1.000            1.000 
   200       -36672.753             0.500            1.000 
   300       -36672.872             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  36.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=294    segment 2=569    segment 3=439    segment 4=224    segment 5=508    segment 6=234    segment 7=291    segment 8=290    segment 9=399    segment 10=283    segment 11=489    segment 12=188    segment 13=471    segment 14=200    segment 15=433    segment 16=554    segment 17=381    segment 18=283    segment 19=315    segment 20=480    segment 21=461    segment 22=193    segment 23=271    segment 24=440    segment 25=225    segment 26=567    segment 27=537    segment 28=427    segment 29=430    segment 30=534 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=299    2=594    3=454    4=232    5=526    6=239    7=302    8=300    9=411    10=292    11=505    12=191    13=490    14=208    15=449    16=579    17=395    18=293    19=321    20=498    21=479    22=197    23=278    24=455    25=227    26=588    27=557    28=445    29=446    30=555 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.012724 seconds 
1000 transitions using 10 leapfrog steps per transition would take 127.24 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47129.243             1.000            1.000 
   200       -47124.867             0.500            1.000 
   300       -47124.541             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  38.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=722    segment 2=566    segment 3=381    segment 4=565    segment 5=365    segment 6=346    segment 7=272    segment 8=583    segment 9=576    segment 10=705    segment 11=286    segment 12=726    segment 13=482    segment 14=354    segment 15=516    segment 16=274    segment 17=498    segment 18=498    segment 19=516    segment 20=362    segment 21=695    segment 22=488    segment 23=644    segment 24=527    segment 25=560    segment 26=529    segment 27=436    segment 28=383    segment 29=579    segment 30=300 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021782 seconds 
1000 transitions using 10 leapfrog steps per transition would take 217.82 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46630.598             1.000            1.000 
   200       -46623.954             0.500            1.000 
   300       -46624.297             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=722    segment 2=566    segment 3=381    segment 4=565    segment 5=365    segment 6=346    segment 7=272    segment 8=583    segment 9=576    segment 10=705    segment 11=286    segment 12=726    segment 13=482    segment 14=354    segment 15=516    segment 16=274    segment 17=498    segment 18=498    segment 19=516    segment 20=362    segment 21=695    segment 22=488    segment 23=644    segment 24=527    segment 25=560    segment 26=529    segment 27=436    segment 28=383    segment 29=579    segment 30=300 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.032152 seconds 
1000 transitions using 10 leapfrog steps per transition would take 321.52 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46652.787             1.000            1.000 
   200       -46647.463             0.500            1.000 
   300       -46646.069             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=722    segment 2=566    segment 3=381    segment 4=565    segment 5=365    segment 6=346    segment 7=272    segment 8=583    segment 9=576    segment 10=705    segment 11=286    segment 12=726    segment 13=482    segment 14=354    segment 15=516    segment 16=274    segment 17=498    segment 18=498    segment 19=516    segment 20=362    segment 21=695    segment 22=488    segment 23=644    segment 24=527    segment 25=560    segment 26=529    segment 27=436    segment 28=383    segment 29=579    segment 30=300 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.041882 seconds 
1000 transitions using 10 leapfrog steps per transition would take 418.82 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46656.972             1.000            1.000 
   200       -46659.124             0.500            1.000 
   300       -46648.974             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  70.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=722    segment 2=566    segment 3=381    segment 4=565    segment 5=365    segment 6=346    segment 7=272    segment 8=583    segment 9=576    segment 10=705    segment 11=286    segment 12=726    segment 13=482    segment 14=354    segment 15=516    segment 16=274    segment 17=498    segment 18=498    segment 19=516    segment 20=362    segment 21=695    segment 22=488    segment 23=644    segment 24=527    segment 25=560    segment 26=529    segment 27=436    segment 28=383    segment 29=579    segment 30=300 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.054079 seconds 
1000 transitions using 10 leapfrog steps per transition would take 540.79 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46670.120             1.000            1.000 
   200       -46655.184             0.500            1.000 
   300       -46648.631             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  82.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=722    segment 2=566    segment 3=381    segment 4=565    segment 5=365    segment 6=346    segment 7=272    segment 8=583    segment 9=576    segment 10=705    segment 11=286    segment 12=726    segment 13=482    segment 14=354    segment 15=516    segment 16=274    segment 17=498    segment 18=498    segment 19=516    segment 20=362    segment 21=695    segment 22=488    segment 23=644    segment 24=527    segment 25=560    segment 26=529    segment 27=436    segment 28=383    segment 29=579    segment 30=300 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.2487437 0.4974874
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.2487437 0.4974874
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.3311037 0.6622074
[30,] 0.4950000 0.9900000
 [1] "2:2" "2:1" "2:0" "2:1" "2:0" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:2"
[13] "2:1" "2:0" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2" "2:1" "2:2" "2:1"
[25] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021642 seconds 
1000 transitions using 10 leapfrog steps per transition would take 216.42 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46634.629             1.000            1.000 
   200       -46625.511             0.500            1.000 
   300       -46622.966             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  56.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=722    segment 2=566    segment 3=381    segment 4=565    segment 5=365    segment 6=346    segment 7=272    segment 8=583    segment 9=576    segment 10=705    segment 11=286    segment 12=726    segment 13=482    segment 14=354    segment 15=516    segment 16=274    segment 17=498    segment 18=498    segment 19=516    segment 20=362    segment 21=695    segment 22=488    segment 23=644    segment 24=527    segment 25=560    segment 26=529    segment 27=436    segment 28=383    segment 29=579    segment 30=300 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=747    2=590    3=392    4=588    5=379    6=370    7=289    8=602    9=595    10=726    11=290    12=752    13=495    14=362    15=533    16=278    17=519    18=522    19=535    20=375    21=716    22=507    23=675    24=553    25=582    26=556    27=452    28=394    29=599    30=307 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.009041 seconds 
1000 transitions using 10 leapfrog steps per transition would take 90.41 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -35826.583             1.000            1.000 
   200       -35822.279             0.500            1.000 
   300       -35822.221             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  29.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=417    segment 2=512    segment 3=430    segment 4=453    segment 5=536    segment 6=473    segment 7=225    segment 8=220    segment 9=506    segment 10=245    segment 11=404    segment 12=234    segment 13=486    segment 14=235    segment 15=294    segment 16=257    segment 17=433    segment 18=227    segment 19=394    segment 20=428    segment 21=239    segment 22=412    segment 23=416    segment 24=495    segment 25=193    segment 26=414    segment 27=432    segment 28=508    segment 29=231    segment 30=251 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016477 seconds 
1000 transitions using 10 leapfrog steps per transition would take 164.77 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -35475.384             1.000            1.000 
   200       -35473.827             0.500            1.000 
   300       -35472.155             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  39.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=417    segment 2=512    segment 3=430    segment 4=453    segment 5=536    segment 6=473    segment 7=225    segment 8=220    segment 9=506    segment 10=245    segment 11=404    segment 12=234    segment 13=486    segment 14=235    segment 15=294    segment 16=257    segment 17=433    segment 18=227    segment 19=394    segment 20=428    segment 21=239    segment 22=412    segment 23=416    segment 24=495    segment 25=193    segment 26=414    segment 27=432    segment 28=508    segment 29=231    segment 30=251 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.025148 seconds 
1000 transitions using 10 leapfrog steps per transition would take 251.48 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -35507.362             1.000            1.000 
   200       -35498.633             0.500            1.000 
   300       -35495.803             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=417    segment 2=512    segment 3=430    segment 4=453    segment 5=536    segment 6=473    segment 7=225    segment 8=220    segment 9=506    segment 10=245    segment 11=404    segment 12=234    segment 13=486    segment 14=235    segment 15=294    segment 16=257    segment 17=433    segment 18=227    segment 19=394    segment 20=428    segment 21=239    segment 22=412    segment 23=416    segment 24=495    segment 25=193    segment 26=414    segment 27=432    segment 28=508    segment 29=231    segment 30=251 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03073 seconds 
1000 transitions using 10 leapfrog steps per transition would take 307.3 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -35491.668             1.000            1.000 
   200       -35487.515             0.500            1.000 
   300       -35488.985             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  54.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=417    segment 2=512    segment 3=430    segment 4=453    segment 5=536    segment 6=473    segment 7=225    segment 8=220    segment 9=506    segment 10=245    segment 11=404    segment 12=234    segment 13=486    segment 14=235    segment 15=294    segment 16=257    segment 17=433    segment 18=227    segment 19=394    segment 20=428    segment 21=239    segment 22=412    segment 23=416    segment 24=495    segment 25=193    segment 26=414    segment 27=432    segment 28=508    segment 29=231    segment 30=251 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.037694 seconds 
1000 transitions using 10 leapfrog steps per transition would take 376.94 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -35528.389             1.000            1.000 
   200       -35497.422             0.500            1.000 
   300       -35495.434             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  68.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=417    segment 2=512    segment 3=430    segment 4=453    segment 5=536    segment 6=473    segment 7=225    segment 8=220    segment 9=506    segment 10=245    segment 11=404    segment 12=234    segment 13=486    segment 14=235    segment 15=294    segment 16=257    segment 17=433    segment 18=227    segment 19=394    segment 20=428    segment 21=239    segment 22=412    segment 23=416    segment 24=495    segment 25=193    segment 26=414    segment 27=432    segment 28=508    segment 29=231    segment 30=251 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.3311037 0.6622074
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.4950000 0.9900000
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.2487437 0.4974874
[18,] 0.4950000 0.9900000
[19,] 0.3311037 0.6622074
[20,] 0.3311037 0.6622074
[21,] 0.4950000 0.9900000
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.2487437 0.4974874
[27,] 0.3311037 0.6622074
[28,] 0.3311037 0.6622074
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:1" "2:2" "2:1" "2:2" "2:2" "2:1" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0"
[13] "2:2" "2:0" "2:0" "2:0" "2:2" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:2"
[25] "2:0" "2:2" "2:1" "2:1" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.016548 seconds 
1000 transitions using 10 leapfrog steps per transition would take 165.48 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -35473.761             1.000            1.000 
   200       -35473.451             0.500            1.000 
   300       -35473.729             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  41.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=417    segment 2=512    segment 3=430    segment 4=453    segment 5=536    segment 6=473    segment 7=225    segment 8=220    segment 9=506    segment 10=245    segment 11=404    segment 12=234    segment 13=486    segment 14=235    segment 15=294    segment 16=257    segment 17=433    segment 18=227    segment 19=394    segment 20=428    segment 21=239    segment 22=412    segment 23=416    segment 24=495    segment 25=193    segment 26=414    segment 27=432    segment 28=508    segment 29=231    segment 30=251 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=434    2=530    3=443    4=472    5=553    6=492    7=228    8=222    9=531    10=249    11=427    12=237    13=499    14=238    15=306    16=267    17=452    18=230    19=410    20=445    21=244    22=433    23=434    24=519    25=203    26=436    27=449    28=530    29=238    30=260 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010211 seconds 
1000 transitions using 10 leapfrog steps per transition would take 102.11 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -41829.199             1.000            1.000 
   200       -41828.173             0.500            1.000 
   300       -41828.403             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  31.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=408    segment 2=540    segment 3=221    segment 4=590    segment 5=556    segment 6=566    segment 7=446    segment 8=234    segment 9=539    segment 10=440    segment 11=432    segment 12=212    segment 13=344    segment 14=205    segment 15=375    segment 16=572    segment 17=406    segment 18=422    segment 19=563    segment 20=431    segment 21=358    segment 22=212    segment 23=236    segment 24=421    segment 25=723    segment 26=314    segment 27=347    segment 28=403    segment 29=722    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018881 seconds 
1000 transitions using 10 leapfrog steps per transition would take 188.81 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -38992.219             1.000            1.000 
   200       -38990.283             0.500            1.000 
   300       -38995.779             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  39.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=408    segment 2=540    segment 3=221    segment 4=590    segment 5=556    segment 6=566    segment 7=446    segment 8=234    segment 9=539    segment 10=440    segment 11=432    segment 12=212    segment 13=344    segment 14=205    segment 15=375    segment 16=572    segment 17=406    segment 18=422    segment 19=563    segment 20=431    segment 21=358    segment 22=212    segment 23=236    segment 24=421    segment 25=723    segment 26=314    segment 27=347    segment 28=403    segment 29=722    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028049 seconds 
1000 transitions using 10 leapfrog steps per transition would take 280.49 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39048.249             1.000            1.000 
   200       -39044.115             0.500            1.000 
   300       -39042.577             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=408    segment 2=540    segment 3=221    segment 4=590    segment 5=556    segment 6=566    segment 7=446    segment 8=234    segment 9=539    segment 10=440    segment 11=432    segment 12=212    segment 13=344    segment 14=205    segment 15=375    segment 16=572    segment 17=406    segment 18=422    segment 19=563    segment 20=431    segment 21=358    segment 22=212    segment 23=236    segment 24=421    segment 25=723    segment 26=314    segment 27=347    segment 28=403    segment 29=722    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.036036 seconds 
1000 transitions using 10 leapfrog steps per transition would take 360.36 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39081.469             1.000            1.000 
   200       -39074.607             0.500            1.000 
   300       -39060.210             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  60.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=408    segment 2=540    segment 3=221    segment 4=590    segment 5=556    segment 6=566    segment 7=446    segment 8=234    segment 9=539    segment 10=440    segment 11=432    segment 12=212    segment 13=344    segment 14=205    segment 15=375    segment 16=572    segment 17=406    segment 18=422    segment 19=563    segment 20=431    segment 21=358    segment 22=212    segment 23=236    segment 24=421    segment 25=723    segment 26=314    segment 27=347    segment 28=403    segment 29=722    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.043839 seconds 
1000 transitions using 10 leapfrog steps per transition would take 438.39 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39102.730             1.000            1.000 
   200       -39086.744             0.500            1.000 
   300       -39077.823             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  84.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=408    segment 2=540    segment 3=221    segment 4=590    segment 5=556    segment 6=566    segment 7=446    segment 8=234    segment 9=539    segment 10=440    segment 11=432    segment 12=212    segment 13=344    segment 14=205    segment 15=375    segment 16=572    segment 17=406    segment 18=422    segment 19=563    segment 20=431    segment 21=358    segment 22=212    segment 23=236    segment 24=421    segment 25=723    segment 26=314    segment 27=347    segment 28=403    segment 29=722    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.4950000 0.9900000
 [4,] 0.3311037 0.6622074
 [5,] 0.3311037 0.6622074
 [6,] 0.3311037 0.6622074
 [7,] 0.2487437 0.4974874
 [8,] 0.4950000 0.9900000
 [9,] 0.3311037 0.6622074
[10,] 0.3311037 0.6622074
[11,] 0.3311037 0.6622074
[12,] 0.4950000 0.9900000
[13,] 0.4950000 0.9900000
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.3311037 0.6622074
[20,] 0.2487437 0.4974874
[21,] 0.4950000 0.9900000
[22,] 0.4950000 0.9900000
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.2487437 0.4974874
[26,] 0.4950000 0.9900000
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.2487437 0.4974874
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:0" "2:1" "2:1" "2:1" "2:2" "2:0" "2:1" "2:1" "2:1" "2:0"
[13] "2:0" "2:0" "2:1" "2:1" "2:1" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1"
[25] "2:2" "2:0" "2:0" "2:2" "2:2" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.018433 seconds 
1000 transitions using 10 leapfrog steps per transition would take 184.33 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -39000.482             1.000            1.000 
   200       -38996.567             0.500            1.000 
   300       -38991.836             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  50.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=408    segment 2=540    segment 3=221    segment 4=590    segment 5=556    segment 6=566    segment 7=446    segment 8=234    segment 9=539    segment 10=440    segment 11=432    segment 12=212    segment 13=344    segment 14=205    segment 15=375    segment 16=572    segment 17=406    segment 18=422    segment 19=563    segment 20=431    segment 21=358    segment 22=212    segment 23=236    segment 24=421    segment 25=723    segment 26=314    segment 27=347    segment 28=403    segment 29=722    segment 30=401 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=425    2=571    3=225    4=615    5=574    6=590    7=467    8=237    9=558    10=462    11=453    12=214    13=351    14=207    15=388    16=585    17=425    18=439    19=579    20=445    21=369    22=217    23=240    24=439    25=748    26=328    27=363    28=421    29=747    30=416 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.013629 seconds 
1000 transitions using 10 leapfrog steps per transition would take 136.29 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50980.509             1.000            1.000 
   200       -50978.155             0.500            1.000 
   300       -50980.013             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  41.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=744    segment 3=545    segment 4=663    segment 5=754    segment 6=615    segment 7=345    segment 8=302    segment 9=664    segment 10=369    segment 11=729    segment 12=582    segment 13=748    segment 14=730    segment 15=525    segment 16=574    segment 17=536    segment 18=494    segment 19=338    segment 20=270    segment 21=312    segment 22=741    segment 23=738    segment 24=366    segment 25=546    segment 26=532    segment 27=799    segment 28=527    segment 29=682    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.025973 seconds 
1000 transitions using 10 leapfrog steps per transition would take 259.73 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50628.200             1.000            1.000 
   200       -50619.507             0.500            1.000 
   300       -50619.730             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  53.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=744    segment 3=545    segment 4=663    segment 5=754    segment 6=615    segment 7=345    segment 8=302    segment 9=664    segment 10=369    segment 11=729    segment 12=582    segment 13=748    segment 14=730    segment 15=525    segment 16=574    segment 17=536    segment 18=494    segment 19=338    segment 20=270    segment 21=312    segment 22=741    segment 23=738    segment 24=366    segment 25=546    segment 26=532    segment 27=799    segment 28=527    segment 29=682    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.034847 seconds 
1000 transitions using 10 leapfrog steps per transition would take 348.47 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50653.567             1.000            1.000 
   200       -50642.880             0.500            1.000 
   300       -50642.268             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  66.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=744    segment 3=545    segment 4=663    segment 5=754    segment 6=615    segment 7=345    segment 8=302    segment 9=664    segment 10=369    segment 11=729    segment 12=582    segment 13=748    segment 14=730    segment 15=525    segment 16=574    segment 17=536    segment 18=494    segment 19=338    segment 20=270    segment 21=312    segment 22=741    segment 23=738    segment 24=366    segment 25=546    segment 26=532    segment 27=799    segment 28=527    segment 29=682    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.049764 seconds 
1000 transitions using 10 leapfrog steps per transition would take 497.64 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50662.869             1.000            1.000 
   200       -50650.860             0.500            1.000 
   300       -50649.678             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  80.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=744    segment 3=545    segment 4=663    segment 5=754    segment 6=615    segment 7=345    segment 8=302    segment 9=664    segment 10=369    segment 11=729    segment 12=582    segment 13=748    segment 14=730    segment 15=525    segment 16=574    segment 17=536    segment 18=494    segment 19=338    segment 20=270    segment 21=312    segment 22=741    segment 23=738    segment 24=366    segment 25=546    segment 26=532    segment 27=799    segment 28=527    segment 29=682    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.059644 seconds 
1000 transitions using 10 leapfrog steps per transition would take 596.44 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50692.740             1.000            1.000 
   200       -50679.415             0.500            1.000 
   300       -50668.615             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  92.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=744    segment 3=545    segment 4=663    segment 5=754    segment 6=615    segment 7=345    segment 8=302    segment 9=664    segment 10=369    segment 11=729    segment 12=582    segment 13=748    segment 14=730    segment 15=525    segment 16=574    segment 17=536    segment 18=494    segment 19=338    segment 20=270    segment 21=312    segment 22=741    segment 23=738    segment 24=366    segment 25=546    segment 26=532    segment 27=799    segment 28=527    segment 29=682    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.2487437 0.4974874
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.4950000 0.9900000
 [9,] 0.2487437 0.4974874
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.3311037 0.6622074
[16,] 0.3311037 0.6622074
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.4950000 0.9900000
[22,] 0.2487437 0.4974874
[23,] 0.2487437 0.4974874
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.3311037 0.6622074
[29,] 0.2487437 0.4974874
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:2" "2:1" "2:2" "2:2" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:1"
[13] "2:2" "2:2" "2:1" "2:1" "2:1" "2:1" "2:0" "2:0" "2:0" "2:2" "2:2" "2:0"
[25] "2:1" "2:1" "2:2" "2:1" "2:2" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.025781 seconds 
1000 transitions using 10 leapfrog steps per transition would take 257.81 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -50623.570             1.000            1.000 
   200       -50619.425             0.500            1.000 
   300       -50618.915             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  51.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=396    segment 2=744    segment 3=545    segment 4=663    segment 5=754    segment 6=615    segment 7=345    segment 8=302    segment 9=664    segment 10=369    segment 11=729    segment 12=582    segment 13=748    segment 14=730    segment 15=525    segment 16=574    segment 17=536    segment 18=494    segment 19=338    segment 20=270    segment 21=312    segment 22=741    segment 23=738    segment 24=366    segment 25=546    segment 26=532    segment 27=799    segment 28=527    segment 29=682    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=410    2=777    3=562    4=697    5=789    6=645    7=356    8=313    9=695    10=385    11=754    12=601    13=772    14=750    15=548    16=593    17=553    18=514    19=349    20=281    21=326    22=772    23=776    24=377    25=579    26=551    27=834    28=549    29=711    30=409 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.010697 seconds 
1000 transitions using 10 leapfrog steps per transition would take 106.97 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43718.298             1.000            1.000 
   200       -43715.533             0.500            1.000 
   300       -43715.207             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  36.1 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=455    segment 3=521    segment 4=291    segment 5=257    segment 6=524    segment 7=341    segment 8=804    segment 9=275    segment 10=272    segment 11=462    segment 12=437    segment 13=501    segment 14=503    segment 15=719    segment 16=558    segment 17=424    segment 18=470    segment 19=819    segment 20=359    segment 21=700    segment 22=435    segment 23=439    segment 24=284    segment 25=434    segment 26=359    segment 27=438    segment 28=267    segment 29=246    segment 30=254 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.019238 seconds 
1000 transitions using 10 leapfrog steps per transition would take 192.38 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42199.167             1.000            1.000 
   200       -42199.168             0.500            1.000 
   300       -42198.281             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  46.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=455    segment 3=521    segment 4=291    segment 5=257    segment 6=524    segment 7=341    segment 8=804    segment 9=275    segment 10=272    segment 11=462    segment 12=437    segment 13=501    segment 14=503    segment 15=719    segment 16=558    segment 17=424    segment 18=470    segment 19=819    segment 20=359    segment 21=700    segment 22=435    segment 23=439    segment 24=284    segment 25=434    segment 26=359    segment 27=438    segment 28=267    segment 29=246    segment 30=254 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028384 seconds 
1000 transitions using 10 leapfrog steps per transition would take 283.84 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42213.293             1.000            1.000 
   200       -42207.571             0.500            1.000 
   300       -42205.727             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  60.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=455    segment 3=521    segment 4=291    segment 5=257    segment 6=524    segment 7=341    segment 8=804    segment 9=275    segment 10=272    segment 11=462    segment 12=437    segment 13=501    segment 14=503    segment 15=719    segment 16=558    segment 17=424    segment 18=470    segment 19=819    segment 20=359    segment 21=700    segment 22=435    segment 23=439    segment 24=284    segment 25=434    segment 26=359    segment 27=438    segment 28=267    segment 29=246    segment 30=254 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.037614 seconds 
1000 transitions using 10 leapfrog steps per transition would take 376.14 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42244.882             1.000            1.000 
   200       -42235.395             0.500            1.000 
   300       -42233.525             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  62.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=455    segment 3=521    segment 4=291    segment 5=257    segment 6=524    segment 7=341    segment 8=804    segment 9=275    segment 10=272    segment 11=462    segment 12=437    segment 13=501    segment 14=503    segment 15=719    segment 16=558    segment 17=424    segment 18=470    segment 19=819    segment 20=359    segment 21=700    segment 22=435    segment 23=439    segment 24=284    segment 25=434    segment 26=359    segment 27=438    segment 28=267    segment 29=246    segment 30=254 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.049715 seconds 
1000 transitions using 10 leapfrog steps per transition would take 497.15 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42270.376             1.000            1.000 
   200       -42224.468             0.501            1.000 
   300       -42219.396             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=455    segment 3=521    segment 4=291    segment 5=257    segment 6=524    segment 7=341    segment 8=804    segment 9=275    segment 10=272    segment 11=462    segment 12=437    segment 13=501    segment 14=503    segment 15=719    segment 16=558    segment 17=424    segment 18=470    segment 19=819    segment 20=359    segment 21=700    segment 22=435    segment 23=439    segment 24=284    segment 25=434    segment 26=359    segment 27=438    segment 28=267    segment 29=246    segment 30=254 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.4950000 0.9900000
 [5,] 0.4950000 0.9900000
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.2487437 0.4974874
 [9,] 0.4950000 0.9900000
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.2487437 0.4974874
[15,] 0.2487437 0.4974874
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.2487437 0.4974874
[20,] 0.4950000 0.9900000
[21,] 0.2487437 0.4974874
[22,] 0.3311037 0.6622074
[23,] 0.3311037 0.6622074
[24,] 0.4950000 0.9900000
[25,] 0.3311037 0.6622074
[26,] 0.4950000 0.9900000
[27,] 0.3311037 0.6622074
[28,] 0.4950000 0.9900000
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:1" "2:2" "2:0" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:1"
[13] "2:2" "2:2" "2:2" "2:2" "2:1" "2:1" "2:2" "2:0" "2:2" "2:1" "2:1" "2:0"
[25] "2:1" "2:0" "2:1" "2:0" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.028493 seconds 
1000 transitions using 10 leapfrog steps per transition would take 284.93 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -42244.630             1.000            1.000 
   200       -42221.446             0.500            1.000 
   300       -42207.493             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  52.7 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=392    segment 2=455    segment 3=521    segment 4=291    segment 5=257    segment 6=524    segment 7=341    segment 8=804    segment 9=275    segment 10=272    segment 11=462    segment 12=437    segment 13=501    segment 14=503    segment 15=719    segment 16=558    segment 17=424    segment 18=470    segment 19=819    segment 20=359    segment 21=700    segment 22=435    segment 23=439    segment 24=284    segment 25=434    segment 26=359    segment 27=438    segment 28=267    segment 29=246    segment 30=254 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=409    2=479    3=543    4=297    5=266    6=545    7=353    8=837    9=284    10=279    11=482    12=457    13=524    14=521    15=749    16=577    17=448    18=489    19=848    20=376    21=733    22=452    23=456    24=295    25=452    26=375    27=455    28=273    29=253    30=262 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.011239 seconds 
1000 transitions using 10 leapfrog steps per transition would take 112.39 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45219.806             1.000            1.000 
   200       -45214.368             0.500            1.000 
   300       -45214.072             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  37.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=450    segment 2=274    segment 3=296    segment 4=745    segment 5=483    segment 6=749    segment 7=299    segment 8=462    segment 9=477    segment 10=248    segment 11=552    segment 12=702    segment 13=470    segment 14=506    segment 15=285    segment 16=514    segment 17=268    segment 18=695    segment 19=373    segment 20=366    segment 21=553    segment 22=278    segment 23=543    segment 24=750    segment 25=365    segment 26=464    segment 27=543    segment 28=566    segment 29=265    segment 30=488 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021082 seconds 
1000 transitions using 10 leapfrog steps per transition would take 210.82 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -43976.436             1.000            1.000 
   200       -43971.939             0.500            1.000 
   300       -43971.136             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  47.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=450    segment 2=274    segment 3=296    segment 4=745    segment 5=483    segment 6=749    segment 7=299    segment 8=462    segment 9=477    segment 10=248    segment 11=552    segment 12=702    segment 13=470    segment 14=506    segment 15=285    segment 16=514    segment 17=268    segment 18=695    segment 19=373    segment 20=366    segment 21=553    segment 22=278    segment 23=543    segment 24=750    segment 25=365    segment 26=464    segment 27=543    segment 28=566    segment 29=265    segment 30=488 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.030314 seconds 
1000 transitions using 10 leapfrog steps per transition would take 303.14 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44006.400             1.000            1.000 
   200       -44003.766             0.500            1.000 
   300       -44004.711             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  60.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=450    segment 2=274    segment 3=296    segment 4=745    segment 5=483    segment 6=749    segment 7=299    segment 8=462    segment 9=477    segment 10=248    segment 11=552    segment 12=702    segment 13=470    segment 14=506    segment 15=285    segment 16=514    segment 17=268    segment 18=695    segment 19=373    segment 20=366    segment 21=553    segment 22=278    segment 23=543    segment 24=750    segment 25=365    segment 26=464    segment 27=543    segment 28=566    segment 29=265    segment 30=488 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039497 seconds 
1000 transitions using 10 leapfrog steps per transition would take 394.97 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44000.876             1.000            1.000 
   200       -43987.603             0.500            1.000 
   300       -43982.997             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  73.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=450    segment 2=274    segment 3=296    segment 4=745    segment 5=483    segment 6=749    segment 7=299    segment 8=462    segment 9=477    segment 10=248    segment 11=552    segment 12=702    segment 13=470    segment 14=506    segment 15=285    segment 16=514    segment 17=268    segment 18=695    segment 19=373    segment 20=366    segment 21=553    segment 22=278    segment 23=543    segment 24=750    segment 25=365    segment 26=464    segment 27=543    segment 28=566    segment 29=265    segment 30=488 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.051687 seconds 
1000 transitions using 10 leapfrog steps per transition would take 516.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44052.901             1.000            1.000 
   200       -44022.554             0.500            1.000 
   300       -44015.512             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  77.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=450    segment 2=274    segment 3=296    segment 4=745    segment 5=483    segment 6=749    segment 7=299    segment 8=462    segment 9=477    segment 10=248    segment 11=552    segment 12=702    segment 13=470    segment 14=506    segment 15=285    segment 16=514    segment 17=268    segment 18=695    segment 19=373    segment 20=366    segment 21=553    segment 22=278    segment 23=543    segment 24=750    segment 25=365    segment 26=464    segment 27=543    segment 28=566    segment 29=265    segment 30=488 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.3311037 0.6622074
 [2,] 0.4950000 0.9900000
 [3,] 0.4950000 0.9900000
 [4,] 0.2487437 0.4974874
 [5,] 0.3311037 0.6622074
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.2487437 0.4974874
[12,] 0.2487437 0.4974874
[13,] 0.3311037 0.6622074
[14,] 0.3311037 0.6622074
[15,] 0.4950000 0.9900000
[16,] 0.2487437 0.4974874
[17,] 0.4950000 0.9900000
[18,] 0.2487437 0.4974874
[19,] 0.4950000 0.9900000
[20,] 0.4950000 0.9900000
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.3311037 0.6622074
[24,] 0.2487437 0.4974874
[25,] 0.4950000 0.9900000
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:1" "2:0" "2:0" "2:2" "2:1" "2:2" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[13] "2:1" "2:1" "2:0" "2:2" "2:0" "2:2" "2:0" "2:0" "2:1" "2:0" "2:1" "2:2"
[25] "2:0" "2:1" "2:1" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.039411 seconds 
1000 transitions using 10 leapfrog steps per transition would take 394.11 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -44042.832             1.000            1.000 
   200       -44030.435             0.500            1.000 
   300       -44028.680             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  75.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=450    segment 2=274    segment 3=296    segment 4=745    segment 5=483    segment 6=749    segment 7=299    segment 8=462    segment 9=477    segment 10=248    segment 11=552    segment 12=702    segment 13=470    segment 14=506    segment 15=285    segment 16=514    segment 17=268    segment 18=695    segment 19=373    segment 20=366    segment 21=553    segment 22=278    segment 23=543    segment 24=750    segment 25=365    segment 26=464    segment 27=543    segment 28=566    segment 29=265    segment 30=488 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=468    2=284    3=303    4=782    5=499    6=782    7=305    8=480    9=499    10=253    11=577    12=735    13=489    14=531    15=299    16=543    17=275    18=724    19=389    20=384    21=568    22=283    23=567    24=778    25=380    26=486    27=571    28=589    29=273    30=500 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01308 seconds 
1000 transitions using 10 leapfrog steps per transition would take 130.8 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -49181.099             1.000            1.000 
   200       -49170.231             0.500            1.000 
   300       -49169.893             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  38.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=704    segment 2=554    segment 3=538    segment 4=565    segment 5=499    segment 6=265    segment 7=517    segment 8=523    segment 9=459    segment 10=234    segment 11=601    segment 12=513    segment 13=673    segment 14=337    segment 15=544    segment 16=741    segment 17=564    segment 18=357    segment 19=503    segment 20=594    segment 21=558    segment 22=593    segment 23=348    segment 24=433    segment 25=532    segment 26=553    segment 27=266    segment 28=713    segment 29=256    segment 30=564 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.022459 seconds 
1000 transitions using 10 leapfrog steps per transition would take 224.59 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47566.646             1.000            1.000 
   200       -47568.097             0.500            1.000 
   300       -47566.650             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  53.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=704    segment 2=554    segment 3=538    segment 4=565    segment 5=499    segment 6=265    segment 7=517    segment 8=523    segment 9=459    segment 10=234    segment 11=601    segment 12=513    segment 13=673    segment 14=337    segment 15=544    segment 16=741    segment 17=564    segment 18=357    segment 19=503    segment 20=594    segment 21=558    segment 22=593    segment 23=348    segment 24=433    segment 25=532    segment 26=553    segment 27=266    segment 28=713    segment 29=256    segment 30=564 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.032132 seconds 
1000 transitions using 10 leapfrog steps per transition would take 321.32 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47610.940             1.000            1.000 
   200       -47610.720             0.500            1.000 
   300       -47602.134             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  69.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=704    segment 2=554    segment 3=538    segment 4=565    segment 5=499    segment 6=265    segment 7=517    segment 8=523    segment 9=459    segment 10=234    segment 11=601    segment 12=513    segment 13=673    segment 14=337    segment 15=544    segment 16=741    segment 17=564    segment 18=357    segment 19=503    segment 20=594    segment 21=558    segment 22=593    segment 23=348    segment 24=433    segment 25=532    segment 26=553    segment 27=266    segment 28=713    segment 29=256    segment 30=564 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.041977 seconds 
1000 transitions using 10 leapfrog steps per transition would take 419.77 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47621.952             1.000            1.000 
   200       -47618.564             0.500            1.000 
   300       -47613.709             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  71.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=704    segment 2=554    segment 3=538    segment 4=565    segment 5=499    segment 6=265    segment 7=517    segment 8=523    segment 9=459    segment 10=234    segment 11=601    segment 12=513    segment 13=673    segment 14=337    segment 15=544    segment 16=741    segment 17=564    segment 18=357    segment 19=503    segment 20=594    segment 21=558    segment 22=593    segment 23=348    segment 24=433    segment 25=532    segment 26=553    segment 27=266    segment 28=713    segment 29=256    segment 30=564 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.054545 seconds 
1000 transitions using 10 leapfrog steps per transition would take 545.45 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47606.190             1.000            1.000 
   200       -47592.411             0.500            1.000 
   300       -47589.077             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  101.9 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=704    segment 2=554    segment 3=538    segment 4=565    segment 5=499    segment 6=265    segment 7=517    segment 8=523    segment 9=459    segment 10=234    segment 11=601    segment 12=513    segment 13=673    segment 14=337    segment 15=544    segment 16=741    segment 17=564    segment 18=357    segment 19=503    segment 20=594    segment 21=558    segment 22=593    segment 23=348    segment 24=433    segment 25=532    segment 26=553    segment 27=266    segment 28=713    segment 29=256    segment 30=564 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.4950000 0.9900000
 [7,] 0.2487437 0.4974874
 [8,] 0.2487437 0.4974874
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.3311037 0.6622074
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.3311037 0.6622074
[16,] 0.2487437 0.4974874
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.2487437 0.4974874
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.3311037 0.6622074
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.4950000 0.9900000
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.3311037 0.6622074
 [1] "2:2" "2:1" "2:2" "2:1" "2:2" "2:0" "2:2" "2:2" "2:1" "2:0" "2:1" "2:2"
[13] "2:2" "2:0" "2:1" "2:2" "2:1" "2:0" "2:2" "2:1" "2:1" "2:1" "2:0" "2:1"
[25] "2:1" "2:1" "2:0" "2:2" "2:0" "2:1"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.055061 seconds 
1000 transitions using 10 leapfrog steps per transition would take 550.61 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -47647.525             1.000            1.000 
   200       -47650.598             0.500            1.000 
   300       -47643.609             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  86.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=704    segment 2=554    segment 3=538    segment 4=565    segment 5=499    segment 6=265    segment 7=517    segment 8=523    segment 9=459    segment 10=234    segment 11=601    segment 12=513    segment 13=673    segment 14=337    segment 15=544    segment 16=741    segment 17=564    segment 18=357    segment 19=503    segment 20=594    segment 21=558    segment 22=593    segment 23=348    segment 24=433    segment 25=532    segment 26=553    segment 27=266    segment 28=713    segment 29=256    segment 30=564 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=727    2=577    3=553    4=594    5=515    6=280    7=540    8=548    9=478    10=240    11=623    12=530    13=703    14=349    15=573    16=774    17=589    18=377    19=521    20=613    21=583    22=614    23=362    24=446    25=556    26=580    27=273    28=738    29=264    30=588 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.0116 seconds 
1000 transitions using 10 leapfrog steps per transition would take 116 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46416.359             1.000            1.000 
   200       -46413.728             0.500            1.000 
   300       -46415.895             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  38.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=502    segment 2=528    segment 3=536    segment 4=686    segment 5=265    segment 6=279    segment 7=263    segment 8=465    segment 9=480    segment 10=377    segment 11=305    segment 12=520    segment 13=711    segment 14=543    segment 15=581    segment 16=342    segment 17=513    segment 18=267    segment 19=351    segment 20=451    segment 21=471    segment 22=362    segment 23=687    segment 24=503    segment 25=706    segment 26=453    segment 27=483    segment 28=518    segment 29=511    segment 30=567 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.020671 seconds 
1000 transitions using 10 leapfrog steps per transition would take 206.71 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45476.610             1.000            1.000 
   200       -45476.321             0.500            1.000 
   300       -45479.809             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  50.3 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=502    segment 2=528    segment 3=536    segment 4=686    segment 5=265    segment 6=279    segment 7=263    segment 8=465    segment 9=480    segment 10=377    segment 11=305    segment 12=520    segment 13=711    segment 14=543    segment 15=581    segment 16=342    segment 17=513    segment 18=267    segment 19=351    segment 20=451    segment 21=471    segment 22=362    segment 23=687    segment 24=503    segment 25=706    segment 26=453    segment 27=483    segment 28=518    segment 29=511    segment 30=567 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.03037 seconds 
1000 transitions using 10 leapfrog steps per transition would take 303.7 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45511.569             1.000            1.000 
   200       -45511.678             0.500            1.000 
   300       -45505.510             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  64.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=502    segment 2=528    segment 3=536    segment 4=686    segment 5=265    segment 6=279    segment 7=263    segment 8=465    segment 9=480    segment 10=377    segment 11=305    segment 12=520    segment 13=711    segment 14=543    segment 15=581    segment 16=342    segment 17=513    segment 18=267    segment 19=351    segment 20=451    segment 21=471    segment 22=362    segment 23=687    segment 24=503    segment 25=706    segment 26=453    segment 27=483    segment 28=518    segment 29=511    segment 30=567 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.04053 seconds 
1000 transitions using 10 leapfrog steps per transition would take 405.3 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45524.519             1.000            1.000 
   200       -45496.681             0.500            1.000 
   300       -45491.941             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  74.0 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=502    segment 2=528    segment 3=536    segment 4=686    segment 5=265    segment 6=279    segment 7=263    segment 8=465    segment 9=480    segment 10=377    segment 11=305    segment 12=520    segment 13=711    segment 14=543    segment 15=581    segment 16=342    segment 17=513    segment 18=267    segment 19=351    segment 20=451    segment 21=471    segment 22=362    segment 23=687    segment 24=503    segment 25=706    segment 26=453    segment 27=483    segment 28=518    segment 29=511    segment 30=567 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052199 seconds 
1000 transitions using 10 leapfrog steps per transition would take 521.99 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45554.103             1.000            1.000 
   200       -45547.370             0.500            1.000 
   300       -45541.088             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  87.8 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=502    segment 2=528    segment 3=536    segment 4=686    segment 5=265    segment 6=279    segment 7=263    segment 8=465    segment 9=480    segment 10=377    segment 11=305    segment 12=520    segment 13=711    segment 14=543    segment 15=581    segment 16=342    segment 17=513    segment 18=267    segment 19=351    segment 20=451    segment 21=471    segment 22=362    segment 23=687    segment 24=503    segment 25=706    segment 26=453    segment 27=483    segment 28=518    segment 29=511    segment 30=567 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.2487437 0.4974874
 [2,] 0.3311037 0.6622074
 [3,] 0.3311037 0.6622074
 [4,] 0.2487437 0.4974874
 [5,] 0.4950000 0.9900000
 [6,] 0.4950000 0.9900000
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.3311037 0.6622074
[10,] 0.4950000 0.9900000
[11,] 0.4950000 0.9900000
[12,] 0.2487437 0.4974874
[13,] 0.2487437 0.4974874
[14,] 0.3311037 0.6622074
[15,] 0.3311037 0.6622074
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.4950000 0.9900000
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.4950000 0.9900000
[23,] 0.2487437 0.4974874
[24,] 0.2487437 0.4974874
[25,] 0.2487437 0.4974874
[26,] 0.3311037 0.6622074
[27,] 0.3311037 0.6622074
[28,] 0.2487437 0.4974874
[29,] 0.3311037 0.6622074
[30,] 0.2487437 0.4974874
 [1] "2:2" "2:1" "2:1" "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:0" "2:2"
[13] "2:2" "2:1" "2:1" "2:0" "2:1" "2:0" "2:0" "2:1" "2:1" "2:0" "2:2" "2:2"
[25] "2:2" "2:1" "2:1" "2:2" "2:1" "2:2"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.0401 seconds 
1000 transitions using 10 leapfrog steps per transition would take 401 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45545.285             1.000            1.000 
   200       -45518.478             0.500            1.000 
   300       -45494.283             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  67.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=502    segment 2=528    segment 3=536    segment 4=686    segment 5=265    segment 6=279    segment 7=263    segment 8=465    segment 9=480    segment 10=377    segment 11=305    segment 12=520    segment 13=711    segment 14=543    segment 15=581    segment 16=342    segment 17=513    segment 18=267    segment 19=351    segment 20=451    segment 21=471    segment 22=362    segment 23=687    segment 24=503    segment 25=706    segment 26=453    segment 27=483    segment 28=518    segment 29=511    segment 30=567 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=519    2=548    3=552    4=713    5=273    6=284    7=272    8=478    9=495    10=390    11=310    12=537    13=739    14=574    15=600    16=352    17=539    18=277    19=364    20=470    21=485    22=381    23=719    24=521    25=741    26=471    27=503    28=546    29=532    30=584 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=389    2=386    3=590    4=571    5=548    6=554    7=393    8=552    9=278    10=593    11=491    12=615    13=565    14=279    15=286    16=417    17=478    18=492    19=388    20=608    21=485    22=577    23=429    24=744    25=541    26=486    27=745    28=775    29=405    30=419 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.01169 seconds 
1000 transitions using 10 leapfrog steps per transition would take 116.9 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -46901.581             1.000            1.000 
   200       -46896.926             0.500            1.000 
   300       -46896.378             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  36.2 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=373    segment 2=366    segment 3=565    segment 4=548    segment 5=523    segment 6=537    segment 7=372    segment 8=534    segment 9=273    segment 10=576    segment 11=459    segment 12=594    segment 13=540    segment 14=267    segment 15=278    segment 16=402    segment 17=461    segment 18=480    segment 19=378    segment 20=579    segment 21=466    segment 22=548    segment 23=411    segment 24=717    segment 25=518    segment 26=469    segment 27=714    segment 28=747    segment 29=379    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=389    2=386    3=590    4=571    5=548    6=554    7=393    8=552    9=278    10=593    11=491    12=615    13=565    14=279    15=286    16=417    17=478    18=492    19=388    20=608    21=485    22=577    23=429    24=744    25=541    26=486    27=745    28=775    29=405    30=419 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.021489 seconds 
1000 transitions using 10 leapfrog steps per transition would take 214.89 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45243.356             1.000            1.000 
   200       -45237.147             0.500            1.000 
   300       -45233.295             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  45.5 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=373    segment 2=366    segment 3=565    segment 4=548    segment 5=523    segment 6=537    segment 7=372    segment 8=534    segment 9=273    segment 10=576    segment 11=459    segment 12=594    segment 13=540    segment 14=267    segment 15=278    segment 16=402    segment 17=461    segment 18=480    segment 19=378    segment 20=579    segment 21=466    segment 22=548    segment 23=411    segment 24=717    segment 25=518    segment 26=469    segment 27=714    segment 28=747    segment 29=379    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=389    2=386    3=590    4=571    5=548    6=554    7=393    8=552    9=278    10=593    11=491    12=615    13=565    14=279    15=286    16=417    17=478    18=492    19=388    20=608    21=485    22=577    23=429    24=744    25=541    26=486    27=745    28=775    29=405    30=419 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.030992 seconds 
1000 transitions using 10 leapfrog steps per transition would take 309.92 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45256.574             1.000            1.000 
   200       -45250.115             0.500            1.000 
   300       -45243.806             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  66.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=373    segment 2=366    segment 3=565    segment 4=548    segment 5=523    segment 6=537    segment 7=372    segment 8=534    segment 9=273    segment 10=576    segment 11=459    segment 12=594    segment 13=540    segment 14=267    segment 15=278    segment 16=402    segment 17=461    segment 18=480    segment 19=378    segment 20=579    segment 21=466    segment 22=548    segment 23=411    segment 24=717    segment 25=518    segment 26=469    segment 27=714    segment 28=747    segment 29=379    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=389    2=386    3=590    4=571    5=548    6=554    7=393    8=552    9=278    10=593    11=491    12=615    13=565    14=279    15=286    16=417    17=478    18=492    19=388    20=608    21=485    22=577    23=429    24=744    25=541    26=486    27=745    28=775    29=405    30=419 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.040954 seconds 
1000 transitions using 10 leapfrog steps per transition would take 409.54 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45287.321             1.000            1.000 
   200       -45257.707             0.500            1.000 
   300       -45255.963             0.334            0.001   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  81.6 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=373    segment 2=366    segment 3=565    segment 4=548    segment 5=523    segment 6=537    segment 7=372    segment 8=534    segment 9=273    segment 10=576    segment 11=459    segment 12=594    segment 13=540    segment 14=267    segment 15=278    segment 16=402    segment 17=461    segment 18=480    segment 19=378    segment 20=579    segment 21=466    segment 22=548    segment 23=411    segment 24=717    segment 25=518    segment 26=469    segment 27=714    segment 28=747    segment 29=379    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=389    2=386    3=590    4=571    5=548    6=554    7=393    8=552    9=278    10=593    11=491    12=615    13=565    14=279    15=286    16=417    17=478    18=492    19=388    20=608    21=485    22=577    23=429    24=744    25=541    26=486    27=745    28=775    29=405    30=419 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.052934 seconds 
1000 transitions using 10 leapfrog steps per transition would take 529.34 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45308.157             1.000            1.000 
   200       -45294.314             0.500            1.000 
   300       -45277.978             0.334            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  81.4 seconds.
Fit succeeded in attempt 1
Inference completed successfully.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=373    segment 2=366    segment 3=565    segment 4=548    segment 5=523    segment 6=537    segment 7=372    segment 8=534    segment 9=273    segment 10=576    segment 11=459    segment 12=594    segment 13=540    segment 14=267    segment 15=278    segment 16=402    segment 17=461    segment 18=480    segment 19=378    segment 20=579    segment 21=466    segment 22=548    segment 23=411    segment 24=717    segment 25=518    segment 26=469    segment 27=714    segment 28=747    segment 29=379    segment 30=395 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=389    2=386    3=590    4=571    5=548    6=554    7=393    8=552    9=278    10=593    11=491    12=615    13=565    14=279    15=286    16=417    17=478    18=492    19=388    20=608    21=485    22=577    23=429    24=744    25=541    26=486    27=745    28=775    29=405    30=419 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
These are the peaks which are passed in the inference task, more reliable let's say
           [,1]      [,2]
 [1,] 0.4950000 0.9900000
 [2,] 0.4950000 0.9900000
 [3,] 0.2487437 0.4974874
 [4,] 0.3311037 0.6622074
 [5,] 0.2487437 0.4974874
 [6,] 0.2487437 0.4974874
 [7,] 0.4950000 0.9900000
 [8,] 0.3311037 0.6622074
 [9,] 0.4950000 0.9900000
[10,] 0.2487437 0.4974874
[11,] 0.3311037 0.6622074
[12,] 0.3311037 0.6622074
[13,] 0.2487437 0.4974874
[14,] 0.4950000 0.9900000
[15,] 0.4950000 0.9900000
[16,] 0.4950000 0.9900000
[17,] 0.3311037 0.6622074
[18,] 0.3311037 0.6622074
[19,] 0.4950000 0.9900000
[20,] 0.3311037 0.6622074
[21,] 0.3311037 0.6622074
[22,] 0.3311037 0.6622074
[23,] 0.4950000 0.9900000
[24,] 0.2487437 0.4974874
[25,] 0.3311037 0.6622074
[26,] 0.3311037 0.6622074
[27,] 0.2487437 0.4974874
[28,] 0.2487437 0.4974874
[29,] 0.4950000 0.9900000
[30,] 0.4950000 0.9900000
 [1] "2:0" "2:0" "2:2" "2:1" "2:2" "2:2" "2:0" "2:1" "2:0" "2:2" "2:1" "2:1"
[13] "2:2" "2:0" "2:0" "2:0" "2:1" "2:1" "2:0" "2:1" "2:1" "2:1" "2:0" "2:2"
[25] "2:1" "2:1" "2:2" "2:2" "2:0" "2:0"
Attempt 1 with 10000 iterations, 1 grad_samples, and 100 elbo_samples
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.031658 seconds 
1000 transitions using 10 leapfrog steps per transition would take 316.58 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
   100       -45267.671             1.000            1.000 
   200       -45261.358             0.500            1.000 
   300       -45265.409             0.333            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  57.9 seconds.
