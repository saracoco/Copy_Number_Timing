
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(patchwork)
> library(loo)
This is loo version 2.8.0
- Online documentation and vignettes at mc-stan.org/loo
- As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. 
> library(bayesplot)
This is bayesplot version 1.11.1
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
> library(cmdstanr)
This is cmdstanr version 0.8.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /u/cdslab/scocomello/.cmdstan/cmdstan-2.34.1
- CmdStan version: 2.34.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable cmdstanr_no_ver_check=TRUE.
> library(factoextra)
Loading required package: ggplot2
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr) #for plotting add in the right script
> library(fossil) #RI and ARI computation
Loading required package: sp
Loading required package: maps
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(ppclust)
> 
> set.seed(133)
> 
> tollerance = 0.001 
> 
> #setwd("C:/Users/sarac/CDS_git/Copy-Number-Timing/CopyNumber/")
> #orfeo
> 
> sim_list = c(1)
> number_clocks_list = c(2)
> number_events_list = c(4)
> epsilon_list = c(0.20)
> for (i in (1:length(sim_list))) {
+ 
+ 
+ 
+ 
+     # setwd("D:/scratch/Copy_Number_Timing/CopyNumber")
+     setwd("/orfeo/cephfs/scratch/cdslab/scocomello/Copy_Number_Timing/CopyNumber")
+ 
+     original_dir <- getwd()
+ 
+     source("./CNTiming/R/simulate_functions.R")
+     source("./CNTiming/R/fitting_functions.R")
+     source("./CNTiming/R/plotting_functions.R")
+ 
+ 
+     self_name = as.character(sim_list[i])
+     new_dir = paste0("../",self_name) #relative path of the new created directory where to save the simulation results
+     dir.create(new_dir)
+ 
+     number_events = number_events_list[i]
+     number_clocks = number_clocks_list[i]
+ 
+     INIT = TRUE
+     epsilon = epsilon_list[i]
+     n_simulations = 20
+     purity = 0.99
+ 
+     vector_karyo <- c("2:0", "2:1", "2:2")
+     weights_karyo <- c(0.33, 0.33, 0.33)
+ 
+ 
+     # get simulation parametes
+     coverage = 100 # average number of reads that align to a reference base
+     mu = 1e-4 # mutation rate
+     w = 1e-2 # cell division rate
+     l = 1e7 # length of the segment
+     time_interval = 20
+ 
+ 
+     options(bitmapType='cairo')
+ 
+ 
+ 
+ 
+     for(i in 1:n_simulations){
+       # Create a unique directory for each iteration
+       iter_dir <- paste0("/simulation_iteration_", i)
+       iter_dir <- paste0(new_dir,iter_dir)
+       dir.create(iter_dir)
+       setwd(iter_dir)
+       dir.create(paste0("./plots"), showWarnings = TRUE)
+       dir.create(paste0("./results"), showWarnings = FALSE)
+       
+       
+ 
+       vector_tau = rep(0, number_clocks)
+       
+       for (j in 1:number_clocks){
+         vector_tau[j] = runif(1, 0)
+         if (j != 1){
+           while (!all ( abs(vector_tau[1:j-1] - vector_tau[j]) > epsilon  )   ){
+             vector_tau[j] = runif(1, 0)
+           }
+         }
+       }
+       weights_tau <- rep(1/number_clocks, number_clocks)
+       
+       data <- get_taus_karyo(number_events, vector_tau, vector_karyo, weights_tau, weights_karyo)
+       simulation_data_all_segments = get_simulation(data$taus, data$karyo, purity, coverage = 100) # the other parameters have default value assigned if none is specified
+       simulation_data_all_segments <- simulation_data_all_segments[order(simulation_data_all_segments$segment_id), ]
+ 
+ 
+       saveRDS(simulation_data_all_segments, "./results/all_sim_input_prepare_input_data.rds")
+ 
+ 
+ 
+       
+       Subtitle <- vector("list", (length(unique(simulation_data_all_segments$segment_id))+1))
+       Subtitle[[1]]  <- paste0("Number of mutations per segment: ")
+       num_mutations_all_segments <- c()
+ 
+         for (i in seq_along(unique(simulation_data_all_segments$segment_id))) {
+         segment <- unique(simulation_data_all_segments$segment_id)[i]
+         num_mutations <- nrow(simulation_data_all_segments %>% filter(segment_id == segment))
+         num_mutations_all_segments <- c(num_mutations_all_segments, num_mutations)
+         Subtitle[[i+1]] <- paste0(segment, "=", num_mutations," ")
+       }
+       
+       Subtitle <- paste(Subtitle, collapse = "   ")
+       cat(Subtitle)
+ 
+       mean_mut <- mean(num_mutations_all_segments)
+       max_mut <- max(num_mutations_all_segments)
+       min_mut <- min(num_mutations_all_segments)
+ 
+       Subtitle_short <- paste0("Mutations per segment: average =", mean_mut, ",  min = ", min_mut, ", max = ", max_mut )
+ 
+ 
+       #add statistics on number of mutations from the simulation
+       
+       simulation_params <- list(
+         vector_tau = vector_tau,
+         vector_karyo = vector_karyo,
+         weights_tau = weights_tau,
+         weights_karyo = weights_karyo,
+         taus = data$taus,
+         karyo = data$karyo,
+         purity = purity,
+         number_events = number_events, # = nrow(vector-tau) / nrow(vector_karyo)
+         number_clocks = number_clocks, # = unique(vector_tau)
+         epsilon = epsilon
+       )
+ 
+ 
+ 
+       simulation_data_plot = simulation_data_all_segments %>% mutate (tau = round(tau, 2))
+       plot_data <- simulation_data_plot %>% 
+         ggplot(mapping = aes(x = NV / DP, fill = segment_name)) +
+         geom_histogram(alpha = .5, position = "identity") +
+         labs(
+           title = "Distribution on the VAF for each segment in the simulated data",
+           subtitle = paste0(Subtitle_short)
+         )+
+         facet_wrap(vars(karyotype, tau, segment_name), scales = "free_x", strip.position = "bottom") +
+         theme_minimal() +
+         theme(
+         panel.background = element_rect(fill = "white", color = NA),  # White panel background
+         plot.background = element_rect(fill = "white", color = NA),   # White plot background
+         strip.background = element_rect(fill = "white", color = NA),  # White strip background
+         strip.placement = "outside",   # Place facet labels outside
+         axis.text.x = element_text(angle = 360, hjust = 1, color = "black", size = 8),  # Rotate and adjust x-axis text
+         axis.ticks.x = element_line(color = "black"),  # Black x-axis ticks
+         panel.spacing = unit(1, "lines"),  # Adjust space between facets
+         strip.text.x = element_text(size = 10, color = "black"),  # Adjust and color strip text
+         axis.line = element_line(color = "black"),  # Black axis lines
+         axis.title.x = element_text(color = "black"),  # Black x-axis title
+         axis.title.y = element_text(color = "black")   # Black y-axis title
+       )+
+        xlim(0, 1)
+ 
+ 
+       #save plot of the simulated data in which we can see each single segment VAF distribution
+       ggsave("./plots/simulation_data.png", plot = plot_data, width = 12 + simulation_params$number_events, height = 10 + simulation_params$number_events + (simulation_params$number_events/1.3), limitsize = FALSE,   device = png) 
+       #simulation_params can be substituted in relation with simulation_data variables
+       
+       
+       #in fit model selection best K the plots for each K inference is directly saved 
+       results <- fit_model_selection_best_K(simulation_data_all_segments, data$karyo, purity, INIT = INIT, simulation_params = simulation_params, tollerance = tollerance )
+       saveRDS(results, paste0("./results/results_simulation",i,".rds"))
+       
+ 
+       
+       
+       
+       model_selection_plot = plotting_model_selection(results)
+       model_selection_plot
+       ggsave("./plots/model_selection_plot.png", plot = model_selection_plot, width = 12, height = 10,  device = png)
+       
+       model_selection <- results$model_selection_tibble
+       saveRDS(model_selection, "./results/model_selection.rds")
+       
+ 
+       
+       setwd(original_dir)
+       
+     }
+ 
+ }
Loading required package: StanHeaders

rstan version 2.32.6 (Stan version 2.32.2)

For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,
change `threads_per_chain` option:
rstan_options(threads_per_chain = 1)


Attaching package: ‘tidyr’

The following object is masked from ‘package:rstan’:

    extract


Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count

Number of mutations per segment:    1=605    2=478    3=268    4=332 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
          [,1]      [,2]
[1,] 0.2487437 0.4974874
[2,] 0.2487437 0.4974874
[3,] 0.4950000 0.9900000
[4,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
[1] "2:2" "2:2" "2:0" "2:0"
[1] 1 2 3 4
These are the Karyotypes directly from the simulation, used for peaks in the model
 [1] "2:2" "2:2" "2:0" "2:0"
[1] "DP 106" "DP 104" "DP 106" "DP 113"
[1] 1 2 3 4
[1] "alpha_beta_all 1634"
[1] "dim(proportions$tau_posterior): 4"
init_taus from clustering  0.680534068807598w = 1
  w = 1
  w = 1
  w = 1
 tau = 0.680534068807598
 phi = 1
 kappa = 5Attempt 1 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.6805341

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5325.03
Attempt 2 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.8336018

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5332.22
Attempt 3 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
An error occurred during inference: cannot open the connection
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5332.13
Attempt 4 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
An error occurred during inference: cannot open the connection
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
An error occurred during inference: cannot open the connection
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
An error occurred during inference: cannot open the connection
Max retries reached for attempt 4
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=584    segment 2=462    segment 3=265    segment 4=323 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=605    2=478    3=268    4=332 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
          [,1]      [,2]
[1,] 0.2487437 0.4974874
[2,] 0.2487437 0.4974874
[3,] 0.4950000 0.9900000
[4,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
[1] "2:2" "2:2" "2:0" "2:0"
[1] 1 2 3 4
These are the Karyotypes directly from the simulation, used for peaks in the model
 [1] "2:2" "2:2" "2:0" "2:0"
[1] "DP 106" "DP 104" "DP 106" "DP 113"
[1] 1 2 3 4
[1] "alpha_beta_all 1634"
[1] "dim(proportions$tau_posterior): 4"
init_taus from clustering  0.680534068807598w = 1
  w = 1
  w = 1
  w = 1
 tau = 0.680534068807598
 phi = 1
 kappa = 5[1] "These are the values used for initializing the model c(1, 1, 1, 1)"    
[2] "These are the values used for initializing the model 0.680534068807598"
[3] "These are the values used for initializing the model 1"                
[4] "These are the values used for initializing the model 5"                
Attempt 1 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.6805341

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5330.87
Attempt 2 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.8336018

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5332.22
Attempt 3 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5332.13
Attempt 4 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
An error occurred during inference: cannot open the connection
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.88

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -5332.13
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=584    segment 2=462    segment 3=265    segment 4=323 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=605    2=478    3=268    4=332 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`geom_line()`: Each group consists of only one observation.
ℹ Do you need to adjust the group aesthetic?
`geom_line()`: Each group consists of only one observation.
ℹ Do you need to adjust the group aesthetic?
`geom_line()`: Each group consists of only one observation.
ℹ Do you need to adjust the group aesthetic?
`geom_line()`: Each group consists of only one observation.
ℹ Do you need to adjust the group aesthetic?
`geom_line()`: Each group consists of only one observation.
ℹ Do you need to adjust the group aesthetic?
Number of mutations per segment:    1=739    2=645    3=710    4=399 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
          [,1]      [,2]
[1,] 0.2487437 0.4974874
[2,] 0.2487437 0.4974874
[3,] 0.2487437 0.4974874
[4,] 0.4950000 0.9900000
These are the Karyotypes extracted from the all_sim data, used in peaks
[1] "2:2" "2:2" "2:2" "2:0"
[1] 1 2 3 4
These are the Karyotypes directly from the simulation, used for peaks in the model
 [1] "2:2" "2:2" "2:2" "2:0"
[1] "DP 100" "DP 76"  "DP 114" "DP 97" 
[1] 1 2 3 4
[1] "alpha_beta_all 2406"
[1] "dim(proportions$tau_posterior): 4"
init_taus from clustering  0.181656946443421w = 1
  w = 1
  w = 1
  w = 1
 tau = 0.181656946443421
 phi = 1
 kappa = 5Attempt 1 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.1816569

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -7596.16
Attempt 2 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.3347247

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -7583.31
Attempt 3 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.4877924

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -7598.89
Attempt 4 of 4
[[1]]
[[1]]$w
     [,1]
[1,]    1
[2,]    1
[3,]    1
[4,]    1

[[1]]$tau
[1] 0.6408601

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE" "w_init 1 TRUE"
ELBO for this run: -7660.65
Error in file(file, "rt") : cannot open the connection
Calls: fit_model_selection_best_K -> read.csv -> read.table -> file
In addition: There were 16 warnings (use warnings() to see them)
Execution halted
