
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(patchwork) # plotting
> library(loo)        # model selection
This is loo version 2.8.0
- Online documentation and vignettes at mc-stan.org/loo
- As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. 
> library(bayesplot)  # plotting
This is bayesplot version 1.11.1
- Online documentation and vignettes at mc-stan.org/bayesplot
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
> library(cmdstanr)   # inference
This is cmdstanr version 0.8.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /u/cdslab/scocomello/.cmdstan/cmdstan-2.34.1
- CmdStan version: 2.34.1

A newer version of CmdStan is available. See ?install_cmdstan() to install it.
To disable this check set option or environment variable cmdstanr_no_ver_check=TRUE.
> library(factoextra)  
Loading required package: ggplot2
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
> library(dplyr)     # simulation + inference

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr) # for plotting add in the right script
> library(fossil) # RI and ARI computation
Loading required package: sp
Loading required package: maps
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

> library(gridExtra) # plotting

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(ppclust) # initialization step 
> library(tidyr)
> 
> set.seed(133)
> 
> tollerance = 0.0001
> print(paste0("tolerance: ", tollerance))    
[1] "tolerance: 1e-04"
> 
> max_attempts = 2
> 
> #setwd("C:/Users/sarac/CDS_git/Copy-Number-Timing/CopyNumber/")
> #orfeo
> 
> sim_list = c(0)
> # sim_list = c(0,6,7,8,9,10,11,12,13,14,15)
> number_clocks_list = c(3)
> # number_clocks_list = c(2,2,2,2,3,3,3,3,4,4,4)
> number_events_list = c(10)
> # number_events_list = c(6,10,20,30,6,10,20,30,10,20,30)
> epsilon_list = c(0.20)
> # epsilon_list = c(0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.20,0.15,0.15,0.15)
> 
> 
> 
> for (i in (1:length(sim_list))) {
+ 
+     # setwd("D:/scratch/Copy_Number_Timing/CopyNumber")
+     setwd("/orfeo/cephfs/scratch/cdslab/scocomello/Copy_Number_Timing/CopyNumber")
+ 
+     original_dir <- getwd()
+ 
+     source("./CNTiming/R/simulate_functions.R")
+     source("./CNTiming/R/fitting_functions.R")
+     source("./CNTiming/R/plotting_functions.R")
+ 
+     self_name = as.character(sim_list[i])
+     new_dir = paste0("../",self_name) #relative path of the new created directory where to save the simulation results
+     dir.create(new_dir)
+ 
+     number_events = number_events_list[i]
+     number_clocks = number_clocks_list[i]
+     print("number of clocks: ", number_clocks )
+ 
+     INIT = TRUE
+     epsilon = epsilon_list[i]
+     n_simulations = 10
+     purity = 0.98
+ 
+     vector_karyo <- c("2:0", "2:1", "2:2")
+     weights_karyo <- c(0.33, 0.33, 0.33)
+ 
+     # get simulation parametes
+     coverage = 100 # average number of reads that align to a reference base
+     mu = 1e-4 # mutation rate
+     w = 1e-2 # cell division rate
+     l = 1e7 # length of the segment
+     time_interval = 10
+ 
+ 
+     options(bitmapType='cairo')
+ 
+ 
+     for(i in 1:n_simulations){
+       # Create a unique directory for each iteration
+       iter_dir <- paste0("/simulation_iteration_", i)
+       iter_dir <- paste0(new_dir,iter_dir)
+       dir.create(iter_dir)
+       setwd(iter_dir)
+       dir.create(paste0("./plots"), showWarnings = TRUE)
+       dir.create(paste0("./results"), showWarnings = FALSE)
+       
+       
+ 
+       vector_tau = rep(0, number_clocks)
+       
+       for (j in 1:number_clocks){
+         vector_tau[j] = runif(1, 0)
+         if (j != 1){
+           while (!all ( abs(vector_tau[1:j-1] - vector_tau[j]) > epsilon  )   ){
+             vector_tau[j] = runif(1, 0)
+           }
+         }
+       }
+       weights_tau <- rep(1/number_clocks, number_clocks)
+       
+       data <- get_taus_karyo(number_events, vector_tau, vector_karyo, weights_tau, weights_karyo)
+       simulation_data_all_segments = get_simulation(data$taus, data$karyo, purity, coverage = 100) # the other parameters have default value assigned if none is specified
+       simulation_data_all_segments <- simulation_data_all_segments[order(simulation_data_all_segments$segment_id), ]
+ 
+ 
+       saveRDS(simulation_data_all_segments, "./results/all_sim_input_prepare_input_data.rds")
+ 
+ 
+ 
+       
+       # Subtitle <- vector("list", (length(unique(simulation_data_all_segments$segment_id))+1))
+       # Subtitle[[1]]  <- paste0("Number of mutations per segment: ")
+       # num_mutations_all_segments <- c()
+ 
+       #   for (i in seq_along(unique(simulation_data_all_segments$segment_id))) {
+       #   segment <- unique(simulation_data_all_segments$segment_id)[i]
+       #   num_mutations <- nrow(simulation_data_all_segments %>% filter(segment_id == segment))
+       #   num_mutations_all_segments <- c(num_mutations_all_segments, num_mutations)
+       #   Subtitle[[i+1]] <- paste0(segment, "=", num_mutations," ")
+       # }
+       
+       # Subtitle <- paste(Subtitle, collapse = "   ")
+       # cat(Subtitle)
+ 
+       # mean_mut <- mean(num_mutations_all_segments)
+       # max_mut <- max(num_mutations_all_segments)
+       # min_mut <- min(num_mutations_all_segments)
+ 
+       # Subtitle_short <- paste0("Mutations per segment: average =", mean_mut, ",  min = ", min_mut, ", max = ", max_mut )
+ 
+ 
+       #add statistics on number of mutations from the simulation
+       
+       simulation_params <- list(
+         vector_tau = vector_tau,
+         vector_karyo = vector_karyo,
+         weights_tau = weights_tau,
+         weights_karyo = weights_karyo,
+         taus = data$taus,
+         karyo = data$karyo,
+         purity = purity,
+         number_events = number_events, # = nrow(vector-tau) / nrow(vector_karyo)
+         number_clocks = number_clocks, # = unique(vector_tau)
+         epsilon = epsilon
+       )
+ 
+ 
+ 
+       #  simulation_data_plot = simulation_data_all_segments %>% mutate (tau = round(tau, 2))
+       #  plot_data <- simulation_data_plot %>% 
+       #    ggplot(mapping = aes(x = NV / DP, fill = segment_name)) +
+       #    geom_histogram(alpha = .5, position = "identity") +
+       #    labs(
+       #      title = "Distribution on the VAF for each segment in the simulated data",
+       #      subtitle = paste0(Subtitle_short)
+       #    )+
+       #    facet_wrap(vars(karyotype, tau, segment_name), scales = "free_x", strip.position = "bottom") +
+       #    theme_minimal() +
+       #    theme(
+       #    panel.background = element_rect(fill = "white", color = NA),  # White panel background
+       #    plot.background = element_rect(fill = "white", color = NA),   # White plot background
+       #    strip.background = element_rect(fill = "white", color = NA),  # White strip background
+       #    strip.placement = "outside",   # Place facet labels outside
+       #    axis.text.x = element_text(angle = 360, hjust = 1, color = "black", size = 8),  # Rotate and adjust x-axis text
+       #    axis.ticks.x = element_line(color = "black"),  # Black x-axis ticks
+       #    panel.spacing = unit(1, "lines"),  # Adjust space between facets
+       #    strip.text.x = element_text(size = 10, color = "black"),  # Adjust and color strip text
+       #    axis.line = element_line(color = "black"),  # Black axis lines
+       #    axis.title.x = element_text(color = "black"),  # Black x-axis title
+       #    axis.title.y = element_text(color = "black")   # Black y-axis title
+       #  )+
+       #   xlim(0, 1)
+ 
+ 
+       # #save plot of the simulated data in which we can see each single segment VAF distribution
+       # ggsave("./plots/simulation_data.png", plot = plot_data, width = 12 + simulation_params$number_events, height = 10 + simulation_params$number_events + (simulation_params$number_events/1.3), limitsize = FALSE,   device = png) 
+       # #simulation_params can be substituted in relation with simulation_data variables
+       
+       
+       #in fit model selection best K the plots for each K inference is directly saved 
+       results <- fit_model_selection_best_K(simulation_data_all_segments, data$karyo, purity, max_attempts = max_attempts, INIT = INIT, simulation_params = simulation_params, tollerance = tollerance )
+       saveRDS(results, paste0("./results/results_simulation",i,".rds"))
+       
+ 
+       
+       
+       
+       model_selection_plot = plotting_model_selection(results)
+       model_selection_plot
+       ggsave("./plots/model_selection_plot.png", plot = model_selection_plot, width = 12, height = 10,  device = png)
+       
+       model_selection <- results$model_selection_tibble
+       saveRDS(model_selection, "./results/model_selection.rds")
+       
+ 
+       
+       setwd(original_dir)
+       
+     }
+ 
+ }
Loading required package: StanHeaders

rstan version 2.32.6 (Stan version 2.32.2)

For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,
change `threads_per_chain` option:
rstan_options(threads_per_chain = 1)


Attaching package: ‘rstan’

The following object is masked from ‘package:tidyr’:

    extract


Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count

[1] "number of clocks: "
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2474747 0.4949495
 [2,] 0.2474747 0.4949495
 [3,] 0.2474747 0.4949495
 [4,] 0.3288591 0.6577181
 [5,] 0.3288591 0.6577181
 [6,] 0.4900000 0.9800000
 [7,] 0.4900000 0.9800000
 [8,] 0.4900000 0.9800000
 [9,] 0.4900000 0.9800000
[10,] 0.3288591 0.6577181
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:1"
[1] "DP 98"  "DP 98"  "DP 99"  "DP 117"
 [1]  1  2  3  4  5  6  7  8  9 10
[1] "alpha_beta_all 4710"
[1] "dim(proportions$tau_posterior): 10"
init_taus from clustering  0.406223252283537w = 1
  w = 1
  w = 1
  w = 1
  w = 1
  w = 1
  w = 1
  w = 1
  w = 1
  w = 1
 tau = 0.406223252283537
 phi = 1
 kappa = 5Attempt 1 of 2
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.003087 seconds 
1000 transitions using 10 leapfrog steps per transition would take 30.87 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
     1       -15804.062             1.000            1.000 
     2       -15606.490             0.506            1.000 
     3       -15273.785             0.345            0.022 
     4       -15258.092             0.259            0.022 
     5       -15255.704             0.207            0.013 
     6       -15249.277             0.173            0.013 
     7       -15250.808             0.148            0.001 
     8       -15253.490             0.130            0.001 
     9       -15249.305             0.115            0.000 
    10       -15249.851             0.104            0.000 
    11       -15250.421             0.094            0.000 
    12       -15246.202             0.086            0.000 
    13       -15246.383             0.080            0.000 
    14       -15246.586             0.074            0.000 
    15       -15245.456             0.069            0.000 
    16       -15244.497             0.065            0.000 
    17       -15246.851             0.061            0.000 
    18       -15244.333             0.058            0.000 
    19       -15244.331             0.055            0.000 
    20       -15243.289             0.052            0.000 
    21       -15242.533             0.049            0.000 
    22       -15242.726             0.047            0.000 
    23       -15242.453             0.045            0.000 
    24       -15245.006             0.043            0.000 
    25       -15242.150             0.042            0.000 
    26       -15241.098             0.040            0.000 
    27       -15241.862             0.038            0.000 
    28       -15241.549             0.037            0.000 
    29       -15242.346             0.036            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  24.6 seconds.
[[1]]
[[1]]$w
      [,1]
 [1,]    1
 [2,]    1
 [3,]    1
 [4,]    1
 [5,]    1
 [6,]    1
 [7,]    1
 [8,]    1
 [9,]    1
[10,]    1

[[1]]$tau
[1] 0.4062233

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "perturbed tau: 0.559290975647265"
 [1] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [3] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [5] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [7] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [9] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
ELBO for this run: -15273.8
Attempt 2 of 2
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.003127 seconds 
1000 transitions using 10 leapfrog steps per transition would take 31.27 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
     1       -15290.273             1.000            1.000 
     2       -15280.553             0.500            1.000 
     3       -15274.248             0.334            0.001 
     4       -15274.187             0.250            0.001 
     5       -15285.655             0.200            0.001 
     6       -15279.251             0.167            0.001 
     7       -15276.472             0.143            0.000 
     8       -15267.019             0.125            0.001 
     9       -15266.139             0.111            0.000 
    10       -15264.740             0.100            0.000 
    11       -15262.825             0.091            0.000 
    12       -15263.000             0.084            0.000 
    13       -15254.053             0.077            0.000 
    14       -15257.083             0.072            0.000 
    15       -15254.251             0.067            0.000 
    16       -15257.339             0.063            0.000 
    17       -15255.147             0.059            0.000 
    18       -15256.365             0.056            0.000 
    19       -15256.003             0.053            0.000 
    20       -15258.171             0.050            0.000 
    21       -15251.230             0.048            0.000 
    22       -15252.942             0.046            0.000 
    23       -15252.633             0.044            0.000 
    24       -15256.257             0.042            0.000 
    25       -15257.362             0.040            0.000 
    26       -15247.243             0.039            0.000 
    27       -15249.982             0.037            0.000 
    28       -15249.791             0.036            0.000 
    29       -15247.744             0.035            0.000 
    30       -15249.172             0.034            0.000 
    31       -15249.037             0.032            0.000 
    32       -15248.916             0.031            0.000 
    33       -15249.429             0.031            0.000 
    34       -15248.211             0.030            0.000 
    35       -15244.727             0.029            0.000 
    36       -15247.068             0.028            0.000 
    37       -15248.229             0.027            0.000 
    38       -15249.064             0.027            0.000 
    39       -15246.897             0.026            0.000 
    40       -15248.393             0.025            0.000 
    41       -15245.147             0.025            0.000 
    42       -15244.689             0.024            0.000 
    43       -15244.998             0.023            0.000 
    44       -15246.292             0.023            0.000 
    45       -15245.375             0.022            0.000 
    46       -15245.662             0.022            0.000 
    47       -15244.210             0.021            0.000 
    48       -15249.043             0.021            0.000 
    49       -15247.781             0.021            0.000 
    50       -15243.372             0.020            0.000 
    51       -15247.332             0.020            0.000 
    52       -15243.455             0.019            0.000 
    53       -15243.265             0.019            0.000 
    54       -15243.629             0.019            0.000 
    55       -15243.183             0.018            0.000 
    56       -15242.585             0.018            0.000 
    57       -15243.572             0.018            0.000   MEDIAN ELBO CONVERGED 
Drawing a sample of size 1000 from the approximate posterior...  
COMPLETED. 
Finished in  28.4 seconds.
[[1]]
[[1]]$w
      [,1]
 [1,]    1
 [2,]    1
 [3,]    1
 [4,]    1
 [5,]    1
 [6,]    1
 [7,]    1
 [8,]    1
 [9,]    1
[10,]    1

[[1]]$tau
[1] 0.559291

[[1]]$phi
[1] 1

[[1]]$kappa
[1] 5


[1] "perturbed tau: 0.712358699010994"
 [1] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [3] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [5] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [7] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
 [9] "w_init after inference: 1 TRUE" "w_init after inference: 1 TRUE"
ELBO for this run: -15274.2
[1] "output_files /tmp/Rtmpc52YHS/timing_mixed_simple-diagnostic-202410091454-1-12ea93.csv\n"
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Scale for x is already present.
Adding another scale for x, which will replace the existing scale.
Number of mutations per segment:    segment 1=688    segment 2=626    segment 3=685    segment 4=476    segment 5=472    segment 6=364    segment 7=285    segment 8=269    segment 9=247    segment 10=598 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Number of mutations per segment:    1=710    2=650    3=713    4=499    5=494    6=378    7=300    8=278    9=251    10=620 `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
these are the peaks used to filter out mutations 
           [,1]      [,2]
 [1,] 0.2474747 0.4949495
 [2,] 0.2474747 0.4949495
 [3,] 0.2474747 0.4949495
 [4,] 0.3288591 0.6577181
 [5,] 0.3288591 0.6577181
 [6,] 0.4900000 0.9800000
 [7,] 0.4900000 0.9800000
 [8,] 0.4900000 0.9800000
 [9,] 0.4900000 0.9800000
[10,] 0.3288591 0.6577181
These are the Karyotypes extracted from the all_sim data, used in peaks
 [1] "2:2" "2:2" "2:2" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:1"
 [1]  1  2  3  4  5  6  7  8  9 10
These are the Karyotypes directly from the simulation, used for peaks in the model
  [1] "2:2" "2:2" "2:2" "2:1" "2:1" "2:0" "2:0" "2:0" "2:0" "2:1"
[1] "DP 98"  "DP 98"  "DP 99"  "DP 117"
 [1]  1  2  3  4  5  6  7  8  9 10
[1] "alpha_beta_all 4710"
[1] "dim(proportions$tau_posterior): 10"
init_taus from clustering  0.215158036714244 init_taus from clustering  0.589449096146964w = 0.996424301420807
  w = 0.997014206918591
  w = 0.99943967120005
  w = 0.0814128828191942
  w = 0.0304049244074316
  w = 0.992638638862884
  w = 0.0140306730801106
  w = 0.00861329216777275
  w = 0.149282124780923
  w = 0.998657382269468
  w = 0.00357569857919346
  w = 0.00298579308140895
  w = 0.00056032879994962
  w = 0.918587117180806
  w = 0.969595075592569
  w = 0.00736136113711582
  w = 0.985969326919889
  w = 0.991386707832227
  w = 0.850717875219077
  w = 0.00134261773053215
 tau = 0.215158036714244
  tau = 0.589449096146964
 phi = 0.5
  phi = 0.5
 kappa = 5Attempt 1 of 2
------------------------------------------------------------ 
EXPERIMENTAL ALGORITHM: 
  This procedure has not been thoroughly tested and may be unstable 
  or buggy. The interface is subject to change. 
------------------------------------------------------------ 
Gradient evaluation took 0.005737 seconds 
1000 transitions using 10 leapfrog steps per transition would take 57.37 seconds. 
Adjust your expectations accordingly! 
Begin eta adaptation. 
Iteration:   1 / 250 [  0%]  (Adaptation) 
Iteration:  50 / 250 [ 20%]  (Adaptation) 
Iteration: 100 / 250 [ 40%]  (Adaptation) 
Iteration: 150 / 250 [ 60%]  (Adaptation) 
Iteration: 200 / 250 [ 80%]  (Adaptation) 
Success! Found best value [eta = 1] earlier than expected. 
Begin stochastic gradient ascent. 
  iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  
     1       -15151.096             1.000            1.000 
     2       -15367.226             0.507            1.000 
     3       -15385.789             0.338            0.014 
     4       -15187.832             0.257            0.014 
     5       -15075.844             0.207            0.013 
     6       -15039.152             0.173            0.013 
     7       -15033.666             0.148            0.007 
     8       -15020.602             0.130            0.007 
     9       -15021.002             0.115            0.002 
    10       -15014.784             0.104            0.002 
    11       -15010.076             0.095            0.001 
    12       -15005.943             0.087            0.001 
    13       -15005.749             0.080            0.001 
    14       -15003.582             0.074            0.001 
    15       -15000.851             0.069            0.000 
    16       -15000.291             0.065            0.000 
    17       -14995.462             0.061            0.000 
    18       -14996.250             0.058            0.000 
    19       -14989.443             0.055            0.000 
    20       -14987.764             0.052            0.000 
    21       -14984.716             0.050            0.000 
    22       -14982.036             0.047            0.000 
    23       -14978.909             0.045            0.000 
    24       -14977.228             0.043            0.000 
    25       -14972.965             0.042            0.000 
    26       -14972.381             0.040            0.000 
    27       -14972.506             0.039            0.000 
    28       -14969.938             0.037            0.000 
    29       -14970.657             0.036            0.000 
    30       -14969.163             0.035            0.000 
    31       -14968.250             0.034            0.000 
    32       -14967.589             0.033            0.000 
    33       -14970.098             0.032            0.000 
    34       -14970.223             0.031            0.000 
    35       -14968.598             0.030            0.000 
    36       -14966.808             0.029            0.000 
    37       -14967.675             0.028            0.000 
